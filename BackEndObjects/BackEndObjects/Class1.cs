using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Data;
using System.IO;
using DBConn;
using System.Web.UI.WebControls;


namespace BackEndObjects
{
    /// <summary>
    /// This class is representative of  'Approval_History' table
    /// </summary>
    public class ApprovalHistory
    {
        private String contextId;
        private String contextName;
        private String userId;
        private String status;
        private String statusNote;
        private String updateDateTime;

        public const String APPROVAL_HIST_TABLE = "Approval_History";

        public const String APPROVAL_HIST_COL_CONTEXT_ID = "Context_Id";
        public const String APPROVAL_HIST_COL_CONTEXT_NAME = "Context_Name";
        public const String APPROVAL_HIST_COL_USR_ID = "User_Id";
        public const String APPROVAL_HIST_COL_STATUS = "Status";
        public const String APPROVAL_HIST_COL_STATUS_NOTE = "Status_Note";
        public const String APPROVAL_HIST_COL_STATUS_DATETIME = "Status_DateTime";

        public const String APPROVAL_HIST_COL_CONTEXT_ID_TYPE = Connections.STRING_TYPE;
        public const String APPROVAL_HIST_COL_CONTEXT_NAME_TYPE = Connections.STRING_TYPE;
        public const String APPROVAL_HIST_COL_USR_ID_TYPE = Connections.STRING_TYPE;
        public const String APPROVAL_HIST_COL_STATUS_TYPE = Connections.STRING_TYPE;
        public const String APPROVAL_HIST_COL_STATUS_NOTE_TYPE = Connections.STRING_TYPE;
        public const String APPROVAL_HIST_COL_STATUS_DATETIME_TYPE = Connections.DATE_TIME_TYPE;


        public String getContextId()
        {
            return contextId;
        }
        public void setContextId(String contextId)
        {
            this.contextId = contextId;
        }
        public String getContextName()
        {
            return contextName;
        }
        public void setContextName(String contextName)
        {
            this.contextName = contextName;
        }
        public String getUserId()
        {
            return userId;
        }
        public void setUserId(String userId)
        {
            this.userId = userId;
        }
        public String getStatus()
        {
            return status;
        }
        public void setStatus(String status)
        {
            this.status = status;
        }
        public String getStatusNote()
        {
            return statusNote;
        }
        public void setStatusNote(String statusNote)
        {
            this.statusNote = statusNote;
        }
        public String getUpdateDateTime()
        {
            return updateDateTime;
        }
        public void setUpdateDateTime(String updateDateTime)
        {
            this.updateDateTime = updateDateTime;
        }

        /// <summary>
        /// For a given context id this method returns all approval history objects from the db
        /// the second parameter can be "ASC"/"DESC" which signals to return the list in ascending/descending order of time
        /// </summary>
        /// <param name="cId"></param>
        /// <param name="order"></param>
        /// <returns></returns>
        public ArrayList getAllApprovalHistorybyContextIdDB(String cId, String order)
        {
            String cmd = "select " + ApprovalHistory.APPROVAL_HIST_COL_CONTEXT_ID +
                     "," + ApprovalHistory.APPROVAL_HIST_COL_CONTEXT_NAME +
                     "," + ApprovalHistory.APPROVAL_HIST_COL_STATUS +
                     "," + ApprovalHistory.APPROVAL_HIST_COL_STATUS_DATETIME +
                     "," + ApprovalHistory.APPROVAL_HIST_COL_STATUS_NOTE +
                     "," + ApprovalHistory.APPROVAL_HIST_COL_USR_ID +
                        " from " + ApprovalHistory.APPROVAL_HIST_TABLE +
                    " where " + ApprovalHistory.APPROVAL_HIST_COL_CONTEXT_ID + "=" + "'" + cId.Trim() + "'" + " order by " +
                    ApprovalHistory.APPROVAL_HIST_COL_STATUS_DATETIME + " " +
                    (order == null || order.Equals("") ? "ASC" : order.Trim());

            ArrayList approvalHist = new ArrayList();

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, "");
            DataTable dt = ds.Tables[0];

            foreach (DataRow dr in dt.Rows)
            {
                ApprovalHistory apprObj = new ApprovalHistory();

                apprObj.setContextId(dr[0].ToString());
                apprObj.setContextName(dr[1].ToString());
                apprObj.setStatus(dr[2].ToString());
                apprObj.setUpdateDateTime(dr[3].ToString());
                apprObj.setStatusNote(dr[4].ToString());
                apprObj.setUserId(dr[5].ToString());

                approvalHist.Add(apprObj);
            }

            cn.disconnect();
            return approvalHist;
        }
        /// <summary>
        /// Inserts the approvalHistory object into DB
        /// </summary>
        /// <param name="apprObj"></param>
        public void insertApprovalHistoryDB(ApprovalHistory apprObj)
        {
            String cmdInsert = "insert into " + ApprovalHistory.APPROVAL_HIST_TABLE + " (" +
    ApprovalHistory.APPROVAL_HIST_COL_CONTEXT_ID + "," +
    ApprovalHistory.APPROVAL_HIST_COL_CONTEXT_NAME + "," +
    ApprovalHistory.APPROVAL_HIST_COL_STATUS + "," +
    ApprovalHistory.APPROVAL_HIST_COL_STATUS_DATETIME + "," +
    ApprovalHistory.APPROVAL_HIST_COL_STATUS_NOTE + "," +
    ApprovalHistory.APPROVAL_HIST_COL_USR_ID + ")" +
    " values (";

            String cmd = "";
            Connections cn = new Connections();

            cmd += cmdInsert + "'" +
                apprObj.getContextId() + "'," + "'" +
                apprObj.getContextName() + "'," + "'" +
                apprObj.getStatus() + "'," + "'" +
                apprObj.getUpdateDateTime() + "'," + "'" +
                apprObj.getStatusNote() + "'," + "'" +
                apprObj.getUserId() + "')";

            cn.execInsertUpdate(cmd, "");

            cn.disconnect();

        }

        public int updateApprovalHistoryDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to updateApprovalHistoryDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to updateApprovalHistoryDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + ApprovalHistory.APPROVAL_HIST_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + ApprovalHistory.APPROVAL_HIST_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(ApprovalHistory.APPROVAL_HIST_COL_CONTEXT_ID, ApprovalHistory.APPROVAL_HIST_COL_CONTEXT_ID_TYPE);
            chkDataType.Add(ApprovalHistory.APPROVAL_HIST_COL_CONTEXT_NAME, ApprovalHistory.APPROVAL_HIST_COL_CONTEXT_NAME_TYPE);
            chkDataType.Add(ApprovalHistory.APPROVAL_HIST_COL_STATUS, ApprovalHistory.APPROVAL_HIST_COL_STATUS_TYPE);
            chkDataType.Add(ApprovalHistory.APPROVAL_HIST_COL_STATUS_DATETIME, ApprovalHistory.APPROVAL_HIST_COL_STATUS_DATETIME_TYPE);
            chkDataType.Add(ApprovalHistory.APPROVAL_HIST_COL_STATUS_NOTE, ApprovalHistory.APPROVAL_HIST_COL_STATUS_NOTE_TYPE);
            chkDataType.Add(ApprovalHistory.APPROVAL_HIST_COL_USR_ID, ApprovalHistory.APPROVAL_HIST_COL_USR_ID_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to updateApprovalHistoryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to updateApprovalHistoryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }

            //Delete respective entries from feature_details table as well.
            if (operation.Equals(Connections.OPERATION_DELETE))
                cmd += " ";


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, "");
            cn.disconnect();

            return rowsAffected;

        }
    }

    /// <summary>
    /// This class is specifically introduced to address the need of having address objects related to MainBusiness Entity.
    /// This is nearly a clone of the 'SubBusinessEntity' class - but mainly provided for a logical separation.
    /// This class is representative of the backend object '[Shop_User_Addr_Details]'.
    /// </summary>
    public class AddressDetails
    {

        private String subEntityId;
        private String EntityName;
        private String addrLine1;
        private String localityId;
        private String subPhNo;
        private String EmailId;
        private String WebSite;
        private String RegstrNo;
        private String baseCurrencyId;
        private String contactName;
        private String mainBusinessId;

        public const String ADDR_DETAILS_ENTITY_TABLE = "Shop_User_Addr_Details";

        private static String sessionUser = "";

        public const String ADDR_DETAILS_COL_ADDR_LINE1 = "Addr_Line1";
        public const String ADDR_DETAILS_COL_LOCALITY_ID = "Locality_Id";
        public const String ADDR_DETAILS_COL_MOBILE_NO = "Mobile_No";
        public const String ADDR_DETAILS_COL_CONTACT_NAME = "Contact_Name";
        public const String ADDR_DETAILS_COL_EMAIL_ID = "Email";
        public const String ADDR_DETAILS_COL_WEBSITE = "WebSite";
        public const String ADDR_DETAILS_COL_REGSTR_NO = "Regstr_No";
        public const String ADDR_DETAILS_COL_BASE_CURR = "Base_Currency_Code";
        public const String ADDR_DETAILS_COL_CHAIN_ID = "Chain_id";
        public const String ADDR_DETAILS_COL_CHAIN_NAME = "Chain_Name";
        public const String ADDR_DETAILS_COL_BUSINESS_ID = "Cmp_Usr_Shop_id";

        public const String ADDR_DETAILS_COL_ADDR_LINE1_TYPE = Connections.STRING_TYPE;
        public const String ADDR_DETAILS_COL_LOCALITY_ID_TYPE = Connections.STRING_TYPE;
        public const String ADDR_DETAILS_COL_MOBILE_NO_TYPE = Connections.STRING_TYPE;
        public const String ADDR_DETAILS_COL_CONTACT_NAME_TYPE = Connections.STRING_TYPE;
        public const String ADDR_DETAILS_COL_EMAIL_ID_TYPE = Connections.STRING_TYPE;
        public const String ADDR_DETAILS_COL_WEBSITE_TYPE = Connections.STRING_TYPE;
        public const String ADDR_DETAILS_COL_REGSTR_NO_TYPE = Connections.STRING_TYPE;
        public const String ADDR_DETAILS_COL_BASE_CURR_TYPE = Connections.STRING_TYPE;
        public const String ADDR_DETAILS_COL_CHAIN_ID_TYPE = Connections.STRING_TYPE;
        public const String ADDR_DETAILS_COL_CHAIN_NAME_TYPE = Connections.STRING_TYPE;
        public const String ADDR_DETAILS_COL_BUSINESS_ID_TYPE = Connections.STRING_TYPE;
        /// <summary>
        /// This constant to be used when entering the address data for a 'non-chain' entity.
        /// If the sub entity id is equal to 'Address.DUMMY_CHAIN_ID' then it signifies a 'non-sub/non-chain' address record.
        /// So use this constant to set the chain id in situations where the address being entered is of a main business/individual entity.
        /// </summary>
        public const String DUMMY_CHAIN_ID = "";
        /// <summary>
        /// If the sub entity id is equal to 'Address.DUMMY_CHAIN_ID' then it signifies a 'non-sub/non-chain' address record.
        /// </summary>
        /// <returns></returns>
        public String getSubEntityId()
        {
            return this.subEntityId;
        }
        /// <summary>
        ///  If the sub entity id is equal to 'Address.DUMMY_CHAIN_ID' then it signifies a 'non-sub/non-chain' address record.
        ///  So use this constant to set the chain id in situations where the address being entered is of a main business/individual entity.
        /// </summary>
        /// <param name="sId"></param>
        public void setSubEntityId(String sId)
        {
            this.subEntityId = sId;
        }

        public String getSubEntityName()
        {
            return this.EntityName;
        }

        public void setSubEntityName(String sName)
        {
            this.EntityName = sName;
        }

        public String getAddrLine1()
        {
            return this.addrLine1;
        }

        public void setAddrLine1(String addr1)
        {
            this.addrLine1 = addr1;
        }

        public String getLocalityId()
        {
            return this.localityId;
        }

        public void setLocalityId(String lId)
        {
            this.localityId = lId;
        }

        public String getSubPhNo()
        {
            return this.subPhNo;
        }

        public void setSubPhNo(String pNo)
        {
            this.subPhNo = pNo;
        }

        public String getSubEmailId()
        {
            return this.EmailId;
        }

        public void setSubEmailId(String eId)
        {
            this.EmailId = eId;
        }

        public String getSubWebSite()
        {
            return this.WebSite;
        }

        public void setSubWebSite(String web)
        {
            this.WebSite = web;
        }

        public String getSubRegstrNo()
        {
            return this.RegstrNo;
        }

        public void setSubRegstrNo(String regstr)
        {
            this.RegstrNo = regstr;
        }

        public String getBaseCurrencyId()
        {
            return this.baseCurrencyId;
        }

        public void setBaseCurrencyId(String bcId)
        {
            this.baseCurrencyId = bcId;
        }

        public String getContactName()
        {
            return this.contactName;
        }

        public void setContactName(String cName)
        {
            this.contactName = cName;
        }

        public String getMainBusinessId()
        {
            return mainBusinessId;
        }

        public void setMainBusinessId(String mBID)
        {
            mainBusinessId = mBID;
        }

        /// <summary>
        /// inserts the passed address entity object into the database table 'Shop_User_Addr_Details'
        /// there is a chance of foreign key violation error if the passed 'locality_id' and/or the 'currency_id' does
        /// not exist in the parent database tables
        /// While inserting address details of Main Business Entity id only the following paramteres need to be setup -
        /// 1. Locality Id
        /// 2. Main ent id
        /// 3. Sub Ent id (DUMMY)
        /// 4. Base Curr Id
        /// 5. Address line1
        /// </summary>
        /// <param name="subEnt"></param>
        /// <returns></returns>
        public static int insertAddressEntityDB(ArrayList subEnt)
        {
            /* inserts the passed subbusinessentity object into the database table 'Shop_User_Addr_Details'
             * there is a chance of foreign key violation error if the passed 'locality_id' and/or the 'currency_id' does
             * not exist in the parent database tables
             * 
             * @Author: shibasis sengupta
            */

            if (subEnt.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty Address Entity list sent to method subBusinessEntity.insertSubBusinessEntityDB"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + AddressDetails.ADDR_DETAILS_ENTITY_TABLE
                + " ("
                + AddressDetails.ADDR_DETAILS_COL_ADDR_LINE1 + ","
                + AddressDetails.ADDR_DETAILS_COL_BASE_CURR + ","
                + AddressDetails.ADDR_DETAILS_COL_CHAIN_ID + ","
                + AddressDetails.ADDR_DETAILS_COL_CHAIN_NAME + ","
                + AddressDetails.ADDR_DETAILS_COL_CONTACT_NAME + ","
                + AddressDetails.ADDR_DETAILS_COL_EMAIL_ID + ","
                + AddressDetails.ADDR_DETAILS_COL_LOCALITY_ID + ","
                + AddressDetails.ADDR_DETAILS_COL_MOBILE_NO + ","
                + AddressDetails.ADDR_DETAILS_COL_REGSTR_NO + ","
                + AddressDetails.ADDR_DETAILS_COL_WEBSITE + ","
                + AddressDetails.ADDR_DETAILS_COL_BUSINESS_ID + ")"
                + "values (";
            Connections cn = new Connections();

            for (int i = 0; i < subEnt.Count; i++)
            {
                AddressDetails currObj = (AddressDetails)subEnt[i];

                insertCmd = insertCmd + "'"
                    + currObj.getAddrLine1() + "'" + ","
                    + "'" + currObj.getBaseCurrencyId() + "'" + ","
                    + "'" + currObj.getSubEntityId() + "'" + ","
                   + "'" + currObj.getSubEntityName() + "'" + ","
                    + "'" + currObj.getContactName() + "'" + ","
                    + "'" + currObj.getSubEmailId() + "'" + ","
                     + "'" + currObj.getLocalityId() + "'" + ","
                    + "'" + currObj.getSubPhNo() + "'" + ","
                    + "'" + currObj.getSubRegstrNo() + "'" + ","
                    + "'" + currObj.getSubWebSite() + "'" + ","
                    + "'" + currObj.getMainBusinessId() + "'";

                insertCmd += ")";

                //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            return rowsAffected;

        }
        /// <summary>
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the subBusinessEntity id.
        /// For updating the address details of the main business entity, pass the chain id value as empty string
        /// the third parameter contains the type of operation
        /// a delete operation will NOT have a  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateAddressEntityDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the subBusinessEntity id 
             * the third parameter contains the type of operation
             * 
             * a delete operation will NOT have a  cascading effect on any table 
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(AddressDetails.ADDR_DETAILS_COL_CHAIN_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - AddressDetails.updateAddressEntityDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to AddressDetails.updateAddressEntityDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to AddressDetails.updateAddressEntityDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + AddressDetails.ADDR_DETAILS_ENTITY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + AddressDetails.ADDR_DETAILS_ENTITY_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_WEBSITE, AddressDetails.ADDR_DETAILS_COL_WEBSITE_TYPE);
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_REGSTR_NO, AddressDetails.ADDR_DETAILS_COL_REGSTR_NO_TYPE);
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_MOBILE_NO, AddressDetails.ADDR_DETAILS_COL_MOBILE_NO_TYPE);
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_LOCALITY_ID, AddressDetails.ADDR_DETAILS_COL_LOCALITY_ID_TYPE);
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_EMAIL_ID, AddressDetails.ADDR_DETAILS_COL_EMAIL_ID_TYPE);
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_CONTACT_NAME, AddressDetails.ADDR_DETAILS_COL_CONTACT_NAME_TYPE);
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_CHAIN_NAME, AddressDetails.ADDR_DETAILS_COL_CHAIN_NAME_TYPE);
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_CHAIN_ID, AddressDetails.ADDR_DETAILS_COL_CHAIN_ID_TYPE);
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_BASE_CURR, AddressDetails.ADDR_DETAILS_COL_BASE_CURR_TYPE);
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_ADDR_LINE1, AddressDetails.ADDR_DETAILS_COL_ADDR_LINE1_TYPE);
            chkDataType.Add(AddressDetails.ADDR_DETAILS_COL_BUSINESS_ID, AddressDetails.ADDR_DETAILS_COL_BUSINESS_ID_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to AddressDetails.updateAddressEntityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to AddressDetails.updateAddressEntityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }
        /// <summary>
        /// for a given chain Id, it will return the respective parent object from the table 'Shop_User_Details'
        /// this method only returns the following details of the MainBusinessEntity object -
        /// entityId
        /// entityName
        /// phNo
        /// emailId
        /// webSite
        /// desc
        /// owner name
        /// </summary>
        /// <param name="chId"></param>
        /// <returns></returns>
        public static MainBusinessEntity getMainBusinessforSubBusinessbyIdDB(String chId)
        {
            /* for a given chain Id, it will return the respective parent object from the table 'Shop_User_Details'
             * the returned object will only contain the following details -
             * entityId,entityName,phNo,emailId,webSite,desc,owner name
             * 
             * @Author: shibasis sengupta
            */

            if (chId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty subBusinessEntity Id Passed to AddressDetails.getMainBusinessforSubBusinessbyIdDB"));


            Connections cn = new Connections();

            String cmd = " select m." + MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_DESC +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_EMAIL_ID +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_IND_CHAIN +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_MOBILE_NO +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_OWNER_NAME +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_SHOP_NAME +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_WEBSITE +
                                " from " + MainBusinessEntity.MAIN_BUSINESS_ENTITY_TABLE + " m," + AddressDetails.ADDR_DETAILS_ENTITY_TABLE + " n" +
                                " where " + "m." + MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID + "=" + "n." + AddressDetails.ADDR_DETAILS_COL_BUSINESS_ID;

            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];
            MainBusinessEntity tempMainBusiness = new MainBusinessEntity();

            foreach (DataRow dr in dt.Rows)
            {
                tempMainBusiness.setEntityId(dr[0].ToString());
                tempMainBusiness.setDesc(dr[1].ToString());
                tempMainBusiness.setEmailId(dr[2].ToString());
                tempMainBusiness.setIndChain(dr[3].ToString());
                tempMainBusiness.setPhNo(dr[4].ToString());
                tempMainBusiness.setOwnerName(dr[5].ToString());
                tempMainBusiness.setEntityName(dr[6].ToString());
                tempMainBusiness.setWebSite(dr[7].ToString());

            }
            cn.disconnect();
            return tempMainBusiness;

        }
        /// <summary>
        /// For a given main business entity id this method returns the respective address object from database.
        /// </summary>
        /// <param name="mId"></param>
        /// <returns></returns>
        public static AddressDetails getAddressforMainBusinessEntitybyIdDB(String mId)
        {
            if (mId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty BusinessEntity Id Passed to AddressDetails.getAddressforMainBusinessEntitybyIdDB"));

            
            Connections cn = new Connections();

            String cmd = " select m." + AddressDetails.ADDR_DETAILS_COL_ADDR_LINE1 +
                                ",m." + AddressDetails.ADDR_DETAILS_COL_BASE_CURR +
                                ",m." + AddressDetails.ADDR_DETAILS_COL_BUSINESS_ID +
                                ",m." + AddressDetails.ADDR_DETAILS_COL_CHAIN_ID +
                                ",m." + AddressDetails.ADDR_DETAILS_COL_CHAIN_NAME +
                                ",m." + AddressDetails.ADDR_DETAILS_COL_CONTACT_NAME +
                                ",m." + AddressDetails.ADDR_DETAILS_COL_EMAIL_ID +
                                ",m." + AddressDetails.ADDR_DETAILS_COL_LOCALITY_ID +
                                ",m." + AddressDetails.ADDR_DETAILS_COL_MOBILE_NO +
                                ",m." + AddressDetails.ADDR_DETAILS_COL_REGSTR_NO +
                                ",m." + AddressDetails.ADDR_DETAILS_COL_WEBSITE +
                                " from " + AddressDetails.ADDR_DETAILS_ENTITY_TABLE + " m " +
                                " where " + "m." + AddressDetails.ADDR_DETAILS_COL_BUSINESS_ID + "=" + "'" + mId.Trim() + "'" +
                                " and " + "m." + AddressDetails.ADDR_DETAILS_COL_CHAIN_ID + "=" + "'"+AddressDetails.DUMMY_CHAIN_ID+"'";

            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];
            AddressDetails aD = new AddressDetails();

            foreach (DataRow dr in dt.Rows)
            {
                aD.setAddrLine1(dr[0].ToString());
                aD.setBaseCurrencyId(dr[1].ToString());
                aD.setMainBusinessId(dr[2].ToString());
                aD.setSubEntityId(dr[3].ToString());
                aD.setSubEntityName(dr[4].ToString());
                aD.setContactName(dr[5].ToString());
                aD.setSubEmailId(dr[6].ToString());
                aD.setLocalityId(dr[7].ToString());
                aD.setSubPhNo(dr[8].ToString());
                aD.setSubRegstrNo(dr[9].ToString());
                aD.setSubWebSite(dr[10].ToString());

            }
            cn.disconnect();
            return aD;

 
        }
    }
    /// <summary>
    /// representative of the database table 'Feature_Specification_Map'
    /// </summary>
    public class Specifications
    {
               /*
         * This class is representative of the specifications of different product category's features
         * this class objects are mainly used by the ProductCategory and Features class objects
                * 
                * related tables in the databse are <Feature_Specification_Map>
         * @Author: Shibasis Sengutpa
        */

        public const String FEATURE_SPEC_MAP_TABLE = "feature_specification_map";
        
        public const String FEATURE_SPEC_COL_FEATURE_ID = "feature_id";
        public const String FEATURE_SPEC_COL_SPEC_ID = "specification_id";
        public const String FEATURE_SPEC_COL_SPEC_NAME = "spec_name";
        public const String FEATURE_SPEC_COL_DIM1 = "dim1";
        public const String FEATURE_SPEC_COL_DIM2 ="dim2";
        public const String FEATURE_SPEC_COL_DIM3 = "dim3";

        //Storing the data types
        public const String FEATURE_SPEC_COL_FEATURE_ID_TYPE = Connections.STRING_TYPE;
        public const String FEATURE_SPEC_COL_SPEC_ID_TYPE = Connections.STRING_TYPE;
        public const String FEATURE_SPEC_COL_SPEC_NAME_TYPE = Connections.STRING_TYPE;
        public const String FEATURE_SPEC_COL_DIM1_TYPE = Connections.NUMBER_TYPE;
        public const String FEATURE_SPEC_COL_DIM2_TYPE = Connections.NUMBER_TYPE;
        public const String FEATURE_SPEC_COL_DIM3_TYPE = Connections.NUMBER_TYPE;

        private String specId;
        private String specName;
        private ArrayList dimensions=new ArrayList ();

        private static String sessionUser = "";

        public String getSpecId()
        {
            return this.specId;
        }

        public void setSpecId(String spc)
        {
            this.specId = spc;
        }

        public String getSpecName()
        {
            return this.specName;
        }

        public void setSpecName(String spcnm)
        {
            this.specName = spcnm;
        }

        public ArrayList  getDimensions()
        {
            return this.dimensions;
        }

        public void setDimensions(ArrayList dmn)
        {
            this.dimensions = dmn;
        }
        /// <summary>
        /// for a given specification id return the respective specification object from database
        /// </summary>
        /// <param name="specId"></param>
        /// <returns></returns>
        public Specifications getSpecificationbyIdDB(String specId)
        {
            /* for a given specification id return the respective specification object from database
             * 
             * @Author: shibasis sengupta
            */

            if (specId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Specification Id sent to Specifications.getSpecificationbyIdDB"));

            Connections cn = new Connections();
            String query = "select " + Specifications.FEATURE_SPEC_COL_SPEC_ID +
                "," + Specifications.FEATURE_SPEC_COL_SPEC_NAME +
                "," + Specifications.FEATURE_SPEC_COL_DIM1 +
                "," + Specifications.FEATURE_SPEC_COL_DIM2 +
                "," + Specifications.FEATURE_SPEC_COL_DIM3 +
                " from " + Specifications.FEATURE_SPEC_MAP_TABLE +
                " where " + Specifications.FEATURE_SPEC_COL_SPEC_ID + "='" + specId.Trim() + "'";
                

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Specifications tempSpec = new Specifications();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempSpec.setSpecId(dr[0].ToString());
                    tempSpec.setSpecName(dr[1].ToString());

                    ArrayList tempDim = new ArrayList();
                    tempDim.Add(dr[2].ToString());
                    tempDim.Add(dr[3].ToString());
                    tempDim.Add(dr[4].ToString());

                    tempSpec.setDimensions(tempDim);

                }
            cn.disconnect();
            return tempSpec;
         
        }
        /// <summary>
        /// This is a static version of the method getSpecificationbyIdDB
        /// </summary>
        /// <param name="specId"></param>
        /// <returns></returns>
        public static Specifications getSpecificationDetailbyIdDB(String specId)
        {
            /* for a given specification id return the respective specification object from database
             * 
             * @Author: shibasis sengupta
            */

            if (specId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Specification Id sent to Specifications.getSpecificationbyIdDB"));

            Connections cn = new Connections();
            String query = "select " + Specifications.FEATURE_SPEC_COL_SPEC_ID +
                "," + Specifications.FEATURE_SPEC_COL_SPEC_NAME +
                "," + Specifications.FEATURE_SPEC_COL_DIM1 +
                "," + Specifications.FEATURE_SPEC_COL_DIM2 +
                "," + Specifications.FEATURE_SPEC_COL_DIM3 +
                " from " + Specifications.FEATURE_SPEC_MAP_TABLE +
                " where " + Specifications.FEATURE_SPEC_COL_SPEC_ID + "='" + specId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Specifications tempSpec = new Specifications();

            foreach (DataRow dr in dt.Rows)
            {
                tempSpec.setSpecId(dr[0].ToString());
                tempSpec.setSpecName(dr[1].ToString());

                ArrayList tempDim = new ArrayList();
                tempDim.Add(dr[2].ToString());
                tempDim.Add(dr[3].ToString());
                tempDim.Add(dr[4].ToString());

                tempSpec.setDimensions(tempDim);

            }
            cn.disconnect();
            return tempSpec;

        }
    }
    /// <summary>
    /// This class represents a map between the product category and the feature.
    /// This class is representative of the back end object 'Category_Feature_Map'
    /// </summary>
    public class CategoryFeatureMap
    {
        private String prodCatId;
        private String featId;

        public String getProdCatId()
        {
            return this.prodCatId;
        }
        public void setProdCatId(String catId)
        {
            prodCatId = catId;
        }
        public String getFeatId()
        {
            return this.featId;
        }
        public void setFeatId(String ftId)
        {
            featId = ftId;
        }

        public const String FEATURE_TABLE = "Category_Feature_Map";

        public const String FEATURE_COL_FEATURE_ID = "feature_id";
        public const String FEATURE_COL_PRODUCT_CAT_ID = "Prod_Category_Id";
  
        //Storing the data types of the respective fields
        public const String FEATURE_COL_FEATURE_ID_TYPE = Connections.STRING_TYPE;
        public const String FEATURE_COL_PRODUCT_CAT_ID_TYPE = Connections.STRING_TYPE;
  
    }
    public class DeptDetails
    {
        private String entId;
        private String deptId;
        private String deptName;
        private String deptDescription;
        private String deptHeadUsrId;

        public const String DEPT_DETAILS_TABLE = "DeptDetails";

        public const String DEPT_DETAILS_COL_ENT_ID = "Cmp_Usr_Shop_id";
        public const String DEPT_DETAILS_COL_DEPT_ID = "DeptId";
        public const String DEPT_DETAILS_COL_DEPT_NAME = "DeptName";
        public const String DEPT_DETAILS_COL_DEPT_HEAD_USR_ID = "DeptHeadUserId";
        public const String DEPT_DETAILS_COL_DEPT_DESC = "DeptDescription";

        public const String DEPT_DETAILS_COL_ENT_ID_TYPE = Connections.STRING_TYPE;
        public const String DEPT_DETAILS_COL_DEPT_ID_TYPE = Connections.STRING_TYPE;
        public const String DEPT_DETAILS_COL_DEPT_NAME_TYPE = Connections.STRING_TYPE;
        public const String DEPT_DETAILS_COL_DEPT_HEAD_USR_ID_TYPE = Connections.STRING_TYPE;
        public const String DEPT_DETAILS_COL_DEPT_DESC_TYPE = Connections.STRING_TYPE;



        public String getEntId()
        {
            return entId;
        }
        public void setEntId(String entId)
        {
            this.entId = entId;
        }
        public String getDeptId()
        {
            return deptId;
        }
        public void setDeptId(String deptId)
        {
            this.deptId = deptId;
        }
        public String getDeptName()
        {
            return deptName;
        }
        public void setDeptName(String deptName)
        {
            this.deptName = deptName;
        }
        public String getDeptDescription()
        {
            return deptDescription;
        }
        public void setDeptDescription(String deptDescription)
        {
            this.deptDescription = deptDescription;
        }
        public String getDeptHeadUsrId()
        {
            return deptHeadUsrId;
        }
        public void setDeptHeadUsrId(String deptHeadUsrId)
        {
            this.deptHeadUsrId = deptHeadUsrId;
        }

        public static int updateDeptDetailsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to updateDeptDetailsDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to updateDeptDetailsDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + DeptDetails.DEPT_DETAILS_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + DeptDetails.DEPT_DETAILS_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(DeptDetails.DEPT_DETAILS_COL_DEPT_DESC, DeptDetails.DEPT_DETAILS_COL_DEPT_DESC_TYPE);
            chkDataType.Add(DeptDetails.DEPT_DETAILS_COL_DEPT_HEAD_USR_ID, DeptDetails.DEPT_DETAILS_COL_DEPT_HEAD_USR_ID_TYPE);
            chkDataType.Add(DeptDetails.DEPT_DETAILS_COL_DEPT_ID, DeptDetails.DEPT_DETAILS_COL_DEPT_ID_TYPE);
            chkDataType.Add(DeptDetails.DEPT_DETAILS_COL_DEPT_NAME, DeptDetails.DEPT_DETAILS_COL_DEPT_NAME_TYPE);
            chkDataType.Add(DeptDetails.DEPT_DETAILS_COL_ENT_ID, DeptDetails.DEPT_DETAILS_COL_ENT_ID_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to updateDeptDetailsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to updateDeptDetailsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }

            //Delete respective entries from feature_details table as well.
            if (operation.Equals(Connections.OPERATION_DELETE))
                cmd += " ";


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, "");
            cn.disconnect();

            return rowsAffected;


        }
        public static void insertDeptDetailsDB(DeptDetails deptObj)
        {
            /*thie method will insert all the product category objects passed to it into database table 'Product_Category_Hierarchy' table ONLY
             * @ Author: shibasis sengupta
            */


            String cmdInsert = "insert into " + DeptDetails.DEPT_DETAILS_TABLE + " (" +
                DeptDetails.DEPT_DETAILS_COL_DEPT_DESC + "," +
                DeptDetails.DEPT_DETAILS_COL_DEPT_HEAD_USR_ID + "," +
                DeptDetails.DEPT_DETAILS_COL_DEPT_ID + "," +
                DeptDetails.DEPT_DETAILS_COL_ENT_ID + "," +
                DeptDetails.DEPT_DETAILS_COL_DEPT_NAME + ")" +
                " values (";

            int count = 0;
            String cmd = "";
            ProductCategory pc = null;
            Connections cn = new Connections();



            cmd += cmdInsert + "'" +
                deptObj.getDeptDescription() + "'," + "'" +
                deptObj.getDeptHeadUsrId() + "'," + "'" +
                deptObj.getDeptId() + "'," + "'" +
                deptObj.getEntId() + "'," + "'" +
                deptObj.getDeptName() + "')";

            cn.execInsertUpdate(cmd, "");

            cn.disconnect();
        }
        public static DeptDetails getDeptDetailsForEntIdAndDeptIdDB(String entId,String deptId)
        {
            /*this method returns the respective ProductCategory details from the table 
             * 'product_category_hierarchy' for any given category id
             * 
             * @Author: shibasis sengupta
             */

            String cmd = "select " + DeptDetails.DEPT_DETAILS_COL_DEPT_DESC +
                                 "," + DeptDetails.DEPT_DETAILS_COL_DEPT_HEAD_USR_ID +
                                 "," + DeptDetails.DEPT_DETAILS_COL_DEPT_ID +
                                 "," + DeptDetails.DEPT_DETAILS_COL_DEPT_NAME +
                                 "," + DeptDetails.DEPT_DETAILS_COL_ENT_ID +
                                    " from " + DeptDetails.DEPT_DETAILS_TABLE +
                                " where " + DeptDetails.DEPT_DETAILS_COL_ENT_ID + "=" + "'" + entId.Trim() + "'" + " and " +
                                DeptDetails.DEPT_DETAILS_COL_DEPT_ID + "=" + "'" + deptId.Trim() + "'";

            DeptDetails deptObj = new DeptDetails();

             Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, "");
            DataTable dt = ds.Tables[0];

            foreach (DataRow dr in dt.Rows)
            {
                
                deptObj.setDeptDescription(dr[0].ToString());
                deptObj.setDeptHeadUsrId(dr[1].ToString());
                deptObj.setDeptId(dr[2].ToString());
                deptObj.setDeptName(dr[3].ToString());
                deptObj.setEntId(dr[4].ToString());
                               
            }

            cn.disconnect();
            return deptObj;
        }
        /// <summary>
        /// For a given business entity id this method returns a dictionary of DeptDetails objects
        /// the key is the dept id
        /// </summary>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static Dictionary<String, DeptDetails> getAllDeptDetailsForEntIdDB(String entId)
        {
            /*this method returns the respective ProductCategory details from the table 
             * 'product_category_hierarchy' for any given category id
             * 
             * @Author: shibasis sengupta
             */

            String cmd = "select " + DeptDetails.DEPT_DETAILS_COL_DEPT_DESC +
                                 "," + DeptDetails.DEPT_DETAILS_COL_DEPT_HEAD_USR_ID +
                                 "," + DeptDetails.DEPT_DETAILS_COL_DEPT_ID +
                                 "," + DeptDetails.DEPT_DETAILS_COL_DEPT_NAME +
                                 "," + DeptDetails.DEPT_DETAILS_COL_ENT_ID +
                                    " from " + DeptDetails.DEPT_DETAILS_TABLE +
                                " where " + DeptDetails.DEPT_DETAILS_COL_ENT_ID + "=" + "'" + entId.Trim() + "'";

            Dictionary<String, DeptDetails> deptDict = new Dictionary<string, DeptDetails>();

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, "");
            DataTable dt = ds.Tables[0];

            foreach (DataRow dr in dt.Rows)
            {
                DeptDetails deptObj = new DeptDetails();
                deptObj.setDeptDescription(dr[0].ToString());
                deptObj.setDeptHeadUsrId(dr[1].ToString());
                deptObj.setDeptId(dr[2].ToString());
                deptObj.setDeptName(dr[3].ToString());
                deptObj.setEntId(dr[4].ToString());

                deptDict.Add(deptObj.getDeptId(), deptObj);
            }

            cn.disconnect();
            return deptDict;
        }
        /// <summary>
        /// For a given entity id and dept id this method  returns a dictionary of userDetails object where the key is the user id
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="deptId"></param>
        /// <returns></returns>
        public static Dictionary<String, userDetails> getAllUsersForDeptIdAndEntIdDB(String entId, String deptId)
        {
            String cmd = "select " + userDetails.USER_DETAILS_COL_BUSINESS_ID +
                     "," + userDetails.USER_DETAILS_COL_CHAIN_ID +
                     "," + userDetails.USER_DETAILS_COL_CONTACT_NO +
                     "," + userDetails.USER_DETAILS_COL_DEPT_ID +
                     "," + userDetails.USER_DETAILS_COL_EMAIL_ID +
                     "," + userDetails.USER_DETAILS_COL_NAME +
                     "," + userDetails.USER_DETAILS_COL_PRIVILEGE +
                     "," + userDetails.USER_DETAILS_COL_REPORTS_TO +
                     "," + userDetails.USER_DETAILS_COL_USERID +
                        " from " + userDetails.USER_DETAILS_TABLE +
                    " where " + userDetails.USER_DETAILS_COL_BUSINESS_ID + "=" + "'" + entId.Trim() + "'" + " and " +
                    userDetails.USER_DETAILS_COL_DEPT_ID + "=" + "'" + deptId.Trim() + "'";

            Dictionary<String, userDetails> usertDict = new Dictionary<string, userDetails>();

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, "");
            DataTable dt = ds.Tables[0];

            foreach (DataRow dr in dt.Rows)
            {
                userDetails userObj = new userDetails();
                userObj.setMainEntityId(dr[0].ToString());
                userObj.setSubEntityId(dr[1].ToString());
                userObj.setContactNo(dr[2].ToString());
                userObj.setDeptId(dr[3].ToString());
                userObj.setEmailId(dr[4].ToString());
                userObj.setName(dr[5].ToString());
                userObj.setPrivilege(dr[6].ToString());
                userObj.setReportsTo(dr[7].ToString());
                userObj.setUserId(dr[8].ToString());

                usertDict.Add(userObj.getUserId(), userObj);
            }

            cn.disconnect();
            return usertDict;

        }
    }
    /// <summary>
    /// representative of the database feature objects 'Feature_Details',Feature_Specification_Map
    /// </summary>
    public class Features
    {
        /*
         * This class is representative of the database feature objects (table <Feature_Details>,<Feature_Specification_Map>)
         * 
         * A feature can have multiple specifications (e.g. resolution is a feature and have specfications of '1024x768'/'860x480' etc.)
         * this class also serves the purpose of the link between features and specifications
         * 
         * @Author: Shibasis Sengupta
        */

        private String featureName = null;
        private String featureId = null;
        //private String productCategoryId = null;
        private String weightage = null;

        //Each member of this 'specifications' arrayList is an object of the 'specification' class
        private ArrayList specifications = new ArrayList();

        //This variable should be used to pass the session user id to the lower level class
        private static String sessionUser = "";

        public const String FEATURE_TABLE = "feature_details";

        public const String FEATURE_COL_FEATURE_ID = "feature_id";
        //public const String FEATURE_COL_PRODUCT_CAT_ID="product_category_id";
        public const String FEATURE_COL_FEATURE_NAME = "feature_name";
        public const String FEATURE_COL_WEIGHT = "weightage";

        //Storing the data types of the respective fields
        public const String FEATURE_COL_FEATURE_ID_TYPE=Connections .STRING_TYPE ;
        //public const String FEATURE_COL_PRODUCT_CAT_ID_TYPE=Connections .STRING_TYPE ;
        public const String FEATURE_COL_FEATURE_NAME_TYPE=Connections .STRING_TYPE ;
        public const String FEATURE_COL_WEIGHT_TYPE = Connections.NUMBER_TYPE;


        public String getFeatureName()
        {
            return featureName ;
        }

        public void setFeatureName(String fName)
        {
            featureName =fName ;
        }

        public String getFeatureId()
        {
            return featureId ;
        }

        public void setFeatureId(String fId)
        {
            featureId =fId ;
        }
                
        public String getWeightage()
        {
            return weightage;
        }

        public void setWeightage(String wght)
        {
            weightage = wght;
        }
        
        public ArrayList  getSpecifications()
        {
            return specifications ;
        }

        public void setSpecifications(ArrayList  spec)
        {
            specifications = spec;
                      
        }
        /// <summary>
        /// Retrieves all the features from DB along with the associated specification objects.
        /// NOTE THAT, this method only retrieved a feature if there is an associated spec object for it in the DB
        /// the key is a feature id, where as the respective value is the respective feature object
        /// each of  the feature object (in the value of the dictionary)  has an arraylist of specification objects attached
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, Features> getAllFeaturesAssociatedWithSpecDB()
        {
            //Retrieves all the features from DB along with the associated specification objects

            /*the <key> is a feature id, where as the respective <value> is the respective feature object.
             * each of  the feature object (in the <value> of the dictionary)  has an arraylist of specification objects attached
             * 
             * @Author: shibasis sengupta
            */
            Dictionary<String, Features> featureDict = new Dictionary<String, Features>();
            Connections cn = new Connections();
            String query = "select f." + FEATURE_COL_FEATURE_ID +
                //",f." + FEATURE_COL_PRODUCT_CAT_ID +
                " ,f." + FEATURE_COL_FEATURE_NAME +
                " ,f." + FEATURE_COL_WEIGHT +
                ",fs." + Specifications .FEATURE_SPEC_COL_SPEC_ID +
                ",fs." + Specifications .FEATURE_SPEC_COL_SPEC_NAME +
                ",fs." + Specifications .FEATURE_SPEC_COL_DIM1 +
                ",fs." + Specifications .FEATURE_SPEC_COL_DIM2 +
                ",fs." + Specifications .FEATURE_SPEC_COL_DIM3 +
                " from " + FEATURE_TABLE + " f," + Specifications .FEATURE_SPEC_MAP_TABLE +" fs "+
                "where f." + FEATURE_COL_FEATURE_ID + "= fs." + Specifications .FEATURE_SPEC_COL_FEATURE_ID +
                " order by " + "f." + FEATURE_COL_FEATURE_ID;
                
            DataSet ds=cn.execQuery(query, sessionUser);

            /*Here tried to add reference to the variable RETURN_DATASET_NAME
             * it's not being allowed - not sure about the reason - shibasis
             * */
            DataTable dt = ds.Tables[0];
           

            /*
             *the returned dataset will contain multiple specification rows for the same feature id 
             *all those should be clubbed in the 'specifications' dictionary property of the feature object 
             *and returned
             *the <key> of the respective 'specification property will be the spec id itself.
             */
            int counter = 0;
            String previousValue="";
            ArrayList alPrevious = new ArrayList();
            

            foreach (DataRow dr in dt.Rows )
                {
                            Features ft = new Features();
                            Specifications spec = new Specifications();

                              counter++;
                              if (counter > 0 && !previousValue.Equals(dr[0].ToString()))
                              {
                                  //Each member of the arrayList 'alPrevious' is an object of the specification class
                                  ft.setSpecifications(alPrevious);
                                  featureDict.Add(previousValue, ft);
                                  alPrevious.Clear();
                              }
                              else
                              {
                                  previousValue = dr[0].ToString();

                                  ft.setFeatureId(dr[0].ToString());
                                  //ft.setproductCategoryId(dr[1].ToString());
                                  ft.setFeatureName(dr[1].ToString());
                                  ft.setWeightage(dr[2].ToString());

                                  /*
                                   * create one specification object for each returned row
                                   * add each of that object to an arrayList
                                   *                                  
                                  */
                                  spec.setSpecId(dr[3].ToString());
                                  spec.setSpecName(dr[4].ToString());
                                  
                                  ArrayList alTemp = new ArrayList();
                                  alTemp.Add(dr[5].ToString());
                                  alTemp.Add(dr[6].ToString());
                                  alTemp.Add(dr[7].ToString());
                                  
                                  spec.setDimensions(alTemp);
                                  
                                  alPrevious.Add(spec);

                                  /*
                                   * So, 'alPrevious' is an arrayList of arrayList - each of it's member
                                   * arraylist stores specification details
                                   * 
                                   * */
                                  alPrevious.Add(alTemp);
                              }

                }
            cn.disconnect();
            return featureDict;
        }
        /// <summary>
        /// returns all Feature object from the database - even if the feature is not having an associated specification defined
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, Features> getAllFeatureswoSpecDB()
        {
            Dictionary<String, Features> featDict = new Dictionary<String, Features>();
            Connections cn = new Connections();
            String query = "select " +
                 Features.FEATURE_COL_FEATURE_ID +
                "," + Features.FEATURE_COL_FEATURE_NAME +
                "," + Features.FEATURE_COL_WEIGHT +
                " from " + Features.FEATURE_TABLE;
              //  "where " + Specifications.FEATURE_SPEC_COL_FEATURE_ID + "=" + "'" + ftId.Trim() + "'" +
                //" order by " + Specifications.FEATURE_SPEC_COL_SPEC_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            foreach (DataRow dr in dt.Rows)
            {
               Features ft=new Features();
                ft.setFeatureId(dr[0].ToString());
                ft.setFeatureName(dr[1].ToString());
                ft.setWeightage(dr[2].ToString());
                featDict.Add(dr[0].ToString(), ft);
            }
            cn.disconnect();
            return featDict;
        }
        /// <summary>
        /// The key of the returned dictionary is the specification id
        /// the respective value for the key is a specification object
        /// there can be multiple such key,value pair of specifications returned for the mentioned feature id
        /// </summary>
        /// <param name="ftId"></param>
        /// <returns></returns>
        public static Dictionary<String, Specifications> getSpecforFeatureDB(String ftId)
        {
            /*The <key> of the returned dictionary is the specification id
             * the respective <value> for the <key> is a specification object
             * there can be multiple such <key,value> pair of specifications returned for the mentioned feature id
             * 
             * @Author: shibasis sengupta
            */
            Dictionary<String, Specifications> specDict = new Dictionary<String, Specifications>();
            Connections cn = new Connections();
            String query = "select " +
                 Specifications .FEATURE_SPEC_COL_SPEC_ID +
                "," + Specifications .FEATURE_SPEC_COL_SPEC_NAME +
                "," + Specifications .FEATURE_SPEC_COL_DIM1 +
                "," + Specifications .FEATURE_SPEC_COL_DIM2 +
                "," + Specifications .FEATURE_SPEC_COL_DIM3 +
                " from "+ Specifications .FEATURE_SPEC_MAP_TABLE +
                " where " + Specifications .FEATURE_SPEC_COL_FEATURE_ID +"="+"'"+ftId.Trim() +"'"+
                " order by " + Specifications .FEATURE_SPEC_COL_SPEC_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            

            foreach (DataRow dr in dt.Rows )
                
                {
                    Specifications spec = new Specifications();
                    
                    spec.setSpecId(dr[0].ToString());
                    spec.setSpecName(dr[1].ToString());

                    ArrayList specDim = new ArrayList();
                    specDim.Add(dr[2].ToString());
                    specDim.Add(dr[3].ToString());
                    specDim.Add(dr[4].ToString());

                    spec.setDimensions(specDim);
                    //Add to the dictionary
                    specDict.Add(dr[0].ToString(), spec);
                }
            cn.disconnect();
            return specDict;
        }
        /// <summary>
        /// for a given featureId, insert all the specification details into database table 'feature_specification_map' ONLY
        /// the second parameter is ArrayList of specification objects which needs to be inserted into database
        /// </summary>
        /// <param name="ftId"></param>
        /// <param name="specs"></param>
        /// <returns></returns>
        public static int insertSpecforFeatureDB(String ftId, ArrayList specs)
        {
            /*for a given featureId, insert all the specification details into database table 'feature_specification_map' ONLY
             * the second parameter is ArrayList of specification objects which needs to be inserted into database
             * 
             * @Author: shibasis sengupta
            */
            int rowsAffected = 0;
            String insertCmdMain = "insert into " + Specifications .FEATURE_SPEC_MAP_TABLE 
                +" ("
                +Specifications.FEATURE_SPEC_COL_FEATURE_ID +","
                +Specifications .FEATURE_SPEC_COL_SPEC_ID +","
                +Specifications .FEATURE_SPEC_COL_SPEC_NAME +","
                +Specifications.FEATURE_SPEC_COL_DIM1 +","
                +Specifications .FEATURE_SPEC_COL_DIM2 +","
                +Specifications .FEATURE_SPEC_COL_DIM3 +")"
                +"values (" + "'"+ftId.Trim() + "'"+",";
            Connections cn=new Connections();

           for (int i=0;i<specs.Count ;i++)
           {
               Specifications specObj=(Specifications )specs[i];

              String  insertCmd = insertCmdMain + "'" + specObj.getSpecId() + "'," + "'" +
               specObj.getSpecName()+"',";

                    for (int j=0;j<specObj.getDimensions ().Count ;j++)
                    {
                        insertCmd += (specObj.getDimensions()[j].ToString().Equals("") ? 0 : float.Parse(specObj.getDimensions()[j].ToString()));
                        insertCmd = ((j + 1) == specObj.getDimensions().Count ? insertCmd : insertCmd + ",");
                    }
               insertCmd+=")";

               //execute the insert for each of the specificaton object
               rowsAffected+=cn.execInsertUpdate(insertCmd,sessionUser);
           }

           return rowsAffected;
        }
        /// <summary>
        /// For a given feature id, delete/update respective entries from the table 'feature_specification_map' ONLY
        /// the first paramter is a dictionary of column name,target value
        /// the second parameter is a dictionary of column name, condition
        /// the third parameter is the operation update/delete
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateSpecforFeatureDB(Dictionary <String,String> targetValue,Dictionary <String,String> whereClause,String op)
        {
            /*
             * For a given feature id, delete/update respective entries from the table 'feature_specification_map' ONLY
             * 
             * the first paramter is a dictionary of <column name,target value>
             * in case of DELETE operation, this  'target Value' Dictionary will not be checked - all the  column names will be
             * considered for deletion (as required by sql)
             * 
             * the second parameter is a dictionary of <column name, condition>
             * 
             * the third parameter is the operation (update/delete)
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Features.FEATURE_COL_FEATURE_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Features.updateSpecforFeatureDB"));

            int rowsAffected=0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");
           
            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Features.updateSpecforFeatureDB is "+op));
            if (operation.Equals (Connections .OPERATION_UPDATE) && targetValue.Count==0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Features.updateSpecforFeatureDB is " + op));
            
            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Specifications.FEATURE_SPEC_MAP_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Specifications.FEATURE_SPEC_MAP_TABLE)+" ";

            string quote = "";
            
            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(Specifications.FEATURE_SPEC_COL_DIM1, Specifications.FEATURE_SPEC_COL_DIM1_TYPE);
            chkDataType.Add(Specifications.FEATURE_SPEC_COL_DIM2, Specifications.FEATURE_SPEC_COL_DIM2_TYPE);
            chkDataType.Add(Specifications.FEATURE_SPEC_COL_DIM3, Specifications.FEATURE_SPEC_COL_DIM3_TYPE);
            chkDataType.Add(Specifications.FEATURE_SPEC_COL_FEATURE_ID, Specifications.FEATURE_SPEC_COL_FEATURE_ID_TYPE);
            chkDataType.Add(Specifications.FEATURE_SPEC_COL_SPEC_ID, Specifications.FEATURE_SPEC_COL_SPEC_ID_TYPE);
            chkDataType.Add(Specifications.FEATURE_SPEC_COL_SPEC_NAME, Specifications.FEATURE_SPEC_COL_SPEC_NAME_TYPE);

            String outValue="";

            if(operation.Equals (Connections .OPERATION_UPDATE) )
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Features.updateSpecforFeatureDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote+(counter < targetValue.Count ? "," : "");counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                 int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Features.updateSpecforFeatureDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote+(counter < whereClause.Count ? " and " : "");counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected =cn.execInsertUpdate(cmd,sessionUser );
            cn.disconnect();

            return rowsAffected ;
        }
        /// <summary>
        /// for a given feature id return the respective Feature object along with the associated specification objects from database
        /// do not use this method if there is no need to retrieve related specification objects as well 
        /// in that case use the lighter version of this method 'getFeaturebyIdwoSpecDB'
        /// </summary>
        /// <param name="fId"></param>
        /// <returns></returns>
        public static Features getFeaturebyIdDB(String fId)
        {
            /* for a given feature id return the respective specification object from database
             * do not use this method if there is no need to retrieve related specification objects as well 
             * in that case use the lighter version of this method 'getFeaturebyIdwoSpecDB'
             * 
             * @Author: shibasis sengupta
            */

            if (fId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Feature Id sent to Features.getFeaturebyIdDB"));

            Connections cn = new Connections();
            String query = "select " + Features.FEATURE_COL_FEATURE_ID +
                "," + Features.FEATURE_COL_FEATURE_NAME +
                //"," + Features.FEATURE_COL_PRODUCT_CAT_ID +
                "," + Features.FEATURE_COL_WEIGHT +
                " from " + Features.FEATURE_TABLE +
                " where " + Features.FEATURE_COL_FEATURE_ID + "='" + fId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Features tempFeat = new Features();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempFeat.setFeatureId(dr[0].ToString());
                    tempFeat.setFeatureName(dr[1].ToString());
                    //tempFeat.setproductCategoryId(dr[2].ToString());
                    tempFeat.setWeightage(dr[2].ToString());

                    Dictionary<String, Specifications> tempSpec = Features.getSpecforFeatureDB(tempFeat.getFeatureId());
                    ArrayList temp = new ArrayList();

                    foreach (KeyValuePair<String, Specifications> kvp in tempSpec)
                        temp.Add(kvp.Value);

                    tempFeat.setSpecifications(temp);

                }
            cn.disconnect();
            return tempFeat;
         
        }
        /// <summary>
        /// lighter version of the method 'getFeaturebyIdDB' 
        /// returns the feature object from the database for a given feature id without the associated specification objects
        /// </summary>
        /// <param name="fId"></param>
        /// <returns></returns>
        public static Features getFeaturebyIdwoSpecDB(String fId)
        {
            /* lighter version of the method 'getFeaturebyIdDB' 
             * returns the feature object from the database for a given feature id without the associated
             * specification objects
             * 
             * @Author: shibasis sengupta
            */

            if (fId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty feature Id sent to Features.getFeaturebyIdwoSpecDB"));

            Connections cn = new Connections();
            String query = "select " + Features.FEATURE_COL_FEATURE_ID +
                "," + Features.FEATURE_COL_FEATURE_NAME +
                //"," + Features.FEATURE_COL_PRODUCT_CAT_ID +
                "," + Features.FEATURE_COL_WEIGHT +
                " from " + Features.FEATURE_TABLE +
                " where " + Features.FEATURE_COL_FEATURE_ID + "='" + fId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Features tempFeat = new Features();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempFeat.setFeatureId(dr[0].ToString());
                    tempFeat.setFeatureName(dr[1].ToString());
                    //tempFeat.setproductCategoryId(dr[2].ToString());
                    tempFeat.setWeightage(dr[2].ToString());

                    tempFeat.setSpecifications(new ArrayList());

                }
            cn.disconnect();
            return tempFeat;
       
        }
        /// <summary>
        /// inserts the passed feature object into database.
        /// </summary>
        /// <param name="ft"></param>
        /// <returns></returns>
        public static int insertFeatureDB(Features ft)
        {
            if (ft.getFeatureId() == null || ft.getFeatureId().Equals(""))
                throw new CustomExceptions.invalidParamException("invalid feature id sent to method Feature.insertFeatureDB");

            int rowsAffected = 0;
            String insertCmd = "insert into " + Features.FEATURE_TABLE
                + " ("
                + Features.FEATURE_COL_FEATURE_ID + ","
                + Features.FEATURE_COL_FEATURE_NAME + ","
                + Features.FEATURE_COL_WEIGHT + ")"
                + "values (" + "'" + ft.getFeatureId() + "'" + ",";
            Connections cn = new Connections();

                insertCmd = insertCmd + "'" + ft.getFeatureName() + "'," + "'" +
                ft.getWeightage() + "'";

                insertCmd += ")";

                //execute the insert for each of the specificaton object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            

            return rowsAffected;
       
        }
    
    }
    /// <summary>
    /// Representative of the database table ProductCategoryHierarchy
    /// </summary>
       public class ProductCategory
    {
        /*this class is representative of the database table <ProductCategoryHierarchy>
         * 
         * @Author: shibasis sengupta
        */
           
        public const String PROD_CAT_TABLE = "Product_Category_Hierarchy";

        public const String PROD_CAT_COL_CATEGORY_NAME = "product_category_name";
        public const String PROD_CAT_COL_CAT_ID = "category_id";
        public const String PROD_CAT_COL_PARENT_CAT_ID = "parent_category_id";
        public const String PROD_CAT_COL_VIS = "visible";

        public const String PROD_CAT_COL_CATEGORY_NAME_TYPE = Connections.STRING_TYPE;
        public const String PROD_CAT_COL_CAT_ID_TYPE = Connections.STRING_TYPE;
        public const String PROD_CAT_COL_PARENT_CAT_ID_TYPE = Connections.STRING_TYPE;
        public const String PROD_CAT_COL_VIS_TYPE = Connections.STRING_TYPE;
        

        private static String sessionUser = "";

        private String productCategoryName = "";
        private String categoryId = "";
        private String parentCategoryId = "";
        private String visible = "";
        //ArrayList of 'CategoryFeatureMap' objects
        private ArrayList featureList = new ArrayList();
           //ArrayList of 'Feature' objects
        private ArrayList feature = new ArrayList();  //Not initializing it to null - in that case if a code invokes it before using the 'setter method - will encounter null pointer exception

        public String getProductCategoryName()
        {
            return productCategoryName;
        }

        public void setProductCategoryName(String prdt)
        {
            productCategoryName = prdt;
        }

        public String getCategoryId()
        {
            return categoryId;
        }

        public void setCategoryId(String cat)
        {
            categoryId = cat;
        }

        public String getParentCategoryId()
        {
            return parentCategoryId;
        }

        public void setParentCategoryId(String cId)
        {
            parentCategoryId = cId;
        }

        public String getVisible()
        {
            return visible;
        }

        public void setVisible(String vs)
        {
            visible = vs;
        }
        /// <summary>
        /// Returns an arraylist of 'Feature' objects
        /// </summary>
        /// <returns></returns>
        public ArrayList  getFeature()
        {
            return feature;
        }

        public void setFeature(ArrayList ft)
        {
            feature = ft;
        }
        /// <summary>
        /// Returns an arraylist of 'CategoryFeatureMap' objects
           /// </summary>
           /// <returns></returns>
        public ArrayList getFeatureList()
        {
            return this.featureList;
        }

        public void setFeatureList(ArrayList ftList)
        {
            this.featureList = ftList;
        }

           /// <summary>
           /// This method returns all product/service category details for which there is no parent category;
           /// i.e, it returns a list of all top level product/service category.This method is particularly useful for scenarios where it is required to
           /// list the main catogories online.
           /// </summary>
           /// <returns></returns>
        public static Dictionary<String, ProductCategory> getAllParentCategory()
        {
            String cmd = " select " + ProductCategory.PROD_CAT_COL_CAT_ID +
                "," + ProductCategory.PROD_CAT_COL_CATEGORY_NAME +
                "," + ProductCategory.PROD_CAT_COL_VIS +
                " from " + ProductCategory.PROD_CAT_TABLE +
                " where " + ProductCategory.PROD_CAT_COL_PARENT_CAT_ID + "=" + "'" + "'"+
                " or " + ProductCategory.PROD_CAT_COL_PARENT_CAT_ID +" IS NULL";


            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, ProductCategory> dPrdct = new Dictionary<string, ProductCategory>();


            foreach (DataRow dr in dt.Rows)
            {
                ProductCategory pc = new ProductCategory();
                pc.setCategoryId(dr[0].ToString());
                pc.setParentCategoryId("");
                pc.setProductCategoryName(dr[1].ToString());
                pc.setVisible(dr[2].ToString());

                //Dictionary<String, Features> tempDict = ProductCategory.getFeatureforCategoryDB(pc.getCategoryId());
                //ArrayList temp = new ArrayList();

                //foreach (KeyValuePair<String, Features> kvp in tempDict)
                    //temp.Add(kvp.Value);

                //pc.setFeature(temp);
                dPrdct.Add(pc.getCategoryId(), pc);

            }
            cn.disconnect();
            return dPrdct;
     
        }
                  

        /// <summary>
        /// this method returns the respective ProductCategory details from the table 'product_category_hierarchy' for any given category id
        /// </summary>
        /// <param name="catId"></param>
        /// <returns></returns>
        public static ProductCategory getProductCategoryDB(String catId)
        {
            /*this method returns the respective ProductCategory details from the table 
             * 'product_category_hierarchy' for any given category id
             * 
             * @Author: shibasis sengupta
             */
            
            String cmd = "select " + PROD_CAT_COL_CATEGORY_NAME +
                                 "," + PROD_CAT_COL_PARENT_CAT_ID +
                                 "," + PROD_CAT_COL_VIS +
                                    " from " + PROD_CAT_TABLE +
                                " where " + PROD_CAT_COL_CAT_ID + "=" + "'"+catId.Trim ()+"'";

            ProductCategory pc=new ProductCategory ();

            Connections cn = new Connections();
            DataSet ds=cn.execQuery(cmd, sessionUser);
            DataTable dt=ds.Tables [0];

            foreach (DataRow dr in dt.Rows )
                {
                    pc.setCategoryId (catId.Trim());
                    pc.setProductCategoryName (dr[0].ToString ());
                    pc.setParentCategoryId(dr[1].ToString ());
                    pc.setVisible(dr [2].ToString ());
                }

            cn.disconnect();
            return pc;
        }
        /// <summary>
        /// this method returns the all associated feature details along with its associated specifications
        /// for a given  'Product Category id' 
        /// </summary>
        /// <param name="catId"></param>
        /// <param name="ftId"></param>
        /// <returns></returns>
        /*public static Dictionary<String,Features> getFeaturesbyidforCategoryDB(String catId)
        {
            if (catId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Category id passed to ProductCategory.getFeaturesbyidforCategoryDB"));

            String cmd = "select " + Features.FEATURE_COL_FEATURE_NAME +
               "," + Features.FEATURE_COL_WEIGHT +
               " from " + Features.FEATURE_TABLE +
               " where " + Features.FEATURE_COL_PRODUCT_CAT_ID + "=" + "'"+catId.Trim ()+"'" + 
               " and " + Features.FEATURE_COL_FEATURE_ID + "=" + "'"+ftId.Trim ()+"'";

            Connections cn = new Connections();
            DataSet ds=cn.execQuery(cmd,sessionUser);
            DataTable dt = ds.Tables[0];

            Features ft = new Features();

            foreach (DataRow dr in dt.Rows)
                
                {
                    ft.setFeatureId(ftId);
                    ft.setFeatureName(dr[0].ToString());
                    ft.setWeightage(dr[1].ToString());
                    ft.setproductCategoryId(catId);

                   Dictionary <String,Specifications > dSpec= Features.getSpecforFeatureDB(ftId);
                    ArrayList temp=new ArrayList ();

                    foreach (KeyValuePair<String, Specifications> kvp in dSpec)
                        temp.Add(kvp.Value);

                    ft.setSpecifications(temp);
                }

            cn.disconnect();
            return ft;

        }*/
        /// <summary>
        /// for any particular parent product category, this method will return all respective childern categories
        /// the return dictionary will be child category id,the child category object
        /// </summary>
        /// <param name="catId"></param>
        /// <returns></returns>
        public static Dictionary<String, ProductCategory> getAllChildCategoryDB(String catId)
        {
            /*for any particular parent product category, this method will return all respective childern categories
             * the return dictionary will be <child category id,the child category object>
             * 
             * @Author: shibasis sengupta
             */
            
            if (catId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty category id passed to ProductCategory.getAllChildCategory"));

            String cmd = " select " + ProductCategory.PROD_CAT_COL_CAT_ID +
                "," + ProductCategory.PROD_CAT_COL_CATEGORY_NAME +
                "," + ProductCategory.PROD_CAT_COL_VIS +
                " from " + ProductCategory.PROD_CAT_TABLE +
                " where " + ProductCategory.PROD_CAT_COL_PARENT_CAT_ID + "=" + "'"+catId.Trim ()+"'";


            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd,sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, ProductCategory> dPrdct = new Dictionary<string, ProductCategory>();
            

            foreach (DataRow dr in dt.Rows)
                
                {
                    ProductCategory pc = new ProductCategory();
                    pc.setCategoryId(dr[0].ToString());
                    pc.setParentCategoryId(catId);
                    pc.setProductCategoryName(dr[1].ToString());
                    pc.setVisible(dr[2].ToString());

                    Dictionary<String, Features> tempDict = ProductCategory.getFeatureforCategoryDB(pc.getCategoryId()); 
                    ArrayList temp = new ArrayList();

                    foreach (KeyValuePair<String, Features> kvp in tempDict)
                        temp.Add(kvp.Value);

                    pc.setFeature(temp);
                    dPrdct.Add(pc.getCategoryId(), pc);

                }
            cn.disconnect();
            return dPrdct;
        }
        /// <summary>
        /// for any given child category id, this method returns the respective parent category object from the database
        /// </summary>
        /// <param name="catId"></param>
        /// <returns></returns>
        public static Dictionary<String, ProductCategory> getParentCategoryDB(String catId)
        {
            /*for any given child category id, this method returns the respective parent category object
             * from the database
             * 
             * @Author: shibasis sengupta
             */
            
            if (catId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty category id passed in ProductCategory.getParentCategoryDB"));

            String cmd = " select m." + ProductCategory.PROD_CAT_COL_CAT_ID +
                ",m." + ProductCategory.PROD_CAT_COL_CATEGORY_NAME +
                ",m." + ProductCategory.PROD_CAT_COL_VIS +
                 ",m." + ProductCategory.PROD_CAT_COL_PARENT_CAT_ID +
                " from " + ProductCategory.PROD_CAT_TABLE + " m," + ProductCategory.PROD_CAT_TABLE + " n" +
                " where " + "m." + ProductCategory.PROD_CAT_COL_CAT_ID + "=" + "n." + ProductCategory.PROD_CAT_COL_PARENT_CAT_ID +
                " and " + "n." + ProductCategory.PROD_CAT_COL_CAT_ID + "=" + "'"+catId.Trim ()+"'";

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd,sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, ProductCategory> parentCategory = new Dictionary<string, ProductCategory>();
            
            
            foreach (DataRow dr in dt.Rows )
                
                {
                    ProductCategory pc = new ProductCategory();
                    pc.setCategoryId(dr[0].ToString());
                    pc.setProductCategoryName(dr[1].ToString());
                    pc.setVisible(dr[2].ToString());
                    pc.setParentCategoryId(dr[3].ToString());

                    Dictionary <String,Features > tempFeat=ProductCategory.getFeatureforCategoryDB(pc.getCategoryId());
                    ArrayList temp = new ArrayList();

                    foreach (KeyValuePair<String, Features> kvp in tempFeat)
                    {
                        temp.Add(kvp.Value);
                    }

                    pc.setFeature(temp);
                    parentCategory.Add(pc.getCategoryId(), pc);

                }

            cn.disconnect();
            return parentCategory;
        }
           /// <summary>
           /// For a given product category id, this method determines the root level parent category object.
           /// </summary>
           /// <param name="catId"></param>
           /// <returns></returns>
        public static Dictionary<String, ProductCategory> getRootLevelParentCategoryDB(String catId)
        {
            Dictionary<String, ProductCategory> parentCat = new Dictionary<string, ProductCategory>();

            while ((parentCat=getParentCategoryDB(catId)).Keys.Count != 0)
            {
                foreach (KeyValuePair<String, ProductCategory> kvp in parentCat)
                    catId = kvp.Key;
            }
            parentCat.Add(catId,getProductCategoryDB(catId));

            return parentCat;
        }
        /// <summary>
        /// This method inserts a list of 'CategoryFeatureMap' objects into database.
         /// </summary>
        /// <param name="feat"></param>
        /// <param name="catId"></param>
        public static void insertFeaturesforCategory(ArrayList feat)
        {
            if (feat.Count==0)
                throw (new CustomExceptions.invalidParamException (" Empty feature list sent to method: ProductCategory.insertFeaturesforCategory"));

            CategoryFeatureMap ft = new CategoryFeatureMap();
            int counter = 0;
            String cmd = "";
            Connections cn = new Connections();

            while (counter < feat.Count)
            {
                cmd=" insert into " + CategoryFeatureMap.FEATURE_TABLE +" ("+
                    CategoryFeatureMap.FEATURE_COL_FEATURE_ID+","+
                    CategoryFeatureMap.FEATURE_COL_PRODUCT_CAT_ID +")"+                   
                    " values (";
                ft = (CategoryFeatureMap)feat[counter];

                cmd += "'" + ft.getFeatId() + "'," +
                    "'" + ft.getProdCatId() +"'"+ ")";

                int rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
                //Features.insertSpecforFeatureDB(ft.getFeatureId(), ft.getSpecifications());
                counter++;
            }

            cn.disconnect();
        }
        /// <summary>
        /// thie method will insert all the product category objects passed to it into database table 'Product_Category_Hierarchy' table ONLY
        /// </summary>
        /// <param name="prodCat"></param>
        public static void insertProductCategoryDB(ArrayList prodCat)
        {
            /*thie method will insert all the product category objects passed to it into database table 'Product_Category_Hierarchy' table ONLY
             * @ Author: shibasis sengupta
            */
            
            if (prodCat.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty category list sent to ProductCategory.insertProductCategoryDB method"));

            String cmdInsert="insert into "+ProductCategory .PROD_CAT_TABLE +" ("+
                ProductCategory .PROD_CAT_COL_CAT_ID +","+
                ProductCategory .PROD_CAT_COL_CATEGORY_NAME +","+
                ProductCategory .PROD_CAT_COL_PARENT_CAT_ID +","+
                ProductCategory .PROD_CAT_COL_VIS +")"+
                " values (";

            int count=0;
            String cmd = "";
            ProductCategory pc=null;
            Connections cn = new Connections();

            while (count < prodCat.Count)   
            {
                pc=(ProductCategory) prodCat[count];
                
                cmd += cmdInsert + "'" +
                    pc.getCategoryId() + "'," +"'" + 
                    pc.getProductCategoryName() + "'," + "'" +
                    pc.getParentCategoryId ()+ "'," + "'" +
                    pc.getVisible() + "')";
                
                cn.execInsertUpdate(cmd, sessionUser);
                if(pc.getFeatureList()!=null && pc.getFeatureList().Count!=0)
                ProductCategory.insertFeaturesforCategory(pc.getFeatureList());
                count++;
            }

            cn.disconnect();
        }
        /// <summary>
        /// this method updates/deletes values from Product_Category_Hierarchy table  - IN CASE OF DELETE, there will be cascading to child table based on the conditions mentioned on the second parameter
        /// the target values are specified in the first parameter
        /// the third parameter mentions whether it's an update/delete
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateProductCategoryDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* this method updates/deletes values from Product_Category_Hierarchy table  - IN CASE OF DELETE, there will be cascading to child table
             * based on the conditions mentioned on the second parameter
             * 
             * the target values are specified in the first parameter
             * 
             * the third parameter mentions whether it's an update/delete
             * 
             * @Author: shibasis sengupta
            */

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to ProductCategory.updateProductCategoryDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to ProductCategory.updateProductCategoryDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + ProductCategory .PROD_CAT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + ProductCategory.PROD_CAT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(ProductCategory .PROD_CAT_COL_VIS,ProductCategory .PROD_CAT_COL_VIS_TYPE);
            chkDataType.Add(ProductCategory.PROD_CAT_COL_PARENT_CAT_ID, ProductCategory .PROD_CAT_COL_PARENT_CAT_ID_TYPE);
            chkDataType.Add(ProductCategory.PROD_CAT_COL_CATEGORY_NAME, ProductCategory .PROD_CAT_COL_CATEGORY_NAME_TYPE);
            chkDataType.Add(ProductCategory .PROD_CAT_COL_CAT_ID, ProductCategory .PROD_CAT_COL_CAT_ID_TYPE);
 

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to ProductCategory.updateProductCategoryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : "");counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to ProductCategory.updateProductCategoryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : "");counter++;
                }
            }

            //Delete respective entries from feature_details table as well.
            if (operation.Equals(Connections.OPERATION_DELETE))
                cmd += " ";


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;


        }
        /// <summary>
        /// In case the matching Feature object is not found a null will be returned
        /// </summary>
        /// <param name="featId"></param>
        /// <returns></returns>
        public Features getFeaturebyIdforCategory(String featId)
        {
            /* In case the matching Feature object is not found a null will be returned
             * 
             * @Autho: shibasis sengupta
            */
            int Counter = 0;
            ArrayList temp= this.getFeature();
            Features ft = null; 

            while (Counter < temp.Count)
            {
                ft = (Features) temp[Counter];

                if (ft.getFeatureId().Equals(featId))
                    break;
                else
                    ft = null;
            }

            return ft;
        }
        /// <summary>
        /// For a given category id, delete/update respective entries from the table 'Category_Feature_Map' table ONLY
        /// the first paramter is a dictionary of column name,target value
        /// the second parameter is a dictionary of column name, condition
        /// the third parameter is the operation (update/delete)
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateFeaturesforProductCategoryDB(Dictionary<string, string> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /*
            * For a given category id, delete/update respective entries from the table 'Category_Feature_Map' table ONLY
            * 
            * the first paramter is a dictionary of <column name,target value>
            * in case of DELETE operation, this  'target Value' Dictionary will not be checked - all the  column names will be
            * considered for deletion (as required by sql)
            * 
            * the second parameter is a dictionary of <column name, condition>
            * 
            * the third parameter is the operation (update/delete)
            * 
            * @Author: shibasis sengupta
           */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(CategoryFeatureMap.FEATURE_COL_PRODUCT_CAT_ID , out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - ProductCategory.updateFeaturesforProductCategoryDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to ProductCategory.updateFeaturesforProductCategoryDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to ProductCategory.updateFeaturesforProductCategoryDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + CategoryFeatureMap.FEATURE_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + CategoryFeatureMap.FEATURE_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(CategoryFeatureMap.FEATURE_COL_FEATURE_ID, CategoryFeatureMap.FEATURE_COL_FEATURE_ID_TYPE);
            chkDataType.Add(CategoryFeatureMap.FEATURE_COL_PRODUCT_CAT_ID, CategoryFeatureMap.FEATURE_COL_PRODUCT_CAT_ID_TYPE);
            //chkDataType.Add(Features.FEATURE_COL_FEATURE_NAME, Features.FEATURE_COL_FEATURE_NAME_TYPE);
            //chkDataType.Add(Features.FEATURE_COL_FEATURE_ID, Features.FEATURE_COL_FEATURE_ID_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to ProductCategory.updateFeaturesforProductCategoryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : "");counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to ProductCategory.updateFeaturesforProductCategoryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : "");counter++;
                }
            }
            

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }
        /// <summary>
        /// The key of the returned dictionary is the feature id
        /// the respective value for the key is a feature object
        /// there can be multiple such key,value pair of feature returned for the mentioned feature id.
        /// Along with the feature object the associated specification objects are also retrieved by this method.
        /// If you need only the feature ids associated with a product category use the method getFeatureIdListforCategoryDB()
        /// </summary>
        /// <param name="catId"></param>
        /// <returns></returns>
        public static Dictionary<String, Features> getFeatureforCategoryDB(string catId)
        {
            /*The <key> of the returned dictionary is the feature id
            * the respective <value> for the <key> is a feature object
            * there can be multiple such <key,value> pair of feature returned for the mentioned feature id
            * 
            * @Author: shibasis sengupta
           */
            Dictionary<String, Features > featDict = new Dictionary<String, Features >();
            Connections cn = new Connections();
            String query = "select " + "f." +
                 Features.FEATURE_COL_FEATURE_ID +
                "," + "f." + Features.FEATURE_COL_FEATURE_NAME +
                "," + "f." + Features.FEATURE_COL_WEIGHT +
                "," + "c." + CategoryFeatureMap.FEATURE_COL_PRODUCT_CAT_ID +
                " from " + Features.FEATURE_TABLE + " f " + "," + CategoryFeatureMap.FEATURE_TABLE + " c " +
                " where " + "c." + CategoryFeatureMap.FEATURE_COL_PRODUCT_CAT_ID + "=" + "'" + catId.Trim() + "'"
                + " and "
                + "f." + Features.FEATURE_COL_FEATURE_ID + "=" + "c." + CategoryFeatureMap.FEATURE_COL_FEATURE_ID;
            
               // " order by " + Features.FEATURE_COL_FEATURE_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            

            foreach (DataRow dr in dt.Rows)
                
                {
                    Features feat = new Features();
                    feat.setFeatureId(dr[0].ToString());
                    feat.setFeatureName(dr[1].ToString());
                    feat.setWeightage(dr[2].ToString());
                    //feat.setproductCategoryId(catId.Trim());
                    
                    Dictionary <String,Specifications > specTemp=Features.getSpecforFeatureDB(feat.getFeatureId());
                    ArrayList temp = new ArrayList();

                    foreach (KeyValuePair<String, Specifications> kvp in specTemp)
                        temp.Add(kvp.Value);

                    feat.setSpecifications(temp);    
                    //Add to the dictionary
                    featDict.Add(dr[0].ToString(), feat);
                }
            cn.disconnect();
            return featDict;


        }
           /// <summary>
        /// for a given category id this method returns all associated feature ids from DB table 'CategoryFeatureMap'
           /// </summary>
           /// <param name="catId"></param>
           /// <returns></returns>
        public static ArrayList getFeatureIdListforCategoryDB(String catId)
        {
            if (catId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Category Id sent to ProductCategory.getFeatureIdListforCategoryDB"));


            Connections cn = new Connections();
            String query = "select " + "f." +
                 CategoryFeatureMap.FEATURE_COL_FEATURE_ID +
                "," + "f." + CategoryFeatureMap.FEATURE_COL_PRODUCT_CAT_ID +
                " from " + CategoryFeatureMap.FEATURE_TABLE + " f " +
                " where " + "f." + CategoryFeatureMap.FEATURE_COL_PRODUCT_CAT_ID + "=" + "'" + catId.Trim() + "'";
                

            // " order by " + Features.FEATURE_COL_FEATURE_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList retList=new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                CategoryFeatureMap ftMap = new CategoryFeatureMap();
                ftMap.setFeatId(dr[0].ToString());
                ftMap.setProdCatId(dr[1].ToString());
                //feat.setproductCategoryId(catId.Trim());
                retList.Add(ftMap);
          
            }
            cn.disconnect();
            return retList;


        }

        /// <summary>
        /// for a given product category id return the respective category object from database
        /// do not use this method if there is no need to retrieve related feature objects as well 
        /// in that case use the lighter version of this method 'getProductCategorybyIdwoFeaturesDB'
        /// </summary>
        /// <param name="pcId"></param>
        /// <returns></returns>
        public static ProductCategory getProductCategorybyIdDB(String pcId)
        {
            /* for a given product category id return the respective category object from database
             * do not use this method if there is no need to retrieve related feature objects as well 
             * in that case use the lighter version of this method 'getProductCategorybyIdwoFeaturesDB'
             * 
             * @Author: shibasis sengupta
            */

            if (pcId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Category Id sent to ProductCategory.getProductCategorybyIdDB"));

            Connections cn = new Connections();
            String query = "select " + ProductCategory.PROD_CAT_COL_CAT_ID +
                "," + ProductCategory.PROD_CAT_COL_CATEGORY_NAME +
                "," + ProductCategory.PROD_CAT_COL_PARENT_CAT_ID+
                "," + ProductCategory.PROD_CAT_COL_VIS  +
                " from " + ProductCategory.PROD_CAT_TABLE +
                " where " + ProductCategory.PROD_CAT_COL_CAT_ID + "='" + pcId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ProductCategory tempProdCat = new ProductCategory();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempProdCat.setCategoryId(dr[0].ToString());
                    tempProdCat.setProductCategoryName(dr[1].ToString());
                    tempProdCat.setParentCategoryId(dr[2].ToString());
                    tempProdCat.setVisible(dr[3].ToString());

                    Dictionary<String, Features> tempFeat = ProductCategory.getFeatureforCategoryDB(pcId.Trim());
                    ArrayList temp = new ArrayList();

                    foreach (KeyValuePair<String, Features> kvp in tempFeat)
                        temp.Add(kvp.Value);

                    tempProdCat.setFeature(temp);

                }
            cn.disconnect();
            return tempProdCat;
        
        }
        /// <summary>
        /// lighter version of the method 'getProductCategorybyIdwoFeaturesDB'
        /// returns the product category object from the database for a given category id without the associated feature objects
        /// </summary>
        /// <param name="pcId"></param>
        /// <returns></returns>
        public static ProductCategory getProductCategorybyIdwoFeaturesDB(String pcId)
        {
            /* lighter version of the method 'getProductCategorybyIdwoFeaturesDB' 
             * returns the product category object from the database for a given category id without the associated
             * feature objects
             * 
             * @Author: shibasis sengupta
            */
            
            if (pcId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Category Id sent to ProductCategory.getProductCategorybyIdwoFeaturesDB"));

            Connections cn = new Connections();
            String query = "select " + ProductCategory.PROD_CAT_COL_CAT_ID +
                "," + ProductCategory.PROD_CAT_COL_CATEGORY_NAME +
                "," + ProductCategory.PROD_CAT_COL_PARENT_CAT_ID +
                "," + ProductCategory.PROD_CAT_COL_VIS +
                " from " + ProductCategory.PROD_CAT_TABLE +
                " where " + ProductCategory.PROD_CAT_COL_CAT_ID + "='" + pcId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ProductCategory tempProdCat = new ProductCategory();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempProdCat.setCategoryId(dr[0].ToString());
                    tempProdCat.setProductCategoryName(dr[1].ToString());
                    tempProdCat.setParentCategoryId(dr[2].ToString());
                    tempProdCat.setVisible(dr[3].ToString());

                    tempProdCat.setFeature(new ArrayList());

                }
            cn.disconnect();
            return tempProdCat;
       

        }
    }
    /// <summary>
    /// Representative of the database table 'City_Locality_Map'
    /// </summary>
    public class Localities
    {

        private String localityId;
        private String localityName;
        private String cityId;
        private String zip;

        private static String sessionUser = "";

        public const String LOCALITY_TABLE = "City_Locality_Map";

        public const String LOCALITY_COL_LOCALITY_ID = "Locality_id";
        public const String LOCALITY_COL_CITY_ID = "City_id";
        public const String LOCALITY_COL_LOCALITY_NAME = "Locality_Name";
        public const String LOCALITY_COL_ZIP = "Zip_Code";

        public const String LOCALITY_COL_LOCALITY_ID_TYPE = Connections.STRING_TYPE;
        public const String LOCALITY_COL_CITY_ID_TYPE = Connections.STRING_TYPE;
        public const String LOCALITY_COL_LOCALITY_NAME_TYPE = Connections.STRING_TYPE;
        public const String LOCALITY_COL_ZIP_TYPE = Connections.STRING_TYPE;


        public string getLocalityId()
        {
            return localityId;
        }

        public void setLocalityId(String lc)
        {
            localityId = lc;
        }

        public String getLocalityName()
        {
            return localityName;
        }

        public void setLocalityName(String ln)
        {
            localityName = ln;
        }

        public String getCityId()
        {
            return cityId;
        }

        public void setCityId(String ct)
        {
            cityId = ct;
        }

        public String getZip()
        {
            return zip;
        }

        public void setZip(String zp)
        {
            zip = zp;
        }
        /// <summary>
        /// this method extracts all the details from the database table 'City_Locality_Map' 
        /// the 'key' of the returned dictionary is the locality id, whereas the 'value' is the locality object
        /// A dictionary will provde near constant search performance
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, Localities> getAllLocalitiesDB()
        {
            /* this method extracts all the details from the database table 'City_Locality_Map' 
             * the 'key' of the returned dictionary is the locality id, whereas the 'value' is the locality object
             * A dictionary will provde near constant search performance
             * 
             * @Author: shibasis sengupta
            */

            Dictionary<String, Localities > localDict = new Dictionary<String, Localities >();
            Connections cn = new Connections();
            String query = "select " + Localities.LOCALITY_COL_LOCALITY_ID +
                "," + Localities.LOCALITY_COL_CITY_ID +
                "," + Localities.LOCALITY_COL_LOCALITY_NAME +
                "," + Localities.LOCALITY_COL_ZIP +
                " from " + Localities.LOCALITY_TABLE +
                 " order by " + Localities.LOCALITY_COL_LOCALITY_ID;
            
            DataSet ds = cn.execQuery(query, sessionUser);

            /*Here tried to add reference to the variable RETURN_DATASET_NAME
             * it's not being allowed - not sure about the reason - shibasis
             * */
            DataTable dt = ds.Tables[0];

            foreach (DataRow dr in dt.Rows)
                {
                    Localities lcTemp = new Localities();

                    lcTemp.setLocalityId(dr[0].ToString ());
                    lcTemp.setCityId(dr[1].ToString());
                    lcTemp.setLocalityName(dr[2].ToString());
                    lcTemp.setZip(dr[3].ToString());

                    localDict.Add(lcTemp.getLocalityId(), lcTemp);
                }

            cn.disconnect();
            return localDict;


        }
        /// <summary>
        /// for any given cityId, return all the associated Locality objects
        /// the 'key' of the returned dictionary is the locality id
        /// </summary>
        /// <param name="cityId"></param>
        /// <returns></returns>
        public static Dictionary <String,Localities > getLocalitiesforCityDB(String cityId)
        {
            /* for any given cityId, return all the associated Locality objects
             * the 'key' of the returned dictionary is the locality id
             * 
             * @Author: shibasis sengupta
            */

            if (cityId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty cityId sent to Localities.getLocalitiesforCityDB"));

            Dictionary<String, Localities> localDict = new Dictionary<String, Localities>();
            Connections cn = new Connections();
            String query = "select " + Localities.LOCALITY_COL_LOCALITY_ID +
                "," + Localities.LOCALITY_COL_CITY_ID +
                "," + Localities.LOCALITY_COL_LOCALITY_NAME +
                "," + Localities.LOCALITY_COL_ZIP +
                " from " + Localities.LOCALITY_TABLE +
                " where "+Localities .LOCALITY_COL_CITY_ID+"='"+cityId.Trim ()+"'"+
                 " order by " + Localities.LOCALITY_COL_LOCALITY_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            

            foreach (DataRow dr in dt.Rows  )
                
                {
                    Localities tempLocal = new Localities();
                    tempLocal.setLocalityId(dr[0].ToString());
                    tempLocal.setCityId(dr[1].ToString());
                    tempLocal.setLocalityName(dr[2].ToString());
                    tempLocal.setZip(dr[3].ToString());

                    localDict.Add(tempLocal.getLocalityId(), tempLocal);
                 }
            cn.disconnect();
            return localDict;
        }
        /// <summary>
        /// for a given 'city id' insert multiple records into the database table 'City_Locality_Map'
        /// Before invoking this function make sure respective city_id is available in the table 'City_State_Map'
        /// otherwise it will throw a constrain violation error
        /// </summary>
        /// <param name="lcList"></param>
        /// <param name="cityId"></param>
        /// <returns></returns>
        public static int insertLocalityforCityDB(ArrayList lcList,String cityId)
    {
        /* for a given 'city id' insert multiple records into the database table 'City_Locality_Map'
         * Before invoking this function make sure respective city_id is available in the table 'City_State_Map'
         * otherwise it will throw a constrain violation error
         * 
         * @Author: shibasis sengupta
        */

        if (lcList.Count == 0)
            throw (new CustomExceptions.invalidParamException("Empty Localities List sent to Localities.insertLocalityforCityDB"));

        int rowsAffected = 0;
        String insertCmd = "insert into " + Localities .LOCALITY_TABLE
            + " ("
            + Localities .LOCALITY_COL_LOCALITY_ID  + ","
            + Localities .LOCALITY_COL_CITY_ID  + ","
            + Localities .LOCALITY_COL_LOCALITY_NAME + ","
            + Localities .LOCALITY_COL_ZIP  +  ")"
            + "values (" + "'"+cityId.Trim() + "'"+",";

        Connections cn = new Connections();

        for (int i = 0; i < lcList.Count; i++)
        {
            Localities lcObj = (Localities)lcList[i];

            insertCmd = insertCmd + "'" + lcObj.getLocalityId() + "'," + "'" +
            lcObj.getCityId() + "'," + "'" +
            lcObj.getLocalityName() + "'," + "'" +
            lcObj.getZip() + "'";
                      
            insertCmd += ")";

            //execute the insert for each of the localities object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
        }

        cn.disconnect();
        return rowsAffected;
    }
        /// <summary>
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the cityid
        /// the third parameter contains the type of operation
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateLocalityforCityDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the cityid
             * the third parameter contains the type of operation
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Localities.LOCALITY_COL_CITY_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Localities.updateLocalityforCityDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Localities.updateLocalityforCityDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Localities.updateLocalityforCityDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Localities .LOCALITY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Localities .LOCALITY_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(Localities.LOCALITY_COL_ZIP, Localities .LOCALITY_COL_ZIP_TYPE);
            chkDataType.Add(Localities.LOCALITY_COL_LOCALITY_NAME, Localities .LOCALITY_COL_LOCALITY_NAME_TYPE);
            chkDataType.Add(Localities .LOCALITY_COL_LOCALITY_ID, Localities .LOCALITY_COL_LOCALITY_ID_TYPE);
            chkDataType.Add(Localities .LOCALITY_COL_CITY_ID, Localities .LOCALITY_COL_CITY_ID_TYPE);
            

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Localities.updateLocalityforCityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : "");counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Localities.updateLocalityforCityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : "");counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }

        public static City getCityDetailsforLocalitywoOtherAsscLocalitiesDB(String lcId)
        {
            if (lcId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty locality Id Passed to Localities.getCityDetailsforLocalitywoOtherAsscLocalitiesDB"));

          
            Connections cn = new Connections();

            String cmd = " select m." + City.CITY_COL_CITY_ID  +
                                ",m." + City.CITY_COL_CITY_NAME  +
                                ",m." + City.CITY_COL_STATE_ID  +
                                " from " + City.CITY_TABLE + " m," + Localities .LOCALITY_TABLE + " n" +
                                " where " + "m." + City.CITY_COL_CITY_ID  + "=" + "n." + Localities .LOCALITY_COL_CITY_ID +
                                 " and " + "n." + Localities.LOCALITY_COL_LOCALITY_ID + "=" + "'"+lcId.Trim ()+"'";

            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];
            City tempCity = new City ();

            foreach (DataRow dr in dt.Rows)
             {
                tempCity.setCityId(dr[0].ToString());
                tempCity.setCityName(dr[1].ToString());
                tempCity.setStateId(dr[2].ToString());
                tempCity.setCityLocalities(new ArrayList());

            }
            cn.disconnect();
            return tempCity;
        }
        /// <summary>
        /// for a given locality id return the respective locality object from database
        /// </summary>
        /// <param name="lId"></param>
        /// <returns></returns>
        public static Localities getLocalitybyIdDB(String lId)
        {
            /* for a given locality id return the respective locality object from database
             * 
             * @Author: shibasis sengupta
            */

            if (lId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Locality Id sent to Localities.getLocalitybyIdDB"));

            Connections cn = new Connections();
            String query = "select " + Localities.LOCALITY_COL_LOCALITY_ID +
                "," + Localities.LOCALITY_COL_CITY_ID +
                "," + Localities.LOCALITY_COL_LOCALITY_NAME +
                "," + Localities.LOCALITY_COL_ZIP +
                " from " + Localities.LOCALITY_TABLE +
                " where " + Localities.LOCALITY_COL_LOCALITY_ID + "='" + lId.Trim() + "'" +
                 " order by " + Localities.LOCALITY_COL_LOCALITY_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Localities tempLocal = new Localities();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempLocal.setLocalityId(dr[0].ToString());
                    tempLocal.setCityId(dr[1].ToString());
                    tempLocal.setLocalityName(dr[2].ToString());
                    tempLocal.setZip(dr[3].ToString());
                                        
                }
            cn.disconnect();
            return tempLocal;
         
        }

    }
    /// <summary>
    /// Representative of the backend table 'City_State_Map'
    /// </summary>
    public class City
    {
        private String cityId;
        private String cityName;
        private String stateId;
        private ArrayList cityLocalities;

        private static String sessionUser = "";

        public const String CITY_TABLE = "City_State_Map";

        public const String CITY_COL_CITY_ID = "City_Id";
        public const String CITY_COL_STATE_ID="State_id";
        public const String CITY_COL_CITY_NAME = "City_Name";

        public const String CITY_COL_CITY_ID_TYPE=Connections .STRING_TYPE ;
        public const String CITY_COL_STATE_ID_TYPE=Connections .STRING_TYPE ;
        public const String CITY_COL_CITY_NAME_TYPE = Connections.STRING_TYPE;

        public String getCityId()
        {
            return cityId;
        }

        public void setCityId(String ctId)
        {
            cityId = ctId;
        }

        public String getCityName()
        {
            return cityName;
        }

        public void setCityName(String cNm)
        {
            cityName = cNm;
        }

        public String getStateId()
        {
            return stateId;
        }

        public void setStateId(String sId)
        {
            stateId = sId;
        }

        public ArrayList getCityLocalities()
        {
            return cityLocalities;
        }

        public void setCityLocalities(ArrayList lc)
        {
            cityLocalities = lc;
        }
        /// <summary>
        /// this method returns all the city entries in the database along with their associated localities
        /// As it returns all the associated localities, this is a heavywight method and should ONLY be used if necessary
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, City> getAllCitiesDB()
        {
            /* this method returns all the city entries in the database along with their
             * associated localities
             * 
             * As it returns all the associated localities, this is a heavywight method and should ONLY
             * be used if necessary
             * 
             * @Author: shibasis sengupta
            */

            Dictionary<String, City> cityDict = new Dictionary<String, City>();

            String cmd = " select " + City.CITY_COL_CITY_ID +
                                "," + City.CITY_COL_CITY_NAME +
                                "," + City.CITY_COL_STATE_ID +
                                " from " + City.CITY_TABLE +
                                "order by " + City.CITY_COL_CITY_ID ;

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];

            

            foreach (DataRow dr in dt.Rows)
                
                {
                    City tempCity = new City();
                    Localities tmpLocal = new Localities();

                    tempCity.setCityId (dt.Columns [0].ToString ());
                    tempCity .setCityName (dt.Columns [1].ToString ());
                    tempCity .setStateId (dt.Columns [2].ToString ());

                    Dictionary <String,Localities > tempLocal=Localities .getLocalitiesforCityDB (tempCity .getCityId ());
                    ArrayList temp=new ArrayList ();

                    foreach (KeyValuePair<String ,Localities > kvp in tempLocal )
                        temp.Add (kvp.Value );

                    tempCity .setCityLocalities(temp);
                    cityDict.Add(tempCity .getCityId (),tempCity );

                }
            cn.disconnect ();
            return cityDict ;

        }
        /// <summary>
        /// this is a lightweight version of the method 'getAllCitiesDB' 
        /// the returned objects are lightweight and the value is returned faster as it does not need to 
        /// send the associated Localalities
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, City> getAllCitieswoLocalitiesDB()
        {
            /* this is a lightweight version of the method 'getAllCitiesDB' 
             * 
             * the returned objects are lightweight and the value is returned faster as it does not need to 
             * send the associated Localalities
             * 
             * @Author: shibasis sengupta
            */

            Dictionary<String, City> cityDict = new Dictionary<String, City>();

            String cmd = " select " + City.CITY_COL_CITY_ID +
                                "," + City.CITY_COL_CITY_NAME +
                                "," + City.CITY_COL_STATE_ID +
                                " from " + City.CITY_TABLE +
                                "order by " + City.CITY_COL_CITY_ID;

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];

            

            foreach (DataRow dr in dt.Rows)
                
                {
                    City tempCity = new City();
                    
                    tempCity.setCityId(dr[0].ToString());
                    tempCity.setCityName(dr[1].ToString());
                    tempCity.setStateId(dr[2].ToString());

                    cityDict.Add(tempCity.getCityId(), tempCity);

                }

            cn.disconnect();
            return cityDict;
        }
        /// <summary>
        /// for a given stateId, insert the associated entries into the table 'city_state_map' ONLY
        /// </summary>
        /// <param name="stId"></param>
        /// <param name="ct"></param>
        /// <returns></returns>
        public static int insertCityforStateDB(String stId,ArrayList ct)
        {
            /* for a given stateId, insert the associated entries into the table 'city_state_map' ONLY
             * 
             * @Author: shibasis sengupta
            */

            if (ct.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty city list sent to method City.insertCityforStateDB"));

            if(stId.Equals (""))
                throw (new CustomExceptions.invalidParamException("Empty stateId string sent to method City.insertCityforStateDB"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + City.CITY_TABLE
                + " ("
                + City.CITY_COL_STATE_ID + ","
                + City.CITY_COL_CITY_ID + ","
                + City.CITY_COL_CITY_NAME + ")"
                + "values (" + "'"+stId.Trim() +"'"+ ",";
            Connections cn = new Connections();

            for (int i = 0; i < ct.Count; i++)
            {
                City cityObj = (City)ct[i];

                insertCmd = insertCmd + "'" + cityObj.getCityId () + "'," + "'" +
                cityObj.getCityName () + "'";

                insertCmd += ")";

                //execute the insert for each of the city object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            return rowsAffected;
        }
        /// <summary>
        /// This is a heavyweight method as it returns all associated localities for a City as well.
        /// The key is the city_id.
        /// If not required use the light weight version.
        /// </summary>
        /// <param name="stId"></param>
        /// <returns></returns>
        public static Dictionary <String,City> getCitiesforStateDB(String stId)
        {
            if (stId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty state Id sent to City.getCitiesforStateDB"));

            Dictionary<String, City> cityDict = new Dictionary<String, City>();
            Connections cn = new Connections();
            String query = "select " + City.CITY_COL_CITY_ID +
                "," +City.CITY_COL_CITY_NAME +
                " from " + City.CITY_TABLE+
                " where " + City.CITY_COL_STATE_ID + "='" + stId.Trim() + "'" +
                 " order by " + City.CITY_COL_CITY_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            

            foreach (DataRow dr in dt.Rows)
                
                {
                    City tempCity = new City();
                    tempCity.setCityId(dr[0].ToString());
                    tempCity.setCityName(dr[1].ToString());
                    tempCity.setStateId(stId.Trim());

                    Dictionary <String,Localities > tempLocal=Localities .getLocalitiesforCityDB(tempCity.getCityId ());
                    ArrayList al=new ArrayList ();

                    foreach (KeyValuePair<String, Localities> kvp in tempLocal)
                        al.Add(kvp.Value);

                    tempCity.setCityLocalities(al);

                    cityDict.Add(tempCity.getCityId(), tempCity);

                }
            cn.disconnect();
            return cityDict;

        }
        /// <summary>
        /// This is a light weight version of the method 'getCitiesforStateDB'.
        /// Returns all city details for a given state without the associated localities.
        /// Key of the dictionary is the respective city id.
        /// </summary>
        /// <param name="stId"></param>
        /// <returns></returns>
        public static Dictionary<String, City> getCitiesforStatewoLocalitiesDB(String stId)
        {
            if (stId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty state Id sent to City.getCitiesforStateDB"));

            Dictionary<String, City> cityDict = new Dictionary<String, City>();
            Connections cn = new Connections();
            String query = "select " + City.CITY_COL_CITY_ID +
                "," + City.CITY_COL_CITY_NAME +
                " from " + City.CITY_TABLE +
                " where " + City.CITY_COL_STATE_ID + "='" + stId.Trim() + "'" +
                 " order by " + City.CITY_COL_CITY_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            foreach (DataRow dr in dt.Rows)
            {
                City tempCity = new City();
                tempCity.setCityId(dr[0].ToString());
                tempCity.setCityName(dr[1].ToString());
                tempCity.setStateId(stId.Trim());

               // Dictionary<String, Localities> tempLocal = Localities.getLocalitiesforCityDB(tempCity.getCityId());
                //ArrayList al = new ArrayList();

                //foreach (KeyValuePair<String, Localities> kvp in tempLocal)
                    //al.Add(kvp.Value);

                //tempCity.setCityLocalities(al);

                cityDict.Add(tempCity.getCityId(), tempCity);

            }
            cn.disconnect();
            return cityDict;

        }
        /// <summary>
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the stateId
        /// the third parameter contains the type of operation
        /// a delete operation will have a cascading effect on the table 'City_Locality_Map'
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateCityforStateDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the stateId
             * the third parameter contains the type of operation
             * 
             * a delete operation will have a cascading effect on the table 'City_Locality_Map'
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(City.CITY_COL_STATE_ID , out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - City.updateCityforStateDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to City.updateCityforStateDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to City.updateCityforStateDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + City.CITY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + City.CITY_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(City.CITY_COL_STATE_ID, City.CITY_COL_STATE_ID_TYPE);
            chkDataType.Add(City.CITY_COL_CITY_NAME, City.CITY_COL_CITY_NAME_TYPE);
            chkDataType.Add(City.CITY_COL_CITY_ID, City.CITY_COL_CITY_ID_TYPE);
            


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to City.updateCityforStateDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : "");counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to City.updateCityforStateDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : "");counter++;
                }
            }

            //Delete respective entries from 'City_Locality_Map'
            if (operation.Equals(Connections.OPERATION_DELETE))
                cmd += " ";

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }

        public static State getStateDetailsforCitywoOtherAsscCitiesDB(String ctId)
        {
            if (ctId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty city Id Passed to City.getStateDetailsforCitywoOtherAsscCitiesDB"));


            Connections cn = new Connections();

            String cmd = " select m." + State .STATES_COL_STATE_ID  +
                                ",m." + State .STATES_COL_STATE_NAME +
                                ",m." + State .STATES_COL_COUNTRY_ID +
                                " from " + State .STATES_TABLE  + " m," + City.CITY_TABLE  + " n" +
                                " where " + "m." + State.STATES_COL_STATE_ID + "=" + "n." + City.CITY_COL_STATE_ID  +
                                 " and " + "n." + City.CITY_COL_CITY_ID + "=" + "'" + ctId.Trim() + "'";

            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];
            State tempState = new State();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempState.setStateId(dr[0].ToString());
                    tempState.setStateName(dr[1].ToString());
                    tempState.setCountryId(dr[2].ToString());
                    tempState.setStateCities(new ArrayList());

                }
            cn.disconnect();
            return tempState ;

        }
        /// <summary>
        /// for a given city id, return the respective city object from the database
        /// this is a heavy weight method - returns all the associated Localities to a city
        /// use it when absolutely necessary
        /// </summary>
        /// <param name="cId"></param>
        /// <returns></returns>
        public static City getCitybyIdDB(String cId)
        {
            /* for a given city id, return the respective city object from the database
             * this is a heavy weight method - returns all the associated Localities to a city
             * use it when absolutely necessary
             * 
             * @Autho: shibasis sengupta
            */

            if (cId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty city Id sent to City.getCitybyIdDB"));

           
            Connections cn = new Connections();
            String query = "select " + City.CITY_COL_CITY_ID +
                "," + City.CITY_COL_CITY_NAME +
                "," + City.CITY_COL_STATE_ID  +
                " from " + City.CITY_TABLE +
                " where " + City.CITY_COL_CITY_ID + "='" + cId.Trim() + "'" +
                 " order by " + City.CITY_COL_CITY_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            City tempCity = new City();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempCity.setCityId(dr[0].ToString());
                    tempCity.setCityName(dr[1].ToString());
                    tempCity.setStateId(dr[2].ToString());

                    Dictionary<String, Localities> tempLocal = Localities.getLocalitiesforCityDB(tempCity.getCityId());
                    ArrayList al = new ArrayList();

                    foreach (KeyValuePair<String, Localities> kvp in tempLocal)
                        al.Add(kvp.Value);

                    tempCity.setCityLocalities(al);

                   }
            cn.disconnect();
            return tempCity;

        }
        /// <summary>
        /// a light weight version of the method 'getCitybyIdDB' - returns all related details of a given
        /// city id without the associated Localities
        /// </summary>
        /// <param name="cId"></param>
        /// <returns></returns>
        public static City getCitybyIdwoLocalitiesDB(String cId)
        {
            /*  a light weight version of the method 'getCitybyIdDB' - returns all related details of a given
             * city id without the associated Localities
             * 
             * @Author: shibasis sengupta
            */

            if (cId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty state Id sent to City.getCitybyIdwoLocalitiesDB"));


            Connections cn = new Connections();
            String query = "select " + City.CITY_COL_CITY_ID +
                "," + City.CITY_COL_CITY_NAME +
                "," + City.CITY_COL_STATE_ID +
                " from " + City.CITY_TABLE +
                " where " + City.CITY_COL_CITY_ID + "='" + cId.Trim() + "'" +
                 " order by " + City.CITY_COL_CITY_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            City tempCity = new City();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempCity.setCityId(dr[0].ToString());
                    tempCity.setCityName(dr[1].ToString());
                    tempCity.setStateId(dr[2].ToString());
                    tempCity.setCityLocalities(new ArrayList ());

                }
            cn.disconnect();
            return tempCity;

        }

    }
    /// <summary>
    /// Representative of the database table 'State_Province_Details'
    /// </summary>
    public class State
    {
        private String stateId;
        private String stateName;
        private String countryId;
        private ArrayList stateCities;

        private static String sessionUser = "";

        public const String STATES_TABLE = "State_Province_Details";

        public const String STATES_COL_STATE_ID = "State_id";
        public const String STATES_COL_COUNTRY_ID="Country_id";
        public const String STATES_COL_STATE_NAME = "State_Name";

        public const String STATES_COL_STATE_ID_TYPE=Connections .STRING_TYPE ;
        public const String STATES_COL_COUNTRY_ID_TYPE=Connections .STRING_TYPE ;
        public const String STATES_COL_STATE_NAME_TYPE = Connections.STRING_TYPE;

        public String  getStateId()
        {
            return stateId;
        }

        public void setStateId(String sId)
        {
            stateId = sId;
        }

        public String getStateName()
        {
            return stateName;
        }

        public void setStateName(String sNm)
        {
            stateName = sNm;
        }

        public String getCountryId()
        {
            return countryId;
        }

        public void setCountryId(String cId)
        {
            countryId = cId;
        }

        public ArrayList getStateCities()
        {
            return stateCities;
        }

        public void setStateCities(ArrayList  sCit)
        {
            stateCities = sCit;
        }
        /// <summary>
        /// use this method only when all details of the states including the associates city details  is required
        /// this is a heavy weight method
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, State> getAllStatesDB()
        {
            /*  use this method only when all details of the states including the associates city details  is required
             *  this is a heavy weight method
             *  
             * @Author: shibasis sengupta
            */

            Dictionary<String, State> stateDict = new Dictionary<String, State>();

            String cmd = " select " + State.STATES_COL_STATE_ID +
                                "," + State.STATES_COL_COUNTRY_ID +
                                "," + State.STATES_COL_STATE_NAME +
                                " from " + State.STATES_COL_STATE_NAME +
                                "order by " + State.STATES_COL_STATE_ID;

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];

     
            foreach (DataRow dr in dt.Rows)
                
                {
                    State tempState = new State();
                    tempState.setStateId(dr[0].ToString());
                    tempState.setCountryId(dr[1].ToString());
                    tempState.setStateName(dr[2].ToString());

                    Dictionary<String, City> tempCity = City.getCitiesforStateDB(tempState.getStateId());
                    ArrayList temp=new ArrayList ();

                    foreach (KeyValuePair<String, City> kvp in tempCity)
                        temp.Add(kvp.Value);

                    tempState.setStateCities(temp);
                    stateDict.Add(tempState.getStateId(), tempState);

                }
            cn.disconnect();
            return stateDict;
            
        }
        /// <summary>
        /// this method is a light weight version of the method 'getAllStatesDB'
        /// it does not return the associatd citiies to a state
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, State> getAllStateswoCitiesDB()
        {
            /* this method is a light weight version of the method 'getAllStatesDB'
             * it does not return the associatd citiies to a state
             * 
             * @Author: shibasis sengupta
            */

            Dictionary<String, State> stateDict = new Dictionary<String, State>();

            String cmd = " select " + State.STATES_COL_STATE_ID +
                                "," + State.STATES_COL_COUNTRY_ID +
                                "," + State.STATES_COL_STATE_NAME +
                                " from " + State.STATES_COL_STATE_NAME +
                                "order by " + State.STATES_COL_STATE_ID;

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];

            


            foreach (DataRow dr in dt.Rows)
                
                {
                    State tempState = new State();
                    tempState.setStateId(dr[0].ToString());
                    tempState.setCountryId(dr[1].ToString());
                    tempState.setStateName(dr[2].ToString());
                    tempState.setStateCities(new ArrayList());

                    stateDict.Add(tempState.getStateId(), tempState);

                }
            cn.disconnect();
            return stateDict;


        }
        /// <summary>
        /// for a given country id, returns all the associated state details.
        /// Along with states it returns all associated cities as well.
        /// This is a heavyweight method.
        /// </summary>
        /// <param name="cId"></param>
        /// <returns></returns>
        public static Dictionary<String, State> getStatesforCountryDB(String cId)
        {
            /* for a given country id, returns all the associated state details
             * 
             * @Author: shibasis sengupta
            */

            if (cId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty country Id sent to State.getStatesforCountryDB"));

            Dictionary<String, State > stateDict = new Dictionary<String, State>();
            Connections cn = new Connections();
            String query = "select " + State .STATES_COL_STATE_ID +
                "," + State .STATES_COL_STATE_NAME  +
                " from " + State .STATES_TABLE  +
                " where " + State .STATES_COL_COUNTRY_ID  + "='" + cId.Trim() + "'" +
                 " order by " + State .STATES_COL_STATE_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            

            foreach (DataRow dr in dt.Rows)
                
                {
                    State tempState = new State();
                    tempState.setCountryId(cId);
                    tempState.setStateId(dr[0].ToString());
                    tempState.setStateName(dr[1].ToString());

                    Dictionary<String, City> tempCity = City.getCitiesforStateDB(tempState.getStateId());
                    ArrayList al = new ArrayList();

                    foreach (KeyValuePair<String, City> kvp in tempCity)
                        al.Add(kvp.Value);

                    tempState.setStateCities(al);

                    stateDict.Add(tempState.getStateId(), tempState);

                }
            
            cn.disconnect();
            return stateDict;

        }
        /// <summary>
        /// for a given country id, returns all the associated state details.
        /// Along with states it DOES NOT return all associated cities as well.
        /// This is a lightweight version of the method 'getStatesforCountryDB'
        /// </summary>
        /// <param name="cId"></param>
        /// <returns></returns>
        public static Dictionary<String, State> getStatesforCountrywoCitiesDB(String cId)
        {
            /* for a given country id, returns all the associated state details
             * 
             * @Author: shibasis sengupta
            */

            if (cId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty country Id sent to State.getStatesforCountryDB"));

            Dictionary<String, State> stateDict = new Dictionary<String, State>();
            Connections cn = new Connections();
            String query = "select " + State.STATES_COL_STATE_ID +
                "," + State.STATES_COL_STATE_NAME +
                " from " + State.STATES_TABLE +
                " where " + State.STATES_COL_COUNTRY_ID + "='" + cId.Trim() + "'" +
                 " order by " + State.STATES_COL_STATE_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            foreach (DataRow dr in dt.Rows)
            {
                State tempState = new State();
                tempState.setCountryId(cId);
                tempState.setStateId(dr[0].ToString());
                tempState.setStateName(dr[1].ToString());

                //Dictionary<String, City> tempCity = City.getCitiesforStateDB(tempState.getStateId());
                //ArrayList al = new ArrayList();

                //foreach (KeyValuePair<String, City> kvp in tempCity)
                    //al.Add(kvp.Value);

                //tempState.setStateCities(al);

                stateDict.Add(tempState.getStateId(), tempState);

            }

            cn.disconnect();
            return stateDict;

        }
        /// <summary>
        /// for a given country id, insert records for states into the table 'state_province_details' ONLY
        /// </summary>
        /// <param name="cId"></param>
        /// <param name="stList"></param>
        /// <returns></returns>
        public static int insertStateforCountryDB(String cId, ArrayList stList)
        {
            /* for a given country id, insert records for states into the table 'state_province_details' ONLY
             * 
             * @Author: shibasis sengupta
            */

            if (stList.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty state list sent to method State.insertStateforCountryDB"));

            if (cId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Country Id  string sent to method State.insertStateforCountryDB"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + State.STATES_TABLE 
                + " ("
                + State.STATES_COL_COUNTRY_ID  + ","
                + State.STATES_COL_STATE_ID  + ","
                + State.STATES_COL_STATE_NAME  + ")"
                + "values (" + "'"+cId.Trim() +"'"+ ",";
            Connections cn = new Connections();

            for (int i = 0; i < stList.Count; i++)
            {
                State stateObj = (State)stList[i];

                insertCmd = insertCmd + "'" + stateObj.getStateId () + "'," + "'" +
                stateObj .getStateName () + "'";

                insertCmd += ")";

                //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            return rowsAffected;
        
        }
        /// <summary>
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the country id
        /// the third parameter contains the type of operation
        /// a delete operation will have a cascading effect on the table 'City_State_Map'
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateStateforCountryDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {

            /* the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the country id
             * the third parameter contains the type of operation
             * 
             * a delete operation will have a cascading effect on the table 'City_State_Map'
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(State.STATES_COL_COUNTRY_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - State.updateStateforCountryDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to State.updateStateforCountryDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to State.updateStateforCountryDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + State.STATES_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + State .STATES_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(State.STATES_COL_STATE_NAME, State.STATES_COL_STATE_NAME_TYPE);
            chkDataType.Add(State.STATES_COL_STATE_ID, State.STATES_COL_STATE_ID_TYPE);
            chkDataType.Add(State .STATES_COL_COUNTRY_ID, State.STATES_COL_COUNTRY_ID_TYPE);



            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to State.updateStateforCountryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : "");counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to State.updateStateforCountryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : "");counter++;
                }
            }

            //Delete respective entries from 'City_State_Map'
            if (operation.Equals(Connections.OPERATION_DELETE))
                cmd += " ";

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
       

        }
        
        public static Country getCountryDetailsforStatewoOtherAsscStatesDB(string stId)
        {
            if (stId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty state Id Passed to State.getCountryDetailsforStatewoOtherAsscStatesDB"));


            Connections cn = new Connections();

            String cmd = " select m." + Country.COUNTRY_COL_COUNTRY_ID +
                                ",m." + Country.COUNTRY_COL_COUNTRY_NAME  +
                                " from " + Country.COUNTRY_TABLE  + " m," + State.STATES_TABLE + " n" +
                                " where " + "m." + Country.COUNTRY_COL_COUNTRY_ID  + "=" + "n." +State.STATES_COL_COUNTRY_ID +
                                 " and " + "n." + State.STATES_COL_STATE_ID + "=" + "'" + stId.Trim() + "'";

            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];
            Country tempCountry = new Country();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempCountry.setCountryId(dr[0].ToString());
                    tempCountry.setCountryName(dr[1].ToString());

                    Dictionary<String, Currency> tempCurr = Country.getCurrencyforCountryDB(tempCountry.getCountryId());
                    ArrayList al=new ArrayList ();

                    foreach (KeyValuePair<String, Currency> kvp in tempCurr)
                        al.Add(kvp.Value);

                    tempCountry.setCurrency(al);
                    
                }
            cn.disconnect();
            return tempCountry;

        }
        /// <summary>
        /// for a given state id, return the respective city object from the database
        /// this is a heavy weight method - returns all the associated Cities to a city
        /// use it when absolutely necessary
        /// </summary>
        /// <param name="sId"></param>
        /// <returns></returns>
        public static State getStatebyIdDB(String sId)
        {
            /* for a given state id, return the respective city object from the database
             * this is a heavy weight method - returns all the associated Cities to a city
             * use it when absolutely necessary
             * 
             * @Autho: shibasis sengupta
            */

            if (sId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty state Id sent to State.getStatebyIdDB"));


            Connections cn = new Connections();
            String query = "select " + State.STATES_COL_STATE_ID +
                "," + State .STATES_COL_COUNTRY_ID +
                "," + State .STATES_COL_STATE_NAME +
                " from " + State.STATES_TABLE +
                " where " + State.STATES_COL_STATE_ID + "='" + sId.Trim() + "'" +
                 " order by " + State.STATES_COL_STATE_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            State tempState = new State();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempState.setStateId(dr[0].ToString());
                    tempState.setCountryId(dr[1].ToString());
                    tempState.setStateName(dr[2].ToString());

                    Dictionary<String, City> tempCity = City.getCitiesforStateDB(tempState.getStateId());
                    ArrayList al = new ArrayList();

                    foreach (KeyValuePair<String, City> kvp in tempCity)
                        al.Add(kvp.Value);

                    tempState.setStateCities(al);

                }
            cn.disconnect();
            return tempState;
        }
        /// <summary>
        /// a light weight version of the method 'getStatebyIdDB' - returns all related details of a given state id without the associated Cities
        /// </summary>
        /// <param name="sId"></param>
        /// <returns></returns>
        public static State getStatebyIdwoCitiesDB(String sId)
        {
            /*  a light weight version of the method 'getStatebyIdDB' - returns all related details of a given
            * state id without the associated Cities
            * 
            * @Author: shibasis sengupta
           */

            if (sId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty state Id sent to State.getStatebyIdwoCitiesDB"));


            Connections cn = new Connections();
            String query = "select " + State.STATES_COL_STATE_ID +
                "," + State.STATES_COL_COUNTRY_ID +
                "," + State.STATES_COL_STATE_NAME +
                " from " + State.STATES_TABLE +
                " where " + State.STATES_COL_STATE_ID + "='" + sId.Trim() + "'" +
                 " order by " + State.STATES_COL_STATE_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            State tempState = new State();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempState.setStateId(dr[0].ToString());
                    tempState.setCountryId(dr[1].ToString());
                    tempState.setStateName(dr[2].ToString());
                    tempState.setStateCities(new ArrayList ());

                }
            cn.disconnect();
            return tempState;

        }
        
    }
    /// <summary>
    /// Representative of the database table 'Country_Details'
    /// </summary>
    public class Country
    {
        private String countryId;
        private String countryName;
        private ArrayList countryStates;
        private ArrayList currency;

        private static String sessionUser = "";

        public const String COUNTRY_TABLE="Country_Details";

        public const String COUNTRY_COL_COUNTRY_ID="Country_id";
        public const String COUNTRY_COL_COUNTRY_NAME = "Country_Name";

        public const String COUNTRY_COL_COUNTRY_ID_TYPE=Connections .STRING_TYPE ;
        public const String COUNTRY_COL_COUNTRY_NAME_TYPE=Connections .STRING_TYPE ;


        public String getCountryId()
        {
            return countryId;
        }

        public void setCountryId(String cId)
        {
            countryId = cId;
        }

        public String getCountryName()
        {
            return countryName;
        }

        public void setCountryName(String cNm)
        {
            countryName = cNm;
        }

        public ArrayList getCountryStates()
        {
            return countryStates;
        }

        public void setCountryStates(ArrayList cSt)
        {
            countryStates = cSt;
        }

        public ArrayList getCurrency()
        {
            return currency;
        }

        public void setCurrency(ArrayList curr)
        {
            currency = curr;
        }
        /// <summary>
        /// returns the respective currencies for a particular country
        /// the 'key' of the returned dictionary is the currency id and the 'value' is a currency object
        /// </summary>
        /// <param name="cId"></param>
        /// <returns></returns>
        public static Dictionary<String, Currency> getCurrencyforCountryDB(String cId)
        {
            /* returns the respective currencies for a particular country
             * the 'key' of the returned dictionary is the currency id and the 'value' is a currency object
             * 
             * @Author: shibasis sengupta
            */

            if (cId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty country id sent to Country.getCurrencyforCountryDB"));

            Dictionary<String, Currency > currDict = new Dictionary<String, Currency >();
            Connections cn = new Connections();

            String query = "select " + Currency.CURRENCY_COL_CURRENCY_ID +
                "," + Currency.CURRENCY_COL_CURRENCY_NAME +
                " from " + Currency.CURRENCY_TABLE  +
                " where " + Currency.CURRENCY_COL_COUNTRY_ID + "='" + cId.Trim() + "'" +
                 " order by " + Currency.CURRENCY_COL_CURRENCY_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            

            foreach (DataRow dr in dt.Rows)
                
                {
                    Currency tempCurr = new Currency();
                    tempCurr.setCurrencyId(dr[0].ToString());
                    tempCurr.setCurrencyName(dr[1].ToString());

                    currDict.Add (tempCurr.getCurrencyId(), tempCurr);

                }
            cn.disconnect();
            return currDict;
        
        }
        /// <summary>
        /// a light weight version of the method 'getCountrybyIdDB' - returns all related details of a given country id without the associated States
        /// </summary>
        /// <param name="cId"></param>
        /// <returns></returns>
        public static Country getCountrybyIdwoStatesDB(String cId)
        {
            /*  a light weight version of the method 'getCountrybyIdDB' - returns all related details of a given
           * country id without the associated States
           * 
           * @Author: shibasis sengupta
          */

            if (cId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty country Id sent to Country.getCountrybyIdwoStatesDB"));


            Connections cn = new Connections();
            String query = "select " + Country.COUNTRY_COL_COUNTRY_ID +
                "," + Country.COUNTRY_COL_COUNTRY_NAME +
                " from " + Country.COUNTRY_TABLE +
                " where " + Country.COUNTRY_COL_COUNTRY_ID + "='" + cId.Trim() + "'" +
                 " order by " + Country.COUNTRY_COL_COUNTRY_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Country tempCountry = new Country();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempCountry.setCountryId(dr[0].ToString());
                    tempCountry.setCountryName(dr[1].ToString());

                    Dictionary<String, Currency> tempCurr = Country.getCurrencyforCountryDB(tempCountry.getCountryId());
                    ArrayList al = new ArrayList();

                    foreach (KeyValuePair<String, Currency> kvp in tempCurr)
                        al.Add(kvp.Value);
                    //Add the related currency details
                    tempCountry.setCurrency(al);

                    tempCountry.setCountryStates(new ArrayList ());

                }
            cn.disconnect();
            return tempCountry;
 
        }
        /// <summary>
        /// use this method only when all details of the country including the associates state details  is required
        /// this is a VERY heavy weight method as each associated state object might have numerous city/locality details associated with it
        /// if not required absolutely.. it is highly recommended to use the lighweight version 'getAllCountrywoStatesDB'
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, Country> getAllCountryDB()
        {
            /*  use this method only when all details of the country including the associates state details  is required
            *  this is a VERY heavy weight method as each associated state object might have numerous city/locality details associated with it
            *  if not required absolutely.. it is highly recommended to use the lighweight version 'getAllCountrywoStatesDB'
             * 
            * @Author: shibasis sengupta
           */

            Dictionary<String, Country> countryDict = new Dictionary<String, Country>();

            String cmd = " select " + Country.COUNTRY_COL_COUNTRY_ID +
                                "," + Country.COUNTRY_COL_COUNTRY_NAME +
                                " from " + Country.COUNTRY_TABLE +
                                " order by " + Country.COUNTRY_COL_COUNTRY_ID;

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];

            


            foreach (DataRow dr in dt.Rows)
                
                {
                    Country tempCountry = new Country();
                    tempCountry.setCountryId(dr[0].ToString());
                    tempCountry.setCountryName(dr[1].ToString());

                    Dictionary<String, Currency> tempCurr = Country.getCurrencyforCountryDB(tempCountry.getCountryId());
                    ArrayList al=new ArrayList();

                    foreach (KeyValuePair<String, Currency> kvp in tempCurr)
                        al.Add(kvp.Value);
                    //Set the currency
                    tempCountry.setCurrency(al);

                    al = new ArrayList();
                   Dictionary<String, State> tempState = State.getStatesforCountryDB(tempCountry.getCountryId());

                   foreach (KeyValuePair<String, State> kvp in tempState)
                       al.Add(kvp.Value);
                    //Set the states
                   tempCountry.setCountryStates(al);

                   countryDict.Add(tempCountry.getCountryId(), tempCountry);
                }
            cn.disconnect();
            return countryDict;
       
        }
        /// <summary>
        /// this method is a light weight version of the method 'getAllCountryDB' this method
        /// does not return associated State details of a country
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, Country> getAllCountrywoStatesDB()
        {
            /* this method is a light weight version of the method 'getAllCountryDB' this method 
             * does not return associated State details of a country
             * 
             * @Author: shibasis sengupta
            */

            Dictionary<String, Country> countryDict = new Dictionary<String, Country>();

            String cmd = " select " + Country.COUNTRY_COL_COUNTRY_ID +
                                "," + Country.COUNTRY_COL_COUNTRY_NAME +
                                " from " + Country.COUNTRY_TABLE +
                                " order by " + Country.COUNTRY_COL_COUNTRY_ID;

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];

            


            foreach (DataRow dr in dt.Rows)
                
                {
                    Country tempCountry = new Country();

                    tempCountry.setCountryId(dr[0].ToString());
                    tempCountry.setCountryName(dr[1].ToString());

                    Dictionary<String, Currency> tempCurr = Country.getCurrencyforCountryDB(tempCountry.getCountryId());
                    ArrayList al = new ArrayList();

                    foreach (KeyValuePair<String, Currency> kvp in tempCurr)
                        al.Add(kvp.Value);
                    //Set the currency
                    tempCountry.setCurrency(al);

                    //Set the states
                    tempCountry.setCountryStates(new ArrayList());

                    countryDict.Add(tempCountry.getCountryId(), tempCountry);
                }
            cn.disconnect();
            return countryDict;

        }
        /// <summary>
        /// for a given country id, return the respective country object from the database along with the currency details
        /// this is a heavy weight method - returns all the associated States to a Country
        /// use it when absolutely necessary
        /// </summary>
        /// <param name="cId"></param>
        /// <returns></returns>
        public static Country getCountrybyIdDB(String cId)
        {
            /* for a given country id, return the respective country object from the database along with the 
             * currency details
             * this is a heavy weight method - returns all the associated States to a Country
             * use it when absolutely necessary
             * 
             * @Autho: shibasis sengupta
            */

            if (cId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty country Id sent to Country.getCountrybyIdDB"));


            Connections cn = new Connections();
            String query = "select " + Country.COUNTRY_COL_COUNTRY_ID +
                "," + Country.COUNTRY_COL_COUNTRY_NAME +
                " from " + Country.COUNTRY_TABLE +
                " where " + Country.COUNTRY_COL_COUNTRY_ID + "='" + cId.Trim() + "'" +
                 " order by " + Country.COUNTRY_COL_COUNTRY_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Country tempCountry = new Country();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempCountry.setCountryId(dr[0].ToString());
                    tempCountry.setCountryName(dr[1].ToString());

                    Dictionary<String, Currency> tempCurr = Country.getCurrencyforCountryDB(tempCountry.getCountryId());
                    ArrayList al=new ArrayList();

                    foreach (KeyValuePair<String, Currency> kvp in tempCurr)
                        al.Add(kvp.Value);
                    //Add the currency details
                    tempCountry.setCurrency(al);

                    Dictionary<String, State> tempState = State.getStatesforCountryDB(tempCountry.getCountryId());
                    al = new ArrayList();

                    foreach (KeyValuePair<String, State> kvp in tempState)
                        al.Add(kvp.Value);
                    //Add the state details
                    tempCountry.setCountryStates(al);
                }
            cn.disconnect();
            return tempCountry;
        
        }
        
        /// <summary>
        /// inserts a country object to the database table 'Country_Details' only
        /// </summary>
        /// <param name="cObj"></param>
        /// <returns></returns>
        public static int insertCountryDB(Country cObj)
        {
            /* inserts a country object to the database table 'Country_Details' only
             * 
             * @Author: shibasis sengupta
            */
            if (cObj == null)
                throw (new CustomExceptions.invalidParamException("Empty Country Object sent to method Country.insertCountryDB"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + Country.COUNTRY_TABLE
                + " ("
                + Country.COUNTRY_COL_COUNTRY_ID + ","
                + Country.COUNTRY_COL_COUNTRY_NAME +  ")"
                + "values (" + "'"+cObj.getCountryId()+ "'"+","
                +"'"+cObj.getCountryName()+"'"
                ;
            Connections cn = new Connections();

                     //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            
            return rowsAffected;

        }
        /// <summary>
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the country id 
        /// the third parameter contains the type of operation
        /// a delete operation will have a  cascading effect on any table 'State_Province_Details'
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateCountryDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {

            /* the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the country id 
             * the third parameter contains the type of operation
             * 
             * a delete operation will have a  cascading effect on any table 'State_Province_Details'
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Country.COUNTRY_COL_COUNTRY_ID, out whereClauseCheck) )
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Country.updateCountryDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Country.updateCountryDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Country.updateCountryDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Country.COUNTRY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Country.COUNTRY_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(Country.COUNTRY_COL_COUNTRY_NAME, Country.COUNTRY_COL_COUNTRY_NAME_TYPE);
            chkDataType.Add(Country.COUNTRY_COL_COUNTRY_ID,Country.COUNTRY_COL_COUNTRY_ID_TYPE);
         
            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Country.updateCountryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : "");counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Country.updateCountryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : "");counter++;
                }
            }

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
    

        }

    }
    /// <summary>
    /// Representative of the database table 'Currency_Details'
    /// </summary>
    public class Currency{
        private String currencyId;
        private String currencyName;

        public const String CURRENCY_TABLE = "Currency_Details";

        private static String sessionUser = "";

        public const String CURRENCY_COL_CURRENCY_ID = "currency_id";
        public const String CURRENCY_COL_CURRENCY_NAME = "currency_Name";
        public const String CURRENCY_COL_COUNTRY_ID = "country_id";

        public const String CURRENCY_COL_CURRENCY_ID_TYPE = Connections.STRING_TYPE;
        public const String CURRENCY_COL_CURRENCY_NAME_TYPE = Connections.STRING_TYPE;
        public const String CURRENCY_COL_COUNTRY_ID_TYPE = Connections.STRING_TYPE;

        public String getCurrencyId()
        {
            return currencyId ;
        }

        public void setCurrencyId(String curr)
        {
            currencyId =curr;
        }

        public String getCurrencyName()
        {
            return currencyName;
        }

        public void setCurrencyName(String cName)
        {
            currencyName =cName ;
        }
        /// <summary>
        /// This method returns an arraylist containing only the names of all the currencies
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllCurrencyNamesDB()
        {
            Connections cn = new Connections();
            String query = "select " + Currency.CURRENCY_COL_CURRENCY_ID +
                "," + Currency.CURRENCY_COL_CURRENCY_NAME +
                " from " + Currency.CURRENCY_TABLE ;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList allCurrNm = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                allCurrNm.Add(dr[1].ToString());
            }
            cn.disconnect();
            return allCurrNm;

        }
        /// <summary>
        /// Get all currency objects from database.The key is the respective currency id.
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, Currency> getAllCurrencyDetailsDB()
        {
            Connections cn = new Connections();
            String query = "select " + Currency.CURRENCY_COL_CURRENCY_ID +
                "," + Currency.CURRENCY_COL_CURRENCY_NAME +
                " from " + Currency.CURRENCY_TABLE ;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            
            Dictionary<String, Currency> currObj = new Dictionary<string, Currency>();

            foreach (DataRow dr in dt.Rows)
            {
                Currency tempCurr = new Currency();

                tempCurr.setCurrencyId(dr[0].ToString());
                tempCurr.setCurrencyName(dr[1].ToString());
                currObj.Add(tempCurr.getCurrencyId(), tempCurr);
                
            }
            cn.disconnect();
            return currObj;
        }

        public static Currency getCurrencybyIdDB(String currId)
        {
            if (currId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Currency Id sent to Currency.getCurrencybyIdDB"));

            Connections cn = new Connections();
            String query = "select " + Currency.CURRENCY_COL_CURRENCY_ID +
                "," + Currency.CURRENCY_COL_CURRENCY_NAME +
                " from " + Currency.CURRENCY_TABLE +
                " where " + Currency.CURRENCY_COL_CURRENCY_ID + "='" + currId.Trim() + "'" +
                 " order by " + Currency.CURRENCY_COL_CURRENCY_ID;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Currency tempCurr = new Currency();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempCurr.setCurrencyId(dr[0].ToString());
                    tempCurr.setCurrencyName(dr[1].ToString());
                }
            cn.disconnect();
            return tempCurr;

        }

        /// <summary>
        /// this method inserts in table 'Currency_Details' ONLY the currency-country details
        /// </summary>
        /// <param name="cId"></param>
        /// <param name="curr"></param>
        /// <returns></returns>
        public static int insertCurrencyforCountryDB(String cId, ArrayList curr)
        {
            
            /* this method inserts in table 'Currency_Details' ONLY the currency-country details
             * 
             * @Author: shibasis sengupta
            */
            
            if (curr.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty currency list sent to method Currency.insertCurrencyforCountryDB"));

            if (cId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Country Id  string sent to method Currency.insertCurrencyforCountryDB"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + Currency.CURRENCY_TABLE
                + " ("
                + Currency.CURRENCY_COL_COUNTRY_ID+","
                + Currency.CURRENCY_COL_CURRENCY_ID + ","
                + Currency.CURRENCY_COL_CURRENCY_NAME  + ")"
                + "values (" + "'"+cId.Trim() +"'"+ ",";
            Connections cn = new Connections();

            for (int i = 0; i < curr.Count; i++)
            {
                Currency currObj = (Currency)curr[i];

                insertCmd = insertCmd + "'" +currObj.getCurrencyId()  + "'," + "'" +
                currObj.getCurrencyName()+ "'";

                insertCmd += ")";

                //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            return rowsAffected;

        }
        /// <summary>
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the country id OR
        /// the currency id
        /// the third parameter contains the type of operation
        /// a delete operation will have a NO cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>

        public static int updateCurrencyforCountryDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the country id OR
             * the currency id
             * the third parameter contains the type of operation
             * 
             * a delete operation will have a NO cascading effect on any table
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Currency.CURRENCY_COL_COUNTRY_ID, out whereClauseCheck) && !whereClause.TryGetValue(Currency.CURRENCY_COL_CURRENCY_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Currency.updateCurrencyforCountryDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Currency.updateCurrencyforCountryDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Currency.updateCurrencyforCountryDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Currency.CURRENCY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Currency.CURRENCY_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(Currency.CURRENCY_COL_CURRENCY_NAME, Currency.CURRENCY_COL_CURRENCY_NAME_TYPE);
            chkDataType.Add(Currency.CURRENCY_COL_CURRENCY_ID, Currency.CURRENCY_COL_CURRENCY_ID_TYPE);
            chkDataType.Add(Currency.CURRENCY_COL_COUNTRY_ID, Currency.CURRENCY_COL_COUNTRY_ID_TYPE);



            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Currency.updateCurrencyforCountryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : "");counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Currency.updateCurrencyforCountryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : "");counter++;
                }
            }

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
    
        }

       

                        
    }
    /// <summary>
    /// one registered shop/business can have multiple stores 
    /// each of these stores can be represented by this class
    /// the respective main business can be represented by the class 'MainBusinessEntity'
    /// this class is representative of the database table 'Shop_User_Addr_Details'
    /// </summary>
    public class subBusinessEntity
    {
        /* one registered shop/business can have multiple stores 
         * each of these stores can be represented by this class
         * the respective main business can be represented by the class 'MainBusinessEntity'
         * 
         * this class is representative of the database table 'Shop_User_Addr_Details'
         * 
         * @Author: shibasis sengupta
        */

        private String subEntityId;
        private String subEntityName;
        private String addrLine1;
        private String localityId;
        private String subPhNo;
        private String subEmailId;
        private String subWebSite;
        private String subRegstrNo;
        private String baseCurrencyId;
        private String contactName;
        private String mainBusinessId;

        public const String SUB_BUSINESS_ENTITY_TABLE = "Shop_User_Addr_Details";

        private static String sessionUser = "";

        public const String SUB_BUSINESS_COL_ADDR_LINE1 = "Addr_Line1";
        public const String SUB_BUSINESS_COL_LOCALITY_ID = "Locality_Id";
        public const String SUB_BUSINESS_COL_MOBILE_NO = "Mobile_No";
        public const String SUB_BUSINESS_COL_CONTACT_NAME = "Contact_Name";
        public const String SUB_BUSINESS_COL_EMAIL_ID = "Email";
        public const String SUB_BUSINESS_COL_WEBSITE = "WebSite";
        public const String SUB_BUSINESS_COL_REGSTR_NO = "Regstr_No";
        public const String SUB_BUSINESS_COL_BASE_CURR = "Base_Currency_Code";
        public const String SUB_BUSINESS_COL_CHAIN_ID = "Chain_id";
        public const String SUB_BUSINESS_COL_CHAIN_NAME = "Chain_Name";
        public const String SUB_BUSINESS_COL_BUSINESS_ID = "Cmp_Usr_Shop_id";

        public const String SUB_BUSINESS_COL_ADDR_LINE1_TYPE = Connections.STRING_TYPE;
        public const String SUB_BUSINESS_COL_LOCALITY_ID_TYPE = Connections.STRING_TYPE;
        public const String SUB_BUSINESS_COL_MOBILE_NO_TYPE = Connections.STRING_TYPE;
        public const String SUB_BUSINESS_COL_CONTACT_NAME_TYPE = Connections.STRING_TYPE;
        public const String SUB_BUSINESS_COL_EMAIL_ID_TYPE = Connections.STRING_TYPE;
        public const String SUB_BUSINESS_COL_WEBSITE_TYPE = Connections.STRING_TYPE;
        public const String SUB_BUSINESS_COL_REGSTR_NO_TYPE = Connections.STRING_TYPE;
        public const String SUB_BUSINESS_COL_BASE_CURR_TYPE = Connections.STRING_TYPE;
        public const String SUB_BUSINESS_COL_CHAIN_ID_TYPE = Connections.STRING_TYPE;
        public const String SUB_BUSINESS_COL_CHAIN_NAME_TYPE = Connections.STRING_TYPE;
        public const String SUB_BUSINESS_COL_BUSINESS_ID_TYPE = Connections.STRING_TYPE;

        public String getSubEntityId()
        {
            return this.subEntityId;
        }

        public void setSubEntityId(String sId)
        {
            this.subEntityId = sId;
        }

        public String getSubEntityName()
        {
            return this.subEntityName;
        }

        public void setSubEntityName(String sName)
        {
            this.subEntityName = sName;
        }

        public String getAddrLine1()
        {
            return this.addrLine1;
        }
        
        public void setAddrLine1(String addr1)
        {
            this.addrLine1 = addr1;
        }

        public String getLocalityId()
        {
            return this.localityId;
        }

        public void setLocalityId(String lId)
        {
            this.localityId = lId;
        }

        public String getSubPhNo()
        {
            return this.subPhNo;
        }

        public void setSubPhNo(String pNo)
        {
            this.subPhNo = pNo;
        }

        public String getSubEmailId()
        {
            return this.subEmailId;
        }

        public void setSubEmailId(String eId)
        {
            this.subEmailId = eId;
        }

        public String getSubWebSite()
        {
            return this.subWebSite;
        }

        public void setSubWebSite(String web)
        {
            this.subWebSite = web;
        }

        public String getSubRegstrNo()
        {
            return this.subRegstrNo;
        }

        public void setSubRegstrNo(String regstr)
        {
            this.subRegstrNo = regstr;
        }

        public String getBaseCurrencyId()
        {
            return this.baseCurrencyId;
        }

        public void setBaseCurrencyId(String bcId)
        {
            this.baseCurrencyId = bcId;
        }

        public String getContactName()
        {
            return this.contactName;
        }

        public void setContactName(String cName)
        {
            this.contactName = cName;
        }

        public String getMainBusinessId()
        {
            return mainBusinessId;
        }

        public void setMainBusinessId(String mBID)
        {
            mainBusinessId = mBID;
        }

        /// <summary>
        /// for a given subBusinessEntity id, returns the respective object from the database
        /// this id is used as a 'Chain_Id' in the database table 'Shop_User_Addr_Details'
        /// </summary>
        /// <param name="sId"></param>
        /// <returns></returns>
        public static subBusinessEntity  getSubBusinessEntitybyIdDB(String sId)
        {
            /* for a given subBusinessEntity id, returns the respective object from the database
             * this id is used as a 'Chain_Id' in the database table 'Shop_User_Addr_Details'
             * 
             * @Author: shibasis sengupta
            */
            if (sId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty sub business entity Id sent to subBusinessEntity.getSubBusinessEntitybyIdDB"));

            Connections cn = new Connections();
            String query = "select " + subBusinessEntity.SUB_BUSINESS_COL_CHAIN_ID +
                "," + subBusinessEntity.SUB_BUSINESS_COL_CHAIN_NAME +
                 "," + subBusinessEntity.SUB_BUSINESS_COL_ADDR_LINE1 +
                  "," + subBusinessEntity.SUB_BUSINESS_COL_BASE_CURR +
                   "," + subBusinessEntity.SUB_BUSINESS_COL_CONTACT_NAME +
                    "," + subBusinessEntity.SUB_BUSINESS_COL_EMAIL_ID +
                     "," + subBusinessEntity.SUB_BUSINESS_COL_LOCALITY_ID +
                      "," + subBusinessEntity.SUB_BUSINESS_COL_MOBILE_NO +
                      "," + subBusinessEntity.SUB_BUSINESS_COL_REGSTR_NO +
                      "," + subBusinessEntity.SUB_BUSINESS_COL_WEBSITE +
                      "," + subBusinessEntity.SUB_BUSINESS_COL_BUSINESS_ID +
                " from " + subBusinessEntity.SUB_BUSINESS_ENTITY_TABLE +
                " where " + subBusinessEntity.SUB_BUSINESS_COL_CHAIN_ID + "='" + sId.Trim() + "'";
                 

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            subBusinessEntity tempEntity = new subBusinessEntity();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempEntity.setSubEntityId(dr[0].ToString());
                    tempEntity.setSubEntityName(dr[1].ToString());
                    tempEntity.setAddrLine1(dr[2].ToString());
                    tempEntity.setBaseCurrencyId(dr[3].ToString());
                    tempEntity.setContactName(dr[4].ToString());
                    tempEntity.setSubEmailId(dr[5].ToString());
                    tempEntity.setLocalityId(dr[6].ToString());
                    tempEntity.setSubPhNo(dr[7].ToString());
                    tempEntity.setSubRegstrNo(dr[8].ToString());
                    tempEntity.setSubWebSite(dr[9].ToString());
                    tempEntity.setMainBusinessId(dr[10].ToString());
                }
            cn.disconnect();
            return tempEntity;

        }
        /// <summary>
        /// inserts the passed subbusinessentity object into the database table 'Shop_User_Addr_Details'
        /// there is a chance of foreign key violation error if the passed 'locality_id' and/or the 'currency_id' does
        /// not exist in the parent database tables
        /// </summary>
        /// <param name="subEnt"></param>
        /// <returns></returns>
        public static int insertSubBusinessEntityDB(ArrayList subEnt)
        {
            /* inserts the passed subbusinessentity object into the database table 'Shop_User_Addr_Details'
             * there is a chance of foreign key violation error if the passed 'locality_id' and/or the 'currency_id' does
             * not exist in the parent database tables
             * 
             * @Author: shibasis sengupta
            */

            if (subEnt.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty SubBusinessEntity list sent to method subBusinessEntity.insertSubBusinessEntityDB"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + subBusinessEntity.SUB_BUSINESS_ENTITY_TABLE
                + " ("
                + subBusinessEntity.SUB_BUSINESS_COL_ADDR_LINE1 + ","
                + subBusinessEntity.SUB_BUSINESS_COL_BASE_CURR + ","
                + subBusinessEntity.SUB_BUSINESS_COL_CHAIN_ID + ","
                + subBusinessEntity.SUB_BUSINESS_COL_CHAIN_NAME + ","
                + subBusinessEntity.SUB_BUSINESS_COL_CONTACT_NAME + ","
                + subBusinessEntity.SUB_BUSINESS_COL_EMAIL_ID + ","
                + subBusinessEntity.SUB_BUSINESS_COL_LOCALITY_ID + ","
                + subBusinessEntity.SUB_BUSINESS_COL_MOBILE_NO + ","
                + subBusinessEntity.SUB_BUSINESS_COL_REGSTR_NO + ","
                + subBusinessEntity.SUB_BUSINESS_COL_WEBSITE +","
                +subBusinessEntity.SUB_BUSINESS_COL_BUSINESS_ID+")"
                + "values (" ;
            Connections cn = new Connections();

            for (int i = 0; i < subEnt.Count; i++)
            {
                subBusinessEntity  currObj = (subBusinessEntity )subEnt[i];

                insertCmd = insertCmd + "'" 
                    + currObj.getAddrLine1() +  "'" +"," 
                    + "'" +currObj.getBaseCurrencyId()+ "'"+ "," 
                    +"'" +currObj.getSubEntityId()+"'"+"," 
                   +"'" +currObj.getSubEntityName()+"'"+ "," 
                    +"'" +currObj.getContactName()+"'"+ "," 
                    +"'" +currObj.getSubEmailId()+"'"+ "," 
                     +"'" +currObj.getLocalityId()+"'"+ "," 
                    +"'" +currObj.getSubPhNo()+"'"+ "," 
                    +"'" +currObj.getSubRegstrNo()+"'"+ ","
                    + "'" + currObj.getSubWebSite() + "'" + ","
                    + "'" + currObj.getMainBusinessId() + "'" ;

                insertCmd += ")";

                //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            return rowsAffected;

        }
        /// <summary>
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the subBusinessEntity id
        /// the third parameter contains the type of operation
        /// a delete operation will NOT have a  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateSubBusinessEntityDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the subBusinessEntity id 
             * the third parameter contains the type of operation
             * 
             * a delete operation will NOT have a  cascading effect on any table 
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(subBusinessEntity.SUB_BUSINESS_COL_CHAIN_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - subBusinessEntity.updateSubBusinessEntityDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to subBusinessEntity.updateSubBusinessEntityDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to subBusinessEntity.updateSubBusinessEntityDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + subBusinessEntity.SUB_BUSINESS_ENTITY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + subBusinessEntity.SUB_BUSINESS_ENTITY_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_WEBSITE, subBusinessEntity.SUB_BUSINESS_COL_WEBSITE_TYPE);
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_REGSTR_NO, subBusinessEntity.SUB_BUSINESS_COL_REGSTR_NO_TYPE);
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_MOBILE_NO, subBusinessEntity.SUB_BUSINESS_COL_MOBILE_NO_TYPE);
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_LOCALITY_ID, subBusinessEntity.SUB_BUSINESS_COL_LOCALITY_ID_TYPE);
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_EMAIL_ID, subBusinessEntity.SUB_BUSINESS_COL_EMAIL_ID_TYPE);
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_CONTACT_NAME, subBusinessEntity.SUB_BUSINESS_COL_CONTACT_NAME_TYPE);
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_CHAIN_NAME, subBusinessEntity.SUB_BUSINESS_COL_CHAIN_NAME_TYPE);
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_CHAIN_ID, subBusinessEntity.SUB_BUSINESS_COL_CHAIN_ID_TYPE);
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_BASE_CURR, subBusinessEntity.SUB_BUSINESS_COL_BASE_CURR_TYPE);
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_ADDR_LINE1, subBusinessEntity.SUB_BUSINESS_COL_ADDR_LINE1_TYPE);
            chkDataType.Add(subBusinessEntity.SUB_BUSINESS_COL_BUSINESS_ID, subBusinessEntity.SUB_BUSINESS_COL_BUSINESS_ID_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to subBusinessEntity.updateSubBusinessEntityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : "");counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to subBusinessEntity.updateSubBusinessEntityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : "");counter++;
                }
            }

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }
        /// <summary>
        /// for a given chain Id, it will return the respective parent object from the table 'Shop_User_Details'
        /// this method only returns the following details of the MainBusinessEntity object -
        /// entityId
        /// entityName
        /// phNo
        /// emailId
        /// webSite
        /// desc
        /// owner name
        /// </summary>
        /// <param name="chId"></param>
        /// <returns></returns>
        public static MainBusinessEntity getMainBusinessforSubBusinessbyIdDB(String chId)
        {
            /* for a given chain Id, it will return the respective parent object from the table 'Shop_User_Details'
             * the returned object will only contain the following details -
             * entityId,entityName,phNo,emailId,webSite,desc,owner name
             * 
             * @Author: shibasis sengupta
            */

            if (chId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty subBusinessEntity Id Passed to subBusinessEntity.getMainBusinessforSubBusinessbyIdDB"));


            Connections cn = new Connections();

            String cmd = " select m." + MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_DESC +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_EMAIL_ID +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_IND_CHAIN +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_MOBILE_NO +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_OWNER_NAME +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_SHOP_NAME +
                                ",m." + MainBusinessEntity.MAIN_BUSINESS_COL_WEBSITE +
                                " from " + MainBusinessEntity.MAIN_BUSINESS_ENTITY_TABLE + " m," + subBusinessEntity.SUB_BUSINESS_ENTITY_TABLE + " n" +
                                " where " + "m." + MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID + "=" + "n." + subBusinessEntity.SUB_BUSINESS_COL_BUSINESS_ID  ;

            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];
            MainBusinessEntity tempMainBusiness = new MainBusinessEntity();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempMainBusiness.setEntityId(dr[0].ToString());
                    tempMainBusiness.setDesc(dr[1].ToString());
                    tempMainBusiness.setEmailId(dr[2].ToString());
                    tempMainBusiness.setIndChain(dr[3].ToString());
                    tempMainBusiness.setPhNo(dr[4].ToString());
                    tempMainBusiness.setOwnerName(dr[5].ToString());
                    tempMainBusiness.setEntityName(dr[6].ToString());
                    tempMainBusiness.setWebSite(dr[7].ToString());

                }
            cn.disconnect();
            return tempMainBusiness;
            
        }

    }
    /// <summary>
    /// this class is mainly representative of the databae table 'Userid_Pass_User_Map'
    /// </summary>
    public class userDetails
    {
        private String userId;
        private String password;
        private String privilege;
        private String subEntityId;   //This represents the chain id
        private String mainEntityId;  //This represents the main business id
        private String emailId;
        private String contactNo;
        private String deptId;
        private String name;
        private String reportsTo;
        private String salt;
        private String theme;

        private static String sessionUser = "";

        public const String USER_DETAILS_TABLE = "Userid_Pass_User_Map";

        public const String USER_DETAILS_COL_USERID = "Usr_id";
        public const String USER_DETAILS_COL_PASSWORD = "Password";
        public const String USER_DETAILS_COL_PRIVILEGE = "Privilege";
        public const String USER_DETAILS_COL_BUSINESS_ID = "Cmp_Usr_Shop_id";
        public const String USER_DETAILS_COL_CHAIN_ID = "Chain_id";
        public const String USER_DETAILS_COL_EMAIL_ID = "Email_Id";
        public const String USER_DETAILS_COL_CONTACT_NO = "ContactNo";
        public const String USER_DETAILS_COL_DEPT_ID = "Department_Id";
        public const String USER_DETAILS_COL_NAME = "Name";
        public const String USER_DETAILS_COL_REPORTS_TO = "Reports_To";
        public const String USER_DETAILS_COL_SALT = "Salt";
        public const String USER_DETAILS_COL_THEME = "Theme";

        public const String USER_DETAILS_COL_USERID_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_PASSWORD_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_PRIVILEGE_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_BUSINESS_ID_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_CHAIN_ID_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_EMAIL_ID_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_CONTACT_NO_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_DEPT_ID_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_NAME_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_REPORTS_TO_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_SALT_TYPE = Connections.STRING_TYPE;
        public const String USER_DETAILS_COL_THEME_TYPE = Connections.STRING_TYPE;

        public String getTheme()
        {
            return this.theme;
        }
        public void setTheme(String thm)
        {
            theme = thm;
        }
        public String getSalt()
        {
            return this.salt;
        }
        public void setSalt(String s)
        {
            salt = s;
        }
        public String getReportsTo()
        {
            return this.reportsTo;
        }
        public void setReportsTo(String rTo)
        {
            this.reportsTo = rTo;
        }
        public String getUserId()
        {
            return userId;
        }

        public void setUserId(String uId)
        {
            userId = uId;
        }

        public String getPassword()
        {
            return password;
        }

        public void setPassword(String pass)
        {
            password = pass;
        }

        public String getPrivilege()
        {
            return privilege;
        }

        public void setPrivilege(String prv)
        {
            privilege = prv;
        }

        public String getSubEntityId()
        {
            return subEntityId;
        }

        public void setSubEntityId(String sEid)
        {
            subEntityId = sEid;
        }

        public String getMainEntityId()
        {
            return mainEntityId;
        }

        public void setMainEntityId(String mEid)
        {
            mainEntityId = mEid;
        }

        public String getEmailId()
        {
            return this.emailId;
        }

        public void setEmailId(String emId)
        {
            this.emailId = emId;
        }

        public String getContactNo()
        {
            return this.contactNo;
        }

        public void setContactNo(String cNo)
        {
            this.contactNo = cNo;
        }

        public String getDeptId()
        {
            return this.deptId;
        }

        public void setDeptId(String dpId)
        {
            this.deptId = dpId;
        }

        public String getName()
        {
            return this.name;
        }

        public void setName(String nm)
        {
            this.name = nm;
        }
        /// <summary>
        /// for a given userId returns the respective userDetails object from database table 'Userid_Pass_User_Map'
        /// except the password
        /// </summary>
        /// <param name="uId"></param>
        /// <returns></returns>
        public static userDetails getUserDetailsbyIdDB(String uId)
        {
            /* for a given userId returns the respective userDetails object from database table 'Userid_Pass_User_Map'
             * it does to return the password in returned object
             * @Author: shibasis sengupta
            */

            if (uId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty user Id sent to userDetails.getUserDetailsbyId"));

            Connections cn = new Connections();
            String query = "select " + userDetails.USER_DETAILS_COL_BUSINESS_ID +
                "," + userDetails.USER_DETAILS_COL_CHAIN_ID +
                "," + userDetails.USER_DETAILS_COL_PRIVILEGE +
                "," + userDetails.USER_DETAILS_COL_USERID +
                "," + userDetails.USER_DETAILS_COL_CONTACT_NO +
                "," + userDetails.USER_DETAILS_COL_DEPT_ID +
                "," + userDetails.USER_DETAILS_COL_EMAIL_ID +
                "," + userDetails.USER_DETAILS_COL_NAME +
                "," + userDetails.USER_DETAILS_COL_REPORTS_TO + "," + userDetails.USER_DETAILS_COL_SALT +
                "," + userDetails.USER_DETAILS_COL_THEME +
                " from " + userDetails.USER_DETAILS_TABLE +
                " where " + userDetails.USER_DETAILS_COL_USERID + "='" + uId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            userDetails tempUser = new userDetails();

            foreach (DataRow dr in dt.Rows)
            {
                tempUser.setMainEntityId(dr[0].ToString());
                tempUser.setSubEntityId(dr[1].ToString());
                tempUser.setPrivilege(dr[2].ToString());
                tempUser.setUserId(dr[3].ToString());
                tempUser.setPassword("");
                tempUser.setContactNo(dr[4].ToString());
                tempUser.setDeptId(dr[5].ToString());
                tempUser.setEmailId(dr[6].ToString());
                tempUser.setName(dr[7].ToString());
                tempUser.setReportsTo(dr[8].ToString());
                tempUser.setSalt(dr[9].ToString());
                tempUser.setTheme(dr[10].ToString());
            }
            cn.disconnect();
            return tempUser;

        }
        /// <summary>
        /// for a given userId and entity id returns the respective userDetails object from database table 'Userid_Pass_User_Map'
        /// with the password
        /// </summary>
        /// <param name="uId"></param>
        /// <returns></returns>
        public static userDetails getUserDetailsbyIdDB(String uId, String entId)
        {
            /* for a given userId returns the respective userDetails object from database table 'Userid_Pass_User_Map'
             * it does to return the password in returned object
             * @Author: shibasis sengupta
            */

            if (uId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty user Id sent to userDetails.getUserDetailsbyId"));

            Connections cn = new Connections();
            String query = "select " + userDetails.USER_DETAILS_COL_BUSINESS_ID +
                "," + userDetails.USER_DETAILS_COL_CHAIN_ID +
                "," + userDetails.USER_DETAILS_COL_PRIVILEGE +
                "," + userDetails.USER_DETAILS_COL_USERID +
                "," + userDetails.USER_DETAILS_COL_CONTACT_NO +
                "," + userDetails.USER_DETAILS_COL_DEPT_ID +
                "," + userDetails.USER_DETAILS_COL_EMAIL_ID +
                "," + userDetails.USER_DETAILS_COL_NAME +
                "," + userDetails.USER_DETAILS_COL_PASSWORD +
                "," + userDetails.USER_DETAILS_COL_REPORTS_TO + "," + userDetails.USER_DETAILS_COL_SALT +
                "," + userDetails.USER_DETAILS_COL_THEME +
                " from " + userDetails.USER_DETAILS_TABLE +
                " where " + userDetails.USER_DETAILS_COL_USERID + "='" + uId.Trim() + "'" +
                " and " + userDetails.USER_DETAILS_COL_BUSINESS_ID + "='" + entId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            userDetails tempUser = new userDetails();

            foreach (DataRow dr in dt.Rows)
            {
                tempUser.setMainEntityId(dr[0].ToString());
                tempUser.setSubEntityId(dr[1].ToString());
                tempUser.setPrivilege(dr[2].ToString());
                tempUser.setUserId(dr[3].ToString());
                tempUser.setContactNo(dr[4].ToString());
                tempUser.setDeptId(dr[5].ToString());
                tempUser.setEmailId(dr[6].ToString());
                tempUser.setName(dr[7].ToString());
                tempUser.setPassword(dr[8].ToString());
                tempUser.setReportsTo(dr[9].ToString());
                tempUser.setSalt(dr[10].ToString());
                tempUser.setTheme(dr[11].ToString());
            }
            cn.disconnect();
            return tempUser;

        }
        /// <summary>
        /// used for authentication of a user 
        /// </summary>
        /// <param name="uId"></param>
        /// <param name="pass"></param>
        /// <returns></returns>
        public Boolean authenticateUserDB(String uId, String pass)
        {
            /* used for authentication of a user
             * 
             * @Author: shibasis sengupta
             */

            if (uId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty user Id sent to userDetails.authenticateUser"));

            if (pass.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty password sent to userDetails.authenticateUser"));

            Connections cn = new Connections();
            String query = "select " + userDetails.USER_DETAILS_COL_USERID +
                " from " + userDetails.USER_DETAILS_TABLE +
                " where " + userDetails.USER_DETAILS_COL_USERID + "='" + uId.Trim() + "'" +
                " and " + userDetails.USER_DETAILS_COL_PASSWORD + "='" + pass.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            /*There is no direct wat in c# to know the size of the returned dataset which should have
             * solved the purpose in this case
            */

            int size = 0;

            foreach (DataRow dr in dt.Rows)
            {
                size++;
            }
            cn.disconnect();
            return (size > 0 ? true : false);

        }
        /// <summary>
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the user id 
        /// the third parameter contains the type of operation
        /// a delete operation will have a NO cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateUserDetailsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the user id 
             * 
             * the third parameter contains the type of operation
             * 
             * a delete operation will have a NO cascading effect on any table
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(userDetails.USER_DETAILS_COL_USERID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - userDetails.updateUserDetails"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to userDetails.updateUserDetails is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to userDetails.updateUserDetails is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + userDetails.USER_DETAILS_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + userDetails.USER_DETAILS_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            //Though changin userId should not be allowed, leaving this restriction to be made in front end
            chkDataType.Add(userDetails.USER_DETAILS_COL_USERID, userDetails.USER_DETAILS_COL_USERID_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_PRIVILEGE, userDetails.USER_DETAILS_COL_PRIVILEGE_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_PASSWORD, userDetails.USER_DETAILS_COL_PASSWORD_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_CHAIN_ID, userDetails.USER_DETAILS_COL_CHAIN_ID_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_BUSINESS_ID, userDetails.USER_DETAILS_COL_BUSINESS_ID_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_EMAIL_ID, userDetails.USER_DETAILS_COL_EMAIL_ID_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_DEPT_ID, userDetails.USER_DETAILS_COL_DEPT_ID_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_CONTACT_NO, userDetails.USER_DETAILS_COL_CONTACT_NO_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_NAME, userDetails.USER_DETAILS_COL_NAME_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_REPORTS_TO, userDetails.USER_DETAILS_COL_REPORTS_TO_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_SALT, userDetails.USER_DETAILS_COL_SALT_TYPE);
            chkDataType.Add(userDetails.USER_DETAILS_COL_THEME, userDetails.USER_DETAILS_COL_THEME_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to userDetails.updateUserDetails" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to userDetails.updateUserDetails" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;


        }
        /// <summary>
        /// inserts the userDetails object into the database
        /// </summary>
        /// <param name="uD"></param>
        /// <returns></returns>
        public static int insertUserDetailsDB(userDetails uD)
        {
            /* inserts the userDetails object into the database
             * 
             * @Author: shibasis sengupta
            */

            if (uD.getUserId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty User Id  string sent to method userDetails.insertUserDetails"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + userDetails.USER_DETAILS_TABLE
                + " ("
                + userDetails.USER_DETAILS_COL_USERID + ","
                + userDetails.USER_DETAILS_COL_PASSWORD + ","
                + userDetails.USER_DETAILS_COL_PRIVILEGE + ","
                + userDetails.USER_DETAILS_COL_BUSINESS_ID + ","
                + userDetails.USER_DETAILS_COL_CONTACT_NO + ","
                + userDetails.USER_DETAILS_COL_DEPT_ID + ","
                + userDetails.USER_DETAILS_COL_EMAIL_ID + ","
                + userDetails.USER_DETAILS_COL_NAME + ","
                + userDetails.USER_DETAILS_COL_REPORTS_TO + ","
                + userDetails.USER_DETAILS_COL_SALT + ","
                + userDetails.USER_DETAILS_COL_THEME + ","
                + userDetails.USER_DETAILS_COL_CHAIN_ID + ")"
                + "values (" + "'" + uD.getUserId().Trim() + "'" + ",";
            Connections cn = new Connections();


            insertCmd = insertCmd + "'" + uD.getPassword() + "'," + "'" +
            uD.getPrivilege() + "'" + "," + "'" +
            uD.getMainEntityId() + "'" + "," + "'" +
            uD.getContactNo() + "'" + "," + "'" +
            uD.getDeptId() + "'" + "," + "'" +
            uD.getEmailId() + "'" + "," + "'" +
            uD.getName() + "'" + "," + "'" +
            uD.getReportsTo() + "'" + "," + "'" +
            uD.getSalt() + "'" + "," + "'" +
            uD.getTheme() + "'" + "," + "'" +
            uD.getSubEntityId() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            return rowsAffected;

        }

        public Dictionary<String, userDetails> getAllReportingUserDBRecursive(Dictionary<String, userDetails> reportingDict, String entId, String uId)
        {
            String query = "select " + userDetails.USER_DETAILS_COL_BUSINESS_ID +
    "," + userDetails.USER_DETAILS_COL_CHAIN_ID +
    "," + userDetails.USER_DETAILS_COL_PRIVILEGE +
    "," + userDetails.USER_DETAILS_COL_USERID +
    "," + userDetails.USER_DETAILS_COL_CONTACT_NO +
    "," + userDetails.USER_DETAILS_COL_DEPT_ID +
    "," + userDetails.USER_DETAILS_COL_EMAIL_ID +
    "," + userDetails.USER_DETAILS_COL_NAME +
    "," + userDetails.USER_DETAILS_COL_REPORTS_TO + "," + userDetails.USER_DETAILS_COL_SALT +
    " from " + userDetails.USER_DETAILS_TABLE +
    " where " + userDetails.USER_DETAILS_COL_REPORTS_TO + "='" + uId.Trim() + "'" + " and " +
    userDetails.USER_DETAILS_COL_BUSINESS_ID + "='" + entId.Trim() + "'";

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            if (dt.Rows.Count > 0)
                foreach (DataRow dr in dt.Rows)
                {
                    reportingDict = getAllReportingUserDBRecursive(reportingDict, entId, dr[3].ToString());

                    userDetails tempUser = new userDetails();
                    tempUser.setMainEntityId(dr[0].ToString());
                    tempUser.setSubEntityId(dr[1].ToString());
                    tempUser.setPrivilege(dr[2].ToString());
                    tempUser.setUserId(dr[3].ToString());
                    tempUser.setPassword("");
                    tempUser.setContactNo(dr[4].ToString());
                    tempUser.setDeptId(dr[5].ToString());
                    tempUser.setEmailId(dr[6].ToString());
                    tempUser.setName(dr[7].ToString());
                    tempUser.setReportsTo(dr[8].ToString());
                    tempUser.setSalt(dr[9].ToString());

                    reportingDict.Add(tempUser.getUserId(), tempUser);
                }

            cn.disconnect();
            return reportingDict;

        }
        /// <summary>
        /// For a given entity id and user id, this method returns all reporting users details
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="uId"></param>
        /// <returns></returns>
        public static Dictionary<String, userDetails> getAllReportingUserDB(String entId, String uId)
        {
            Connections cn = new Connections();
            String query = "select " + userDetails.USER_DETAILS_COL_BUSINESS_ID +
                "," + userDetails.USER_DETAILS_COL_CHAIN_ID +
                "," + userDetails.USER_DETAILS_COL_PRIVILEGE +
                "," + userDetails.USER_DETAILS_COL_USERID +
                "," + userDetails.USER_DETAILS_COL_CONTACT_NO +
                "," + userDetails.USER_DETAILS_COL_DEPT_ID +
                "," + userDetails.USER_DETAILS_COL_EMAIL_ID +
                "," + userDetails.USER_DETAILS_COL_NAME +
                "," + userDetails.USER_DETAILS_COL_REPORTS_TO + "," + userDetails.USER_DETAILS_COL_SALT +
                " from " + userDetails.USER_DETAILS_TABLE +
                " where " + userDetails.USER_DETAILS_COL_REPORTS_TO + "='" + uId.Trim() + "'" + " and " +
                userDetails.USER_DETAILS_COL_BUSINESS_ID + "='" + entId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, userDetails> reportingDict = new Dictionary<string, userDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                userDetails tempUser = new userDetails();
                tempUser.setMainEntityId(dr[0].ToString());
                tempUser.setSubEntityId(dr[1].ToString());
                tempUser.setPrivilege(dr[2].ToString());
                tempUser.setUserId(dr[3].ToString());
                tempUser.setPassword("");
                tempUser.setContactNo(dr[4].ToString());
                tempUser.setDeptId(dr[5].ToString());
                tempUser.setEmailId(dr[6].ToString());
                tempUser.setName(dr[7].ToString());
                tempUser.setReportsTo(dr[8].ToString());
                tempUser.setSalt(dr[9].ToString());


                reportingDict = new userDetails().getAllReportingUserDBRecursive(reportingDict, entId, dr[3].ToString());

                reportingDict.Add(tempUser.getUserId(), tempUser);
            }
            cn.disconnect();
            return reportingDict;


        }
        /// <summary>
        /// Returns only those user details which are directly reporting to the given user id and not indirectly
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="uId"></param>
        /// <returns></returns>
        public static Dictionary<String, userDetails> getAllDirectReportingUserDB(String entId, String uId)
        {
            Connections cn = new Connections();
            String query = "select " + userDetails.USER_DETAILS_COL_BUSINESS_ID +
                "," + userDetails.USER_DETAILS_COL_CHAIN_ID +
                "," + userDetails.USER_DETAILS_COL_PRIVILEGE +
                "," + userDetails.USER_DETAILS_COL_USERID +
                "," + userDetails.USER_DETAILS_COL_CONTACT_NO +
                "," + userDetails.USER_DETAILS_COL_DEPT_ID +
                "," + userDetails.USER_DETAILS_COL_EMAIL_ID +
                "," + userDetails.USER_DETAILS_COL_NAME +
                "," + userDetails.USER_DETAILS_COL_REPORTS_TO + "," + userDetails.USER_DETAILS_COL_SALT +
                " from " + userDetails.USER_DETAILS_TABLE +
                " where " + userDetails.USER_DETAILS_COL_REPORTS_TO + "='" + uId.Trim() + "'" + " and " +
                userDetails.USER_DETAILS_COL_BUSINESS_ID + "='" + entId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, userDetails> reportingDict = new Dictionary<string, userDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                userDetails tempUser = new userDetails();
                tempUser.setMainEntityId(dr[0].ToString());
                tempUser.setSubEntityId(dr[1].ToString());
                tempUser.setPrivilege(dr[2].ToString());
                tempUser.setUserId(dr[3].ToString());
                tempUser.setPassword("");
                tempUser.setContactNo(dr[4].ToString());
                tempUser.setDeptId(dr[5].ToString());
                tempUser.setEmailId(dr[6].ToString());
                tempUser.setName(dr[7].ToString());
                tempUser.setReportsTo(dr[8].ToString());
                tempUser.setSalt(dr[9].ToString());


                //reportingDict = new userDetails().getAllReportingUserDBRecursive(reportingDict, entId, dr[3].ToString());

                reportingDict.Add(tempUser.getUserId(), tempUser);
            }
            cn.disconnect();
            return reportingDict;


        }
    }
    /// <summary>
    /// this class is representative of the databae object 'Usr_Shop_Desc'
    /// </summary>
    public class businessDescription
    {
        private String descId;
        private String descName;

        private static String sessionUser = "";

        public const String BUSINESS_DESC_TABLE = "Usr_Shop_Desc";

        public const String BUSINESS_DESC_COL_DESC_ID = "Desc_id";
        public const String BUSINESS_DESC_COL_DESC_NAME = "Name";

        public const String BUSINESS_DESC_COL_DESC_ID_TYPE = Connections.STRING_TYPE;
        public const String BUSINESS_DESC_COL_DESC_NAME_TYPE = Connections.STRING_TYPE;

        public String getDescId()
        {
            return descId;
        }

        public void setDescId(String dId)
        {
            descId = dId;
        }

        public String getDescName()
        {
            return descName;
        }

        public void setDescName(String dName)
        {
            descName = dName;
        }
        /// <summary>
        /// an arraylist of description object can be passed to this method
        /// which will be inserted into database
        /// </summary>
        /// <param name="bussDesc"></param>
        public static int insertBusinessDescriptionDB(ArrayList bussDesc)
        {
           
            if (bussDesc.Count ==0)
                throw (new CustomExceptions.invalidParamException("Empty business description list sent to method businessDescription.insertBusinessDescription"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + businessDescription.BUSINESS_DESC_TABLE
                + " ("
                + businessDescription.BUSINESS_DESC_COL_DESC_ID+","
                + businessDescription.BUSINESS_DESC_COL_DESC_NAME+ ")"
                + "values (" ;
            Connections cn = new Connections();

            for (int i = 0; i < bussDesc.Count; i++)
            {
                businessDescription  currObj = (businessDescription )bussDesc[i];

                insertCmd = insertCmd + "'" +currObj.getDescId() + "'," + "'" +
                currObj.getDescName()+ "'";

                insertCmd += ")";

                //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            return rowsAffected;

        }
        /// <summary>
        /// for a given description id, this method returns the respective object from databast table 'Usr_Shop_Desc'
        /// </summary>
        /// <param name="bdId"></param>
        /// <returns></returns>
        public static businessDescription getBusinessDescriptionbyIdDB(String bdId)
        {
            /* for a given description id, this method returns the respective object from databast table 'Usr_Shop_Desc'
             * 
             * @Author: shibasis sengupta
             */ 
            if (bdId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty description Id sent to businessDescription.businessDescription"));

            Connections cn = new Connections();
            String query = "select " + businessDescription.BUSINESS_DESC_COL_DESC_ID +
                "," + businessDescription.BUSINESS_DESC_COL_DESC_NAME +
                " from " + businessDescription.BUSINESS_DESC_TABLE +
                " where " + businessDescription.BUSINESS_DESC_COL_DESC_ID + "='" + bdId.Trim() + "'" ;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            businessDescription tempDesc = new businessDescription();

            foreach (DataRow dr in dt.Rows)
                
                {
                    tempDesc.setDescId(dr[0].ToString());
                    tempDesc.setDescName(dr[1].ToString());
                }
            cn.disconnect();
            return tempDesc;

        }
        /// <summary>
        /// This method returns all objects from databast table 'Usr_Shop_Desc'.
        /// The key is the respective description id.
        /// </summary>
        /// <param name="bdId"></param>
        /// <returns></returns>
        public static Dictionary<String,businessDescription> getAllBusinessDescriptionDB()
        {
            /* for a given description id, this method returns the respective object from databast table 'Usr_Shop_Desc'
             * 
             * @Author: shibasis sengupta
             */
           
            Connections cn = new Connections();
            String query = "select " + businessDescription.BUSINESS_DESC_COL_DESC_ID +
                "," + businessDescription.BUSINESS_DESC_COL_DESC_NAME +
               " from " + businessDescription.BUSINESS_DESC_TABLE;
               

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, businessDescription> descDic = new Dictionary<String, businessDescription>();
            
            foreach (DataRow dr in dt.Rows)
            {
                businessDescription tempDesc = new businessDescription();
                tempDesc.setDescId(dr[0].ToString());
                tempDesc.setDescName(dr[1].ToString());
                descDic.Add(tempDesc.getDescId(), tempDesc);
            }
            cn.disconnect();
            return descDic;

        }
        /// <summary>
        /// description id is mandatory to be passed
        /// a delete operation will NOT have a cascading effect on the dependent tables (e.g Shop_User_Details)
        /// it is highly recommended not to delete any record from this table, rather use the update option
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateBusinessDescriptionDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* the first paramter contains column name - taget value pair
            * the second parameter contains column name - target value as where clause - note that this where clause must contain the description id 
            * the third parameter contains the type of operation
            * 
             * 
            * a delete operation will NOT have a  cascading effect on table 'Shop_User_Details'
            * it is highly recommended not to delete any record from this table, rather use the update option
             * 
            * @Author: shibasis sengupta
           */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(businessDescription.BUSINESS_DESC_COL_DESC_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - businessDescription.updateBusinessDescriptionDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to businessDescription.updateBusinessDescriptionDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to businessDescription.updateBusinessDescriptionDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + businessDescription.BUSINESS_DESC_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + businessDescription.BUSINESS_DESC_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(businessDescription.BUSINESS_DESC_COL_DESC_NAME,businessDescription.BUSINESS_DESC_COL_DESC_NAME_TYPE);
            chkDataType.Add(businessDescription.BUSINESS_DESC_COL_DESC_ID, businessDescription.BUSINESS_DESC_COL_DESC_ID_TYPE);
            


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to businessDescription.updateBusinessDescriptionDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : "");counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to businessDescription.updateBusinessDescriptionDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : "");counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }

    }
    /// <summary>
    /// each image record in the database table 'Shop_Pic_Map' is represented by an object of this class
    /// Multiple images related to an entity like logo/product images can be represented by an object of this type.
    /// </summary>
    public class Image
    {
        private String entityId;
        private String imgId;
        //private byte[] allImages;
        private String imgPath;
        private String imgType;
        private String referenceId;

        private FileUpload fileStream;

        private static String sessionUser = "";

        public const String PICTURE_TABLE = "Shop_Pic_Map";

        public const String PICTURE_COL_BUSINESS_ID = "Cmp_Usr_Shop_id";
        public const String PICTURE_COL_PICTURE_PATH = "image_path";
        public const String PICTURE_COL_PIC_ID = "img_id";
        public const String PICTURE_COL_IMG_TYPE = "img_type";
        public const String PICTURE_COL_REFERENCE_ID = "reference_id";


        public const String PICTURE_COL_BUSINESS_ID_TYPE = Connections.STRING_TYPE;
        public const String PICTURE_COL_PICTURE_TYPE = Connections.STRING_TYPE;
        public const String PICTURE_COL_PIC_ID_TYPE = Connections.STRING_TYPE;
        public const String PICTURE_COL_IMG_TYPE_TYPE = Connections.STRING_TYPE;
        public const String PICTURE_COL_REFERENCE_ID_TYPE = Connections.STRING_TYPE;

        public const String PICTURE_IMG_TYPE_LOGO = "PICTURE_IMG_TYPE_LOGO";
        public const String PICTURE_IMG_TYPE_PRODUCT = "PICTURE_IMG_TYPE_PRODUCT";

        public String getEntityId()
        {
            return entityId;
        }
        public void setEntityId(String eId)
        {
            entityId = eId;
        }   
        public String getImgId()
        {
            return imgId;
        }
        public void setImgId(String img)
        {
            imgId = img;
        }
  
        /// <summary>
        /// This path is the server location
        /// </summary>
        /// <param name="pth"></param>
        public void setImgPath(String pth)
        {
            this.imgPath = pth;
        }
        /// <summary>
        /// This method generates the image path.
        /// It is mandatory to have the image id and entity id set to the object before this method is called.
        /// Also,set the file
        /// </summary>
        public void setImgPath()
        {
            if (this.getEntityId() == null || this.getEntityId().Equals("") || this.getImgId() == null || this.getImgId().Equals("")||this.getFileStream() ==null||this.getFileStream().FileName.Equals(""))
                throw new CustomExceptions.businessRuleViolationException("Image id and/or entity id and/or filestream not set");
            else
            imgPath = this.generateImagePath(this.getEntityId()) + "\\" + this.getImgId() + "_" + this.getFileStream().FileName;
                
        }
        /// <summary>
        /// returns the image's server path
        /// </summary>
        /// <returns></returns>
        public String getImgPath()
        {
            return this.imgPath;
        }

        public String getImgType()
        {
            return this.imgType;
        }
        /// <summary>
        /// The type of image should be selected from the public variables declared in this class named as 'PICTURE_IMG_TYPE'.
        /// </summary>
        /// <param name="imgType"></param>
        public void setImgType(String imgType)
        {
            this.imgType = imgType;
        }

        public String getReferenceId()
        {
            return this.referenceId;
        }

        public void setReferenceId(String refId)
        {
            this.referenceId = refId;
        }
        /// <summary>
        /// Returns the file upload control object associated with this.
        /// </summary>
        /// <returns></returns>
        public FileUpload getFileStream()
        {
            return this.fileStream;
        }
        /// <summary>
        /// Sets the file upload control object associated with this.
        /// </summary>
        /// <param name="fUpl"></param>
        public void setFileStream(FileUpload fUpl)
        {
            this.fileStream = fUpl;
        }
        /// <summary>
        /// pass the image id and it will return the respective imgae object
        /// </summary>
        /// <param name="imgId"></param>
        /// <returns></returns>
        public static Image getImagebyidDB(String imgId)
        {
            /* for any given image id, returns the respective image object from the database table 'Shop_Pic_Map'
             * 
             * @Author: shibasis sengupta
             */
            if (imgId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Image Id sent to image.getImagebyidDB"));

            Connections cn = new Connections();
            String query = "select " + Image.PICTURE_COL_BUSINESS_ID +
                "," + Image.PICTURE_COL_PIC_ID +
                "," + Image.PICTURE_COL_PICTURE_PATH +
                "," + Image.PICTURE_COL_PICTURE_TYPE +
                "," + Image.PICTURE_COL_REFERENCE_ID +
                " from " + Image.PICTURE_TABLE +
                " where " + Image.PICTURE_COL_PIC_ID + "='" + imgId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Image tempImg = new Image();

            foreach (DataRow dr in dt.Rows)
            {
                tempImg.setEntityId(dr[0].ToString());
                tempImg.setImgId(dr[1].ToString());
                tempImg.setImgPath(dr[2].ToString());
                tempImg.setImgType(dr[3].ToString());
                tempImg.setReferenceId(dr[4].ToString());
                //tempImg.setImages((byte[])dr[2]);
            }
            cn.disconnect();
        

            return tempImg;
        }
        /// <summary>
        /// For a given image type and entity id this method returns an ArrayList of Image objects.
        /// The entity id can not be empty.
        /// </summary>
        /// <param name="imgType"></param>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static ArrayList getImagebyTypeandEntId(String imgType, String entId)
        {
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Entity Id sent to image.getImagebyTypeandEntId"));

            Connections cn = new Connections();
            String query = "select " + Image.PICTURE_COL_BUSINESS_ID +
                "," + Image.PICTURE_COL_PIC_ID +
                "," + Image.PICTURE_COL_PICTURE_PATH +
                "," + Image.PICTURE_COL_IMG_TYPE +
                "," + Image.PICTURE_COL_REFERENCE_ID +
                " from " + Image.PICTURE_TABLE +
                " where " + Image.PICTURE_COL_BUSINESS_ID + "='" + entId.Trim() + "'"+
                " and " + Image.PICTURE_COL_IMG_TYPE + "='" + imgType.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                Image tempImg = new Image();

                tempImg.setEntityId(dr[0].ToString());
                tempImg.setImgId(dr[1].ToString());
                tempImg.setImgPath(dr[2].ToString());
                tempImg.setImgType(dr[3].ToString());
                tempImg.setReferenceId(dr[4].ToString());
                //tempImg.setImages((byte[])dr[2]);
                tempList.Add(tempImg);
            }
            cn.disconnect();


            return tempList;
        }

        /// <summary>
        /// Pass a folder name and this method will create the folder under the fileStoreRoot .
        /// If the method is not able to create the sub folder then the return String will be empty.
        /// </summary>
        /// <param name="folderName"></param>
        /// <returns></returns>
        public String generateImagePath(String folderName)
        {
            String fileStoreRoot = App.Default.FileStoreRoot;
            
            //if(fileStoreRoot==null)
           // fileStoreRoot="G:\\FileStoreRoot";
            
            String returnPath = "";
            try
            {
                if (!Directory.Exists(fileStoreRoot + "\\" + folderName.ToString()))
                    Directory.CreateDirectory(fileStoreRoot + "\\" + folderName.ToString());
                returnPath = fileStoreRoot + "\\" + folderName.ToString();
            }
            catch (Exception ex)
            {
                returnPath = "";

            }
            return returnPath;
        }

        /// <summary>
        /// for a given main business entity id, inserts the multiple image objects into the database
        /// </summary>
        /// <param name="mId"></param>
        /// <param name="img"></param>
        /// <returns></returns>
        public static int insertImageforEntityDB(String mId, ArrayList img)
        {
            /*for a given main business entity id, inserts the multiple imahe objects into the database
             * 
             * @Author: shibasis sengupta
           */

            if (img.Count==0)
                throw (new CustomExceptions.invalidParamException("Empty image object list  sent to method Image.insertImageforEntityDB"));

            if (mId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Entity Id  string sent to method Image.insertImageforEntityDB"));

            int rowsAffected = 0;
            String insertCmdMain = "insert into " + Image.PICTURE_TABLE
                + " ("
                + Image.PICTURE_COL_BUSINESS_ID + ","
                + Image.PICTURE_COL_PIC_ID + ","
                + Image.PICTURE_COL_PICTURE_PATH +","
                +Image.PICTURE_COL_IMG_TYPE+","
                +Image.PICTURE_COL_REFERENCE_ID+ ")"
                + "values (" + "'" + mId.Trim() + "'" + ",";
            Connections cn = new Connections();

            for (int i = 0; i < img.Count; i++)
            {
                Image currObj = (Image)img[i];

                String insertCmd = insertCmdMain + "'" + currObj.getImgId() + "','" + currObj.getImgPath() + "','" + currObj.getImgType() + "','" + currObj.getReferenceId() + "'";
               // currObj.getImages() + "";
                insertCmd += ")";

                //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

                //Save the image to server path
                FileUpload fileControl=currObj.getFileStream();
                if(fileControl.HasFile && fileControl.PostedFile.ContentLength>0)
                    fileControl.SaveAs(currObj.getImgPath());
            }

            return rowsAffected;
            
        }
        /// <summary>
        /// for a given business entity id and image id performs the respective update/delete operation
        /// the first parameter is the entity id
        /// the second parameter is the image id
        /// the fourth parameter is the operation
        /// NOTE THAT: currently this method only supports a delete opration.
        /// </summary>
        /// <param name="mId"></param>
        /// <param name="pId"></param>
        /// <param name="img"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateImageforEntityDB(String mId, String pId,String op)
        {
            /* for a given business entity id and image id performs the respective update/delete operation
             * 
             * @Author: shibasis sengupta
            */
            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Image.updateImageforEntityDB is " + op));
           
            /*In case of Update -> 'update <table_name> set '
            * In case of delete -> 'delete from <table_name> '
            */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Image.PICTURE_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Image.PICTURE_TABLE) + " ";

       
            String whereCls=" where " + Image.PICTURE_COL_BUSINESS_ID + "=" + "'"+mId.Trim() +"'"+ " and " + Image.PICTURE_COL_PIC_ID + "=" + "'"+pId.Trim()+"'";
            cmd += whereCls;

            String getImagePath = "select " + Image.PICTURE_COL_PICTURE_PATH + " from " + Image.PICTURE_TABLE + whereCls;
            
            Connections cn = new Connections();
            DataSet dS=cn.execQuery(getImagePath, "");
            DataTable dt = dS.Tables[0];
            //Delete the referred file
            foreach (DataRow dr in dt.Rows) 
            {
                    File.Delete(dr[0].ToString());
              }

            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }
            
    }
    /// <summary>
    /// This class is representative of the backend object 'Docformat'.
    /// Each object of this class represents one record of this class
    /// </summary>
    public class DocFormat
    {
        private String cmp_id;
        private String docformat_id;
        private String docformat_name;
        private String doc_type;
        private String section_type;
        private String image_id;
        private float image_left_index;
        private float image_top_index;
        private String text;
        private float text_left_index;
        private float text_top_index;
        private String sectionTypeName;


        private static String sessionUser = "";

        public const String DOCFORMAT_TABLE = "Docformat";

        public const String DOCFORMAT_COL_CMP_ID="cmp_id";
        public const String DOCFORMAT_COL_DOCFORMAT_ID="docformat_id";
        public const String DOCFORMAT_COL_DOCFORMAT_NAME="docformat_name";
        public const String DOCFORMAT_COL_DOC_TYPE="doc_type";
        public const String DOCFORMAT_COL_SECTION_TYPE="section_type";
        public const String DOCFORMAT_COL_IMAGE_ID="image_id";
        public const String DOCFORMAT_COL_IMAGE_LEFT_INDEX="image_left_index";
        public const String DOCFORMAT_COL_IMAGE_TOP_INDEX="image_top_index";
        public const String DOCFORMAT_COL_TEXT="text";
        public const String  DOCFORMAT_COL_TEXT_LEFT_INDEX="text_left_index";
        public const String DOCFORMAT_COL_TEXT_TOP_INDEX="text_top_index";
        public const String DOCFORMAT_COL_SECTION_TYPE_NAME = "section_type_name";


        public const String DOCFORMAT_DOC_TYPE_INVOICE = "DOCFORMAT_DOC_TYPE_INVOICE";
        public const String DOCFORMAT_DOC_TYPE_PURCHASE_ORDER = "DOCFORMAT_DOC_TYPE_PURCHASE_ORDER";
        public const String DOCFORMAT_DOC_TYPE_SALES_ORDER = "DOCFORMAT_DOC_TYPE_SALES_ORDER";
        

        /// <summary>
        /// Denotes the section type 'Terms and Conditions' for the document type 'Invoice'.
        /// </summary>
        public const String DOCFORMAT_DOC_TYPE_INVOICE_SECTION_TYPE_TNC = "DOCFORMAT_DOC_TYPE_INVOICE_SECTION_TYPE_TNC";
        /// <summary>
        /// Denotes the section type 'Terms and Conditions' for the document type 'Purchase Order'.
        /// </summary>
        public const String DOCFORMAT_DOC_TYPE_PURCHASE_ORDER_SECTION_TYPE_TNC = "DOCFORMAT_DOC_TYPE_PURCHASE_ORDER_SECTION_TYPE_TNC";
        /// <summary>
        ///  Denotes the section type 'Terms and Conditions' for the document type 'Sales Order'.
        /// </summary>
        public const String DOCFORMAT_DOC_TYPE_SALES_ORDER_SECTION_TYPE_TNC = "DOCFORMAT_DOC_TYPE_SALES_ORDER_SECTION_TYPE_TNC";
        /// <summary>
        /// Denotes the tax section for the invoice
        /// </summary>
        public const String DOCFORMAT_DOC_TYPE_INVOICE_SECTION_TYPE_TAX = "DOCFORMAT_DOC_TYPE_INVOICE_SECTION_TYPE_TAX";


        public const String DOCFORMAT_COL_CMP_ID_TYPE=Connections.STRING_TYPE;
        public const String DOCFORMAT_COL_DOCFORMAT_ID_TYPE=Connections.STRING_TYPE;
        public const String DOCFORMAT_COL_DOCFORMAT_NAME_TYPE=Connections.STRING_TYPE;
        public const String DOCFORMAT_COL_DOC_TYPE_TYPE=Connections.STRING_TYPE;
        public const String DOCFORMAT_COL_SECTION_TYPE_TYPE=Connections.STRING_TYPE;
        public const String DOCFORMAT_COL_IMAGE_ID_TYPE=Connections.STRING_TYPE;
        public const String DOCFORMAT_COL_IMAGE_LEFT_INDEX_TYPE=Connections.NUMBER_TYPE;
        public const String DOCFORMAT_COL_IMAGE_TOP_INDEX_TYPE=Connections.NUMBER_TYPE;
        public const String DOCFORMAT_COL_TEXT_TYPE=Connections.STRING_TYPE;
        public const String DOCFORMAT_COL_TEXT_LEFT_INDEX_TYPE=Connections.NUMBER_TYPE;
        public const String DOCFORMAT_COL_TEXT_TOP_INDEX_TYPE=Connections.NUMBER_TYPE;
        public const String DOCFORMAT_COL_SECTION_TYPE_NAME_TYPE = Connections.STRING_TYPE;


        public const String PICTURE_COL_BUSINESS_ID_TYPE = Connections.STRING_TYPE;

        public String getSectionTypeName()
        {
            return this.sectionTypeName;
        }
        public void setSectionTypeName(String secTpNm)
        {
            this.sectionTypeName = secTpNm;
        }
        public String getCmp_id()
        {
            return cmp_id;
        }
        public void setCmp_id(String cmp_id)
        {
            this.cmp_id = cmp_id;
        }
        public String getDocformat_id()
        {
            return docformat_id;
        }
        public void setDocformat_id(String docformat_id)
        {
            this.docformat_id = docformat_id;
        }
        public String getDocformat_name()
        {
            return docformat_name;
        }
        public void setDocformat_name(String docformat_name)
        {
            this.docformat_name = docformat_name;
        }
        public String getDoc_type()
        {
            return doc_type;
        }
        public void setDoc_type(String doc_type)
        {
            this.doc_type = doc_type;
        }
        public String getSection_type()
        {
            return section_type;
        }
        public void setSection_type(String section_type)
        {
            this.section_type = section_type;
        }
        public String getImage_id()
        {
            return image_id;
        }
        public void setImage_id(String image_id)
        {
            this.image_id = image_id;
        }
        public float getImage_left_index()
        {
            return image_left_index;
        }
        public void setImage_left_index(float image_left_index)
        {
            this.image_left_index = image_left_index;
        }
        public float getImage_top_index()
        {
            return image_top_index;
        }
        public void setImage_top_index(float image_top_index)
        {
            this.image_top_index = image_top_index;
        }
        public String getText()
        {
            return text;
        }
        public void setText(String text)
        {
            this.text = text;
        }
        public float getText_left_index()
        {
            return text_left_index;
        }
        public void setText_left_index(float text_left_index)
        {
            this.text_left_index = text_left_index;
        }
        public float getText_top_index()
        {
            return text_top_index;
        }
        public void setText_top_index(float text_top_index)
        {
            this.text_top_index = text_top_index;
        }

        /// <summary>
        /// inserts the passed ArrayList of DocFormat objects into database
        /// </summary>
        /// <param name="dfObj"></param>
        /// <returns></returns>
        public static int insertDocFormatDB(ArrayList  dfList)
        {
            int rowsAffected = 0;
            String insertCmdMain = "insert into " + DocFormat.DOCFORMAT_TABLE
                + " ("
                + DocFormat.DOCFORMAT_COL_CMP_ID + ","
                + DocFormat.DOCFORMAT_COL_DOC_TYPE + ","
                + DocFormat.DOCFORMAT_COL_DOCFORMAT_ID + ","
                + DocFormat.DOCFORMAT_COL_DOCFORMAT_NAME + ","
                + DocFormat.DOCFORMAT_COL_IMAGE_ID + ","
                + DocFormat.DOCFORMAT_COL_IMAGE_LEFT_INDEX + ","
                + DocFormat.DOCFORMAT_COL_IMAGE_TOP_INDEX + ","
                + DocFormat.DOCFORMAT_COL_SECTION_TYPE + ","
                + DocFormat.DOCFORMAT_COL_TEXT + ","
                + DocFormat.DOCFORMAT_COL_TEXT_LEFT_INDEX + ","
                + DocFormat.DOCFORMAT_COL_SECTION_TYPE_NAME + ","
                + DocFormat.DOCFORMAT_COL_TEXT_TOP_INDEX + ")"
                + "values (";
            Connections cn = new Connections();

            for (int i = 0; i < dfList.Count; i++)
            {
                DocFormat currObj = (DocFormat)dfList[i];

                String insertCmd = insertCmdMain +
                    "'" + currObj.getCmp_id() + "','" +
                    currObj.getDoc_type() + "','" +
                    currObj.getDocformat_id() + "','" +
                    currObj.getDocformat_name() + "','" +
                                        currObj.getImage_id() + "'," +
                    currObj.getImage_left_index() + "," +
                    currObj.getImage_top_index() + ",'" +
                                        currObj.getSection_type() + "','" +
                    currObj.getText() + "'," +
                    currObj.getText_left_index() + ",'" +
                    currObj.getSectionTypeName() + "'," +
                currObj.getText_top_index();

                insertCmd += ")";

                //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            }

            return rowsAffected;
        }
        /// <summary>
        /// This method returns a list of DocFormat objects for a given entity id and doc type
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="docType"></param>
        /// <returns></returns>
        public static ArrayList getDocFormatforEntityIdandDocTypeDB(String entId, String docType)
        {
            Connections cn = new Connections();
            String query = "select " + DocFormat.DOCFORMAT_COL_CMP_ID + ","
                + DocFormat.DOCFORMAT_COL_DOC_TYPE + ","
                + DocFormat.DOCFORMAT_COL_DOCFORMAT_ID + ","
                + DocFormat.DOCFORMAT_COL_DOCFORMAT_NAME + ","
                + DocFormat.DOCFORMAT_COL_IMAGE_ID + ","
                + DocFormat.DOCFORMAT_COL_IMAGE_LEFT_INDEX + ","
                + DocFormat.DOCFORMAT_COL_IMAGE_TOP_INDEX + ","
                + DocFormat.DOCFORMAT_COL_SECTION_TYPE + ","
                + DocFormat.DOCFORMAT_COL_TEXT + ","
                + DocFormat.DOCFORMAT_COL_TEXT_LEFT_INDEX + ","
                + DocFormat.DOCFORMAT_COL_TEXT_TOP_INDEX +","
                +DocFormat.DOCFORMAT_COL_SECTION_TYPE_NAME +
                " from " + DocFormat.DOCFORMAT_TABLE +
                " where " + DocFormat.DOCFORMAT_COL_CMP_ID + "='" + entId.Trim() + "'" +
                " and " + DocFormat.DOCFORMAT_COL_DOC_TYPE + "='" + docType.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DocFormat docObj = new DocFormat();

                docObj.setCmp_id(dr[0].ToString());
                docObj.setDoc_type(dr[1].ToString());
                docObj.setDocformat_id(dr[2].ToString());
                docObj.setDocformat_name(dr[3].ToString());
                docObj.setImage_id(dr[4].ToString());
                docObj.setImage_left_index(float.Parse(dr[5].ToString()));
                docObj.setImage_top_index(float.Parse(dr[6].ToString()));
                docObj.setSection_type(dr[7].ToString());
                docObj.setText(dr[8].ToString());
                docObj.setText_left_index(float.Parse(dr[9].ToString()));
                docObj.setText_top_index(float.Parse(dr[10].ToString()));
                docObj.setSectionTypeName(dr[11].ToString());

                tempList.Add(docObj);
            }
            cn.disconnect();


            return tempList;
        }

        public static int updateDocFormatObjsDB(Dictionary<String, String> whereClause, Dictionary<String, String> targetValue, String op)
        {
            String whereClauseCheck = "";

 
            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to DocFormat.updateDocFormatObjsDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to DocFormat.updateDocFormatObjsDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + DocFormat.DOCFORMAT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + DocFormat.DOCFORMAT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();

             chkDataType.Add(DocFormat.DOCFORMAT_COL_CMP_ID,DocFormat.DOCFORMAT_COL_CMP_ID_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_DOCFORMAT_ID,DocFormat.DOCFORMAT_COL_DOCFORMAT_ID_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_DOCFORMAT_NAME,DocFormat.DOCFORMAT_COL_DOCFORMAT_NAME_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_DOC_TYPE,DocFormat.DOCFORMAT_COL_DOC_TYPE_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_SECTION_TYPE, DocFormat.DOCFORMAT_COL_SECTION_TYPE_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_IMAGE_ID,DocFormat.DOCFORMAT_COL_IMAGE_ID_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_IMAGE_LEFT_INDEX,DocFormat.DOCFORMAT_COL_IMAGE_LEFT_INDEX_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_IMAGE_TOP_INDEX,DocFormat.DOCFORMAT_COL_IMAGE_TOP_INDEX_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_TEXT,DocFormat.DOCFORMAT_COL_TEXT_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_TEXT_LEFT_INDEX,DocFormat.DOCFORMAT_COL_TEXT_LEFT_INDEX_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_TEXT_TOP_INDEX,DocFormat.DOCFORMAT_COL_TEXT_TOP_INDEX_TYPE);
             chkDataType.Add(DocFormat.DOCFORMAT_COL_SECTION_TYPE_NAME, DocFormat.DOCFORMAT_COL_SECTION_TYPE_NAME_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DocFormat.updateDocFormatObjsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DocFormat.updateDocFormatObjsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }
    }
    /// <summary>
    /// this class is mainly representative of the database object 'Shop_User_Details'
    /// it also has associated properties which point to other tables
    /// </summary>
    public class MainBusinessEntity
    {
        private String entityId;
        private String entityName;
        private String indChain;
        private String phNo;
        private String emailId;
        private String webSite;
        private String descr;
        private String ownerName;
        private Dictionary<String, Image> images;   // This is a dictionary of image objects - the key is the image objet id
        private Dictionary<String, ProductCategory> mainProductServices;
        private Dictionary<String, subBusinessEntity> subEntities;
        private Dictionary<String, userDetails> entityUserList;
        private AddressDetails addrObj;
        private String supportEmail;
        private String supportEmailPass;
        private String newSupportEmailBody;
        private String resolvedSupportEmailBody;
        private String newSREmailBody;
        private String resolvedSREmailBody;
        private int rfqApprovalLevel;
        private int invApprovalLevel;


        private static String sessionUser = "";

        public const String MAIN_BUSINESS_ENTITY_TABLE = "Shop_User_Details";

        public const String MAIN_BUSINESS_RELATED_PRODUCTS_TABLE = "Shop_Main_Prdcts";

        public const String MAIN_BUSINESS_COL_BUSINESS_ID = "Cmp_Usr_Shop_id";
        public const String MAIN_BUSINESS_COL_SHOP_NAME = "Shop_Name";
        public const String MAIN_BUSINESS_COL_IND_CHAIN = "Ind_Chain";
        public const String MAIN_BUSINESS_COL_MOBILE_NO = "Mob_No";
        public const String MAIN_BUSINESS_COL_EMAIL_ID = "Email";
        public const String MAIN_BUSINESS_COL_WEBSITE = "WebSite";
        public const String MAIN_BUSINESS_COL_DESC = "Descr";
        public const String MAIN_BUSINESS_COL_OWNER_NAME = "owner_name";
        public const String MAIN_BUSINESS_COL_SUPPORT_EMAIL = "Support_Email";
        public const String MAIN_BUSINESS_COL_SUPPORT_PASS = "Support_Email_Pass";
        public const String MAIN_BUSINESS_COL_SUPPORT_NEW_BODY = "Support_Email_New_Body";
        public const String MAIN_BUSINESS_COL_SUPPORT_RESOLVED_BODY = "Support_Email_Resolved_Body";
        public const String MAIN_BUSINESS_COL_SR_NEW_BODY = "SR_Email_New_Body";
        public const String MAIN_BUSINESS_COL_SR_RESOLVED_BODY = "SR_Email_Resolved_Body";
        public const String MAIN_BUSINESS_COL_RFQ_APPROVAL_LEVEL = "RFQ_Approval_Level";
        public const String MAIN_BUSINESS_COL_INV_APPROVAL_LEVEL = "Invoice_Approval_Leval";

        public const String MAIN_BUSINESS_RELATED_PRODUCTS_COL_BUSINESS_ID = "Shop_Usr_id";
        public const String MAIN_BUSINESS_RELATED_PRODUCTS_COL_CATEGORY_ID = "Category_id";


        public const String MAIN_BUSINESS_COL_BUSINESS_ID_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_SHOP_NAME_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_IND_CHAIN_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_MOBILE_NO_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_EMAIL_ID_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_WEBSITE_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_DESC_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_OWNER_NAME_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_SUPPORT_EMAIL_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_SUPPORT_PASS_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_SUPPORT_NEW_BODY_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_SUPPORT_RESOLVED_BODY_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_SR_NEW_BODY_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_SR_RESOLVED_BODY_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_COL_RFQ_APPROVAL_LEVEL_TYPE = Connections.NUMBER_TYPE;
        public const String MAIN_BUSINESS_COL_INV_APPROVAL_LEVEL_TYPE = Connections.NUMBER_TYPE;

        public const String MAIN_BUSINESS_RELATED_PRODUCTS_COL_BUSINESS_ID_TYPE = Connections.STRING_TYPE;
        public const String MAIN_BUSINESS_RELATED_PRODUCTS_COL_CATEGORY_ID_TYPE = Connections.STRING_TYPE;

        public String getNewSREmailBody()
        {
            return this.newSREmailBody;
        }
        public void setNewSREmailBody(String bd)
        {
            this.newSREmailBody = bd;
        }
        public String getResolvedSRBody()
        {
            return this.resolvedSREmailBody;
        }
        public void setSRResolvedBody(String bd)
        {
            this.resolvedSREmailBody = bd;
        }
        public String getNewSupportEmailBody()
        {
            return newSupportEmailBody;
        }
        public void setNewSupportEmailBody(String newSupportEmailBody)
        {
            this.newSupportEmailBody = newSupportEmailBody;
        }
        public String getResolvedSupportEmailBody()
        {
            return resolvedSupportEmailBody;
        }
        public void setResolvedSupportEmailBody(String resolvedSupportEmailBody)
        {
            this.resolvedSupportEmailBody = resolvedSupportEmailBody;
        }

        public String getSupportEmail()
        {
            return supportEmail;
        }
        public void setSupportEmail(String supportEmail)
        {
            this.supportEmail = supportEmail;
        }
        public String getSupportEmailPass()
        {
            return supportEmailPass;
        }
        public void setSupportEmailPass(String supportEmailPass)
        {
            this.supportEmailPass = supportEmailPass;
        }

        public String getEntityId()
        {
            return entityId;
        }

        public void setEntityId(String eId)
        {
            entityId = eId;
        }

        public String getEntityName()
        {
            return entityName;
        }

        public void setEntityName(String eName)
        {
            entityName = eName;
        }

        public String getIndChain()
        {
            return indChain;
        }

        public void setIndChain(String iCh)
        {
            indChain = iCh;
        }

        public String getPhNo()
        {
            return phNo;
        }

        public void setPhNo(String pNo)
        {
            phNo = pNo;
        }

        public String getEmailId()
        {
            return emailId;
        }

        public void setEmailId(String eId)
        {
            emailId = eId;
        }

        public String getWebSite()
        {
            return webSite;
        }

        public void setWebSite(String wSite)
        {
            webSite = wSite;
        }

        public String getDesc()
        {
            return descr;
        }

        public void setDesc(String dsc)
        {
            descr = dsc;
        }
        /// <summary>
        /// This method should be used with proper consideration as this involves returning ArrayList of Blobs
        /// </summary>
        /// <returns></returns>
        public Dictionary<String, Image> getImages()
        {
            return images;
        }
        /// <summary>
        /// This method should be used with proper consideration as this involves setting ArrayList of Blobs
        /// </summary>
        /// <param name="img"></param>
        public void setImages(Dictionary<String, Image> img)
        {
            images = img;
        }

        public Dictionary<String, ProductCategory> getMainProductServices()
        {
            return mainProductServices;
        }

        public void setMainProductServices(Dictionary<String, ProductCategory> mPS)
        {
            mainProductServices = mPS;
        }

        public Dictionary<String, subBusinessEntity> getSubEntities()
        {
            return subEntities;
        }

        public void setSubEntities(Dictionary<String, subBusinessEntity> sBE)
        {
            subEntities = sBE;
        }

        public Dictionary<String, userDetails> getEntityUserList()
        {
            return entityUserList;
        }

        public void setEntityUserList(Dictionary<String, userDetails> eUL)
        {
            entityUserList = eUL;
        }

        public String getOwnerName()
        {
            return ownerName;
        }

        public void setOwnerName(String oName)
        {
            ownerName = oName;
        }
        /// <summary>
        /// return the associated address object for the main business entity.
        /// Note that, this class does not contain any database related method to get the address details from DB.
        /// For that use method of the class 'AddressDetails'.
        /// </summary>
        /// <returns></returns>
        public AddressDetails getAddressDetails()
        {
            return this.addrObj;
        }
        /// <summary>
        /// Sets the address details property of the main business entity object.
        /// The value of subEntityId must be set to 'AddressDetails.DUMMY_CHAIN_ID'.
        /// </summary>
        /// <param name="addrObjParam"></param>
        public void setAddressDetails(AddressDetails addrObjParam)
        {
            if (!addrObjParam.getSubEntityId().Equals(AddressDetails.DUMMY_CHAIN_ID))
                throw new CustomExceptions.invalidParamException("Sub entity id must be set to AddressDetails.DUMMY_CHAIN_ID while setting address object value for main business entity");
            else
                this.addrObj = addrObjParam;
        }
        /// <summary>
        /// lighter version of the method, 'getMainBusinessEntitybyIdDB' - does not return all of the associated details
        /// it returns the following details - entityId, entityName,indChain,phNo,emailId,webSite,desc,ownerName
        /// </summary>
        /// <param name="eId"></param>
        /// <returns></returns>
        public static MainBusinessEntity getMainBusinessEntitybyIdwithLessDetailsDB(String eId)
        {
            /* lighter version of the method, 'getMainBusinessEntitybyIdDB' - does not return all of the associated details
             * it returns the following details - entityId, entityName,indChain,phNo,emailId,webSite,desc,ownerName
             * 
             * @Author: shibasis sengupta
            */
            if (eId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty sub business entity Id sent to MainBusinessEntity.getMainBusinessEntitybyIdwithLessDetailsDB"));

            Connections cn = new Connections();
            String query = "select " + MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID +
                "," + MainBusinessEntity.MAIN_BUSINESS_COL_DESC +
                 "," + MainBusinessEntity.MAIN_BUSINESS_COL_EMAIL_ID +
                  "," + MainBusinessEntity.MAIN_BUSINESS_COL_IND_CHAIN +
                   "," + MainBusinessEntity.MAIN_BUSINESS_COL_MOBILE_NO +
                    "," + MainBusinessEntity.MAIN_BUSINESS_COL_OWNER_NAME +
                     "," + MainBusinessEntity.MAIN_BUSINESS_COL_SHOP_NAME +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_WEBSITE +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_EMAIL +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_PASS +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_NEW_BODY +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_RESOLVED_BODY +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_INV_APPROVAL_LEVEL +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_RFQ_APPROVAL_LEVEL +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_SR_NEW_BODY +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_SR_RESOLVED_BODY +
                 " from " + MainBusinessEntity.MAIN_BUSINESS_ENTITY_TABLE +
                " where " + MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID + "='" + eId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            MainBusinessEntity tempMainEntity = new MainBusinessEntity();

            foreach (DataRow dr in dt.Rows)
            {
                tempMainEntity.setEntityId(dr[0].ToString());
                tempMainEntity.setDesc(dr[1].ToString());
                tempMainEntity.setEmailId(dr[2].ToString());
                tempMainEntity.setIndChain(dr[3].ToString());
                tempMainEntity.setPhNo(dr[4].ToString());
                tempMainEntity.setOwnerName(dr[5].ToString());
                tempMainEntity.setEntityName(dr[6].ToString());
                tempMainEntity.setWebSite(dr[7].ToString());
                tempMainEntity.setSupportEmail(dr[8].ToString());
                tempMainEntity.setSupportEmailPass(dr[9].ToString());
                tempMainEntity.setNewSupportEmailBody(dr[10].ToString());
                tempMainEntity.setResolvedSupportEmailBody(dr[11].ToString());
                tempMainEntity.setInvApprovalLevel((dr[12].ToString().Equals("")?Int32.Parse("0"):Int32.Parse(dr[12].ToString())));
                tempMainEntity.setRfqApprovalLevel((dr[13].ToString().Equals("") ? Int32.Parse("0") : Int32.Parse(dr[13].ToString())));
                tempMainEntity.setNewSREmailBody(dr[14].ToString());
                tempMainEntity.setSRResolvedBody(dr[15].ToString());
            }
            cn.disconnect();
            return tempMainEntity;

        }
        /// <summary>
        /// Returns an ArrayList of MainBusinessEntity objects from database whose name contains the passed String.
        /// Each returned object also contains the associated Address Details object
        /// The returned objects does not include the support email body details
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static ArrayList getMainBusinessEntityListbyNameWithAddrDetailsDB(String name)
        {
            Connections cn = new Connections();
            String query = "select " + MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID +
                "," + MainBusinessEntity.MAIN_BUSINESS_COL_DESC +
                 "," + MainBusinessEntity.MAIN_BUSINESS_COL_EMAIL_ID +
                  "," + MainBusinessEntity.MAIN_BUSINESS_COL_IND_CHAIN +
                   "," + MainBusinessEntity.MAIN_BUSINESS_COL_MOBILE_NO +
                    "," + MainBusinessEntity.MAIN_BUSINESS_COL_OWNER_NAME +
                     "," + MainBusinessEntity.MAIN_BUSINESS_COL_SHOP_NAME +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_WEBSITE +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_EMAIL +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_INV_APPROVAL_LEVEL +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_RFQ_APPROVAL_LEVEL +
                 " from " + MainBusinessEntity.MAIN_BUSINESS_ENTITY_TABLE +
                " where " + MainBusinessEntity.MAIN_BUSINESS_COL_SHOP_NAME + "like'" + name.Trim() + "%" + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList returnList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                MainBusinessEntity tempMainEntity = new MainBusinessEntity();

                tempMainEntity.setEntityId(dr[0].ToString());
                tempMainEntity.setDesc(dr[1].ToString());
                tempMainEntity.setEmailId(dr[2].ToString());
                tempMainEntity.setIndChain(dr[3].ToString());
                tempMainEntity.setPhNo(dr[4].ToString());
                tempMainEntity.setOwnerName(dr[5].ToString());
                tempMainEntity.setEntityName(dr[6].ToString());
                tempMainEntity.setWebSite(dr[7].ToString());
                tempMainEntity.setSupportEmail(dr[8].ToString());
                tempMainEntity.setInvApprovalLevel((dr[9].ToString().Equals("") ? Int32.Parse("0") : Int32.Parse(dr[9].ToString())));
                tempMainEntity.setRfqApprovalLevel((dr[10].ToString().Equals("") ? Int32.Parse("0") : Int32.Parse(dr[10].ToString())));

                AddressDetails addrObj = AddressDetails.getAddressforMainBusinessEntitybyIdDB(dr[0].ToString());
                addrObj.setSubEntityId(AddressDetails.DUMMY_CHAIN_ID);
                tempMainEntity.setAddressDetails(addrObj);

                returnList.Add(tempMainEntity);
            }
            cn.disconnect();
            return returnList;
        }
        /// <summary>
        /// Returns an ArrayList of MainBusinessEntity objects from database whose name contains the passed String.
        /// Each returned object also contains the associated Address Details object
        /// The second parameter defines the entity id which should not be passed back.
        /// Typically this is to prevent to return the Details of the calling main business entity details
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static ArrayList getMainBusinessEntityListbyNameWithAddrDetailsDB(String name, String filterOutEntId)
        {
            Connections cn = new Connections();
            String query = "select " + MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID +
                "," + MainBusinessEntity.MAIN_BUSINESS_COL_DESC +
                 "," + MainBusinessEntity.MAIN_BUSINESS_COL_EMAIL_ID +
                  "," + MainBusinessEntity.MAIN_BUSINESS_COL_IND_CHAIN +
                   "," + MainBusinessEntity.MAIN_BUSINESS_COL_MOBILE_NO +
                    "," + MainBusinessEntity.MAIN_BUSINESS_COL_OWNER_NAME +
                     "," + MainBusinessEntity.MAIN_BUSINESS_COL_SHOP_NAME +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_WEBSITE +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_EMAIL +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_INV_APPROVAL_LEVEL +
                      "," + MainBusinessEntity.MAIN_BUSINESS_COL_RFQ_APPROVAL_LEVEL +
                 " from " + MainBusinessEntity.MAIN_BUSINESS_ENTITY_TABLE +
                " where " + MainBusinessEntity.MAIN_BUSINESS_COL_SHOP_NAME + " like " + "'" + name.Trim() + "%" + "'" +
                " and " + MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID + "!=" + "'" + filterOutEntId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList returnList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                MainBusinessEntity tempMainEntity = new MainBusinessEntity();

                tempMainEntity.setEntityId(dr[0].ToString());
                tempMainEntity.setDesc(dr[1].ToString());
                tempMainEntity.setEmailId(dr[2].ToString());
                tempMainEntity.setIndChain(dr[3].ToString());
                tempMainEntity.setPhNo(dr[4].ToString());
                tempMainEntity.setOwnerName(dr[5].ToString());
                tempMainEntity.setEntityName(dr[6].ToString());
                tempMainEntity.setWebSite(dr[7].ToString());
                tempMainEntity.setSupportEmail(dr[8].ToString());
                tempMainEntity.setInvApprovalLevel((dr[9].ToString().Equals("") ? Int32.Parse("0") : Int32.Parse(dr[9].ToString())));
                tempMainEntity.setRfqApprovalLevel((dr[10].ToString().Equals("") ? Int32.Parse("0") : Int32.Parse(dr[10].ToString())));

                AddressDetails addrObj = AddressDetails.getAddressforMainBusinessEntitybyIdDB(dr[0].ToString());
                addrObj.setSubEntityId(AddressDetails.DUMMY_CHAIN_ID);
                tempMainEntity.setAddressDetails(addrObj);

                returnList.Add(tempMainEntity);
            }
            cn.disconnect();
            return returnList;
        }

        /// <summary>
        /// for a main business entity id, returns all the associated image objects from database table 'Shop_Pic_Map'
        /// </summary>
        /// <param name="eId"></param>
        /// <returns></returns>
        public static Dictionary<String, Image> getAllImagesbyEntityIdDB(String eId)
        {
            /* for a main business entity id, returns all the associated image objects from database table 'Shop_Pic_Map'
             * 
             * @Author: shibasis sengupta
             */
            if (eId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty business entity Id sent to MainBusinessEntity.getImagesbyEntityIdDB"));

            Connections cn = new Connections();
            String query = "select " + Image.PICTURE_COL_BUSINESS_ID +
                "," + Image.PICTURE_COL_PIC_ID +
                "," + Image.PICTURE_COL_PICTURE_PATH +
                 " from " + Image.PICTURE_TABLE +
                 " where " + Image.PICTURE_COL_BUSINESS_ID + "='" + eId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, Image> imageDict = new Dictionary<string, Image>();


            foreach (DataRow dr in dt.Rows)
            {
                Image tempImg = new Image();

                tempImg.setEntityId(dr[0].ToString());
                tempImg.setImgId(dr[1].ToString());
                tempImg.setImgPath(dr[2].ToString());

                imageDict.Add(tempImg.getImgId(), tempImg);

            }
            cn.disconnect();
            return imageDict;

        }
        /// <summary>
        /// for a given main business entity id returns all the associated sub entities
        /// </summary>
        /// <param name="mId"></param>
        /// <returns></returns>
        public static Dictionary<String, subBusinessEntity> getSubEntitiesforMainEntitybyIdDB(String mId)
        {
            if (mId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty sub business entity Id sent to MainBusinessEntity.getSubEntitiesforMainEntitybyIdDB"));

            Connections cn = new Connections();
            String query = "select " + subBusinessEntity.SUB_BUSINESS_COL_CHAIN_ID +
                " from " + subBusinessEntity.SUB_BUSINESS_ENTITY_TABLE +
                " where " + subBusinessEntity.SUB_BUSINESS_COL_BUSINESS_ID + "='" + mId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, subBusinessEntity> subDict = new Dictionary<String, subBusinessEntity>();

            foreach (DataRow dr in dt.Rows)
            {
                if (!dr[0].ToString().Equals(AddressDetails.DUMMY_CHAIN_ID)) //Exclude the main business entity (it's can be present in this same table )
                {
                    subBusinessEntity tempSub = subBusinessEntity.getSubBusinessEntitybyIdDB(dr[0].ToString());
                    subDict.Add(tempSub.getSubEntityId(), tempSub);
                }
            }
            cn.disconnect();
            return subDict;

        }
        /// <summary>
        /// for a given main business entity id, returns all associated user objects from the database
        /// </summary>
        /// <param name="mId"></param>
        /// <returns></returns>
        public static Dictionary<String, userDetails> getUserDetailsforMainEntitybyIdDB(String mId)
        {
            if (mId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty sub business entity Id sent to MainBusinessEntity.getUserDetailsforMainEntitybyIdDB"));

            Connections cn = new Connections();
            String query = "select " + userDetails.USER_DETAILS_COL_USERID +
                 " from " + userDetails.USER_DETAILS_TABLE +
                 " where " + userDetails.USER_DETAILS_COL_BUSINESS_ID + "='" + mId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, userDetails> userDict = new Dictionary<String, userDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                userDetails tempUser = userDetails.getUserDetailsbyIdDB(dr[0].ToString(), mId);
                userDict.Add(tempUser.getUserId(), tempUser);
            }
            cn.disconnect();
            return userDict;
        }
        /// <summary>
        /// for a given main business entity id, returns all related product/service objects from database
        /// </summary>
        /// <param name="mId"></param>
        /// <returns></returns>
        public static Dictionary<String, ProductCategory> getProductDetailsforMainEntitybyIdDB(String mId)
        {
            if (mId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty sub business entity Id sent to MainBusinessEntity.getProductDetailsforMainEntitybyIdDB"));

            Connections cn = new Connections();
            String query = "select " + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_CATEGORY_ID +
                " from " + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_TABLE +
                " where " + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_BUSINESS_ID + "='" + mId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, ProductCategory> prodDict = new Dictionary<String, ProductCategory>();

            foreach (DataRow dr in dt.Rows)
            {
                ProductCategory tempProd = ProductCategory.getProductCategorybyIdwoFeaturesDB(dr[0].ToString());
                prodDict.Add(tempProd.getCategoryId(), tempProd);
            }
            cn.disconnect();
            return prodDict;
        }
        /// <summary>
        /// for a given business entity id, returns the entity object with all associated details
        /// this is a heavyweight method- use it when absolutely necessary
        /// </summary>
        /// <param name="eId"></param>
        /// <returns></returns>
        public static MainBusinessEntity getMainBusinessEntitybyIdDB(String mId)
        {
            if (mId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty business entity Id sent to MainBusinessEntity.getMainBusinessEntitybyIdDB"));

            MainBusinessEntity tempEnt = MainBusinessEntity.getMainBusinessEntitybyIdwithLessDetailsDB(mId.Trim());
            tempEnt.setEntityUserList(MainBusinessEntity.getUserDetailsforMainEntitybyIdDB(mId.Trim()));
            tempEnt.setImages(MainBusinessEntity.getAllImagesbyEntityIdDB(mId.Trim()));
            tempEnt.setMainProductServices(MainBusinessEntity.getProductDetailsforMainEntitybyIdDB(mId.ToString()));
            tempEnt.setSubEntities(MainBusinessEntity.getSubEntitiesforMainEntitybyIdDB(mId.ToString()));
            tempEnt.setAddressDetails(AddressDetails.getAddressforMainBusinessEntitybyIdDB(mId.ToString()));

            return tempEnt;
        }
        /// <summary>
        /// inserts the details into database table 'Shop_User_Details' only
        /// does not insert any object related to image/sub entity/produc/user 
        /// </summary>
        /// <param name="mEnt"></param>
        /// <returns></returns>
        public static int insertMainBusinessEntityWOimg_prd_user_subDB(MainBusinessEntity mEnt)
        {
            /* inserts the details into database table 'Shop_User_Details' only
             * does not insert any object related to image/sub entity/produc/user
             * 
             * @Author: shibasis sengupta
            */

            if (mEnt == null)
                throw (new CustomExceptions.invalidParamException("null business entity Id sent to MainBusinessEntity.insertMainBusinessEntityWOimg_prd_user_subDB"));

            if (mEnt.getEntityId() == null || mEnt.getEntityId().Equals(""))
                throw (new CustomExceptions.invalidParamException("invalid business entity Id sent to MainBusinessEntity.insertMainBusinessEntityWOimg_prd_user_subDB"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + MainBusinessEntity.MAIN_BUSINESS_ENTITY_TABLE
                + " ("
                + MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_DESC + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_EMAIL_ID + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_IND_CHAIN + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_MOBILE_NO + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_OWNER_NAME + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_SHOP_NAME + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_EMAIL + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_PASS + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_NEW_BODY + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_RESOLVED_BODY + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_INV_APPROVAL_LEVEL + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_RFQ_APPROVAL_LEVEL + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_SR_NEW_BODY + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_SR_RESOLVED_BODY + ","
                + MainBusinessEntity.MAIN_BUSINESS_COL_WEBSITE + ")"
                + "values (";
            Connections cn = new Connections();

            insertCmd = insertCmd + "'" + mEnt.getEntityId() + "'," + "'" +
            mEnt.getDesc() + "'," + "'" +
            mEnt.getEmailId() + "'," + "'" +
            mEnt.getIndChain() + "'," + "'" +
            mEnt.getPhNo() + "'," + "'" +
            mEnt.getOwnerName() + "'," + "'" +
            mEnt.getEntityName() + "'," + "'" +
            mEnt.getSupportEmail() + "'," + "'" +
            mEnt.getSupportEmailPass() + "'," + "'" +
            mEnt.getNewSupportEmailBody() + "'," + "'" +
            mEnt.getResolvedSupportEmailBody() + "'," +
            mEnt.getInvApprovalLevel() + "," +
            mEnt.getRfqApprovalLevel() + "," + "'" +
            mEnt.getNewSREmailBody() + "," + "'" +
            mEnt.getResolvedSRBody() + "," + "'" +
            mEnt.getWebSite() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            return rowsAffected;


        }
        /// <summary>
        /// update the details into database table 'Shop_User_Details' only
        /// entity id is the required parameter in the where clause
        /// does not update any object related to image/sub entity/produc/user
        /// a delete operation will  have a  cascading effect on child tables
        /// it is highly recommended not to delete any record from this table, rather use the update option as a delete will completely remove all entries related to a business 
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateMainBusinessEntityWOimg_prd_user_subDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* the first paramter contains column name - taget value pair
            * the second parameter contains column name - target value as where clause - note that this where clause must contain the entity id 
            * the third parameter contains the type of operation
            * 
             * 
            * a delete operation will  have a  cascading effect on child tables
            * it is highly recommended not to delete any record from this table (as a delete will completely remove all entries related to a business ), rather use the update option
             * 
            * @Author: shibasis sengupta
           */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - MainBusinessEntity.updateMainBusinessEntityWOimg_prd_user_subDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to MainBusinessEntity.updateMainBusinessEntityWOimg_prd_user_subDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to MainBusinessEntity.updateMainBusinessEntityWOimg_prd_user_subDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + MainBusinessEntity.MAIN_BUSINESS_ENTITY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + MainBusinessEntity.MAIN_BUSINESS_ENTITY_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_WEBSITE, MainBusinessEntity.MAIN_BUSINESS_COL_WEBSITE_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_SHOP_NAME, MainBusinessEntity.MAIN_BUSINESS_COL_SHOP_NAME_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_OWNER_NAME, MainBusinessEntity.MAIN_BUSINESS_COL_OWNER_NAME_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_MOBILE_NO, MainBusinessEntity.MAIN_BUSINESS_COL_MOBILE_NO_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_IND_CHAIN, MainBusinessEntity.MAIN_BUSINESS_COL_IND_CHAIN_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_EMAIL_ID, MainBusinessEntity.MAIN_BUSINESS_COL_EMAIL_ID_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_DESC, MainBusinessEntity.MAIN_BUSINESS_COL_DESC_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID, MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_EMAIL, MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_EMAIL_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_PASS, MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_PASS_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_NEW_BODY, MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_NEW_BODY_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_RESOLVED_BODY, MainBusinessEntity.MAIN_BUSINESS_COL_SUPPORT_RESOLVED_BODY_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_INV_APPROVAL_LEVEL, MainBusinessEntity.MAIN_BUSINESS_COL_INV_APPROVAL_LEVEL_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_RFQ_APPROVAL_LEVEL, MainBusinessEntity.MAIN_BUSINESS_COL_RFQ_APPROVAL_LEVEL_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_SR_NEW_BODY, MainBusinessEntity.MAIN_BUSINESS_COL_SR_NEW_BODY_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_COL_SR_RESOLVED_BODY, MainBusinessEntity.MAIN_BUSINESS_COL_SR_RESOLVED_BODY_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to MainBusinessEntity.updateMainBusinessEntityWOimg_prd_user_subDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to MainBusinessEntity.updateMainBusinessEntityWOimg_prd_user_subDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;


        }
        /// <summary>
        /// inserts the related product/service details of a given entity id into the database table 'Shop_Main_Prdcts'
        /// </summary>
        /// <param name="mId"></param>
        /// <param name="catIds"></param>
        /// <returns></returns>
        public static int insertProductDetailsforEntityDB(String mId, ArrayList catIds)
        {
            /* inserts the related product/service details of a given entity id into the database table 'Shop_Main_Prdcts'
             * 
             * @Author: shibasis senngupta
             */

            if (mId == null || mId.Equals(""))
                throw (new CustomExceptions.invalidParamException("null business entity Id sent to MainBusinessEntity.insertProductDetailsforEntityDB"));

            if (catIds.Count == 0)
                throw (new CustomExceptions.invalidParamException("empty product/service list sent to MainBusinessEntity.insertProductDetailsforEntityDB"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_TABLE
                + " ("
                + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_BUSINESS_ID + ","
                + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_CATEGORY_ID + ")"
                + " values (" + "'" + mId.Trim() + "',";
            Connections cn = new Connections();
            int i = 0;

            while (i < catIds.Count)
            {
                String insertCmdInd = insertCmd + "'" + catIds[i].ToString() + "')";
                rowsAffected += cn.execInsertUpdate(insertCmdInd, sessionUser); i++;
            }

            cn.disconnect();

            return rowsAffected;


        }
        /// <summary>
        /// for a given entity id, update the respective product/service details in the database table 'Shop_Main_Prdcts'
        /// there will be no cascading effect for a delete operation
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateProductDetailsforEntityDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /*for a given entity id, update the respective product/service details in the database table 'Shop_Main_Prdcts'
             * there will be no cascading effect for a delete operation
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            /*if (!whereClause.TryGetValue(MainBusinessEntity.MAIN_BUSINESS_COL_BUSINESS_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - MainBusinessEntity.updateProductDetailsforEntityDB"));*/

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to MainBusinessEntity.updateProductDetailsforEntityDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to MainBusinessEntity.updateProductDetailsforEntityDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_CATEGORY_ID, MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_CATEGORY_ID_TYPE);
            chkDataType.Add(MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_BUSINESS_ID, MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_BUSINESS_ID_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to MainBusinessEntity.updateProductDetailsforEntityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to MainBusinessEntity.updateProductDetailsforEntityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;



        }
        public int getRfqApprovalLevel()
        {
            return rfqApprovalLevel;
        }
        public void setRfqApprovalLevel(int rfqApprovalLevel)
        {
            this.rfqApprovalLevel = rfqApprovalLevel;
        }
        public int getInvApprovalLevel()
        {
            return invApprovalLevel;
        }
        public void setInvApprovalLevel(int invApprovalLevel)
        {
            this.invApprovalLevel = invApprovalLevel;
        }


    }
    /// <summary>
    /// This class is representative of the backend object 'cmp_access_list'.
    /// Each object of this class represents one record of the table 'cmp_access_list'.
    /// </summary>
    public class EntityAccessListRecord
    {
        private String entId;
        private String adGrouporId;
        private String accessContext;

        private static String sessionUser = "";

        public const String ENTITY_ACCESS_LIST_RECORD_TABLE = "cmp_access_list";
        
        public const String ENTITY_ACCESS_LIST_RECORD_COL_ENT_ID = "cmp_id";
        public const String ENTITY_ACCESS_LIST_RECORD_COL_AD_GROUP_ID = "ad_group_or_id";
        public const String ENTITY_ACCESS_LIST_RECORD_COL_ACCESS = "access";

        public const String ENTITY_ACCESS_LIST_RECORD_COL_ENT_ID_TYPE = Connections.STRING_TYPE;
        public const String ENTITY_ACCESS_LIST_RECORD_COL_AD_GROUP_ID_TYPE = Connections.STRING_TYPE;
        public const String ENTITY_ACCESS_LIST_RECORD_COL_ACCESS_TYPE = Connections.STRING_TYPE;

        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_OWNER_ACCESS = "Owner";
                
        /// <summary>
        /// Controls access to admin pref page
        /// </summary>
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_ADMIN_PREF_PAGE_VIEW = "Admin Pref Page View";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_ADMIN_PREF_ENT_MGMT_WRITE_ACCESS = "Admin Pref - Entity Mgmt Write Access";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_ADMIN_PREF_CHAIN_MGMT_WRITE_ACCESS = "Admin Pref - Chain Mgmt Write Access";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_ADMIN_PREF_SEC_MGMT_WRITE_ACCESS = "Admin Pref - Security Mgmt Write Access";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_ADMIN_PREF_USR_MGMT_WRITE_ACCESS = "Admin Pref - User Mgmt Write Access";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_ADMIN_PREF_WORKFLOW_MGMT_WRITE_ACCESS = "Admin Pref - Workflow Mgmt Write Access";
        
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_PURCHASE_SCREEN_VIEW = "Purchase Page - View";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_SALES_SCREEN_VIEW = "Sales Page - View";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_PRODUCTS_SCREEN_VIEW = "Products Page - View";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_DEFECTS_SCREEN_VIEW = "Defects Page - View";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_SR_SCREEN_VIEW = "SR Page - View";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_DASHBOARD_SCREEN_VIEW = "Dashboard Page - View";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_CONTACTS_SCREEN_VIEW = "Contacts Page - View";

        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_REQUIREMENT = "View Requirement";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CREATE_REQUIREMENT = "Create Requirement";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_EDIT_REQUIREMENT = "Edit Requirement";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CONVERT_REQUIREMENT = "Convert Requirement";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_RFQ = "View RFQ";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CREATE_RFQ = "Create RFQ";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_EDIT_RFQ = "Edit RFQ";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_INVOICE_PURCHASE = "View Invoice Purchase";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CREATE_INVOICE_PURCHASE = "Create Invoice Purchase";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_EDIT_INVOICE_PURCHASE = "Edit Invoice Purchase";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_PO_PURCHASE = "View PO Purchase";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CREATE_PO_PURCHASE = "Create PO Purchase";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_EDIT_PO_PURCHASE = "Edit PO Purchase";

        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_LEAD = "View Lead";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CREATE_LEAD = "Create Lead";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_EDIT_LEAD = "Edit Lead";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CONVERT_LEAD = "Convert Lead";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_POTENTIAL = "View Potential";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CREATE_POTENTIAL = "Create Potential";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_EDIT_POTENTIAL = "Edit Potential";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_INVOICE_SALES = "View Invoice Sales";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CREATE_INVOICE_SALES = "Create Invoice Sales";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_EDIT_INVOICE_SALES = "Edit Invoice Sales";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_SO_SALES = "View SO Sales";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CREATE_SO_SALES = "Create SO Sales";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_EDIT_SO_SALES = "Edit SO Sales";

        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_CREATE_PRODUCT = "Create Product";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_EDIT_PRODUCT = "Edit Product";

        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_CREATE_INCOMING_DEFECT = "Create Incoming Defect";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_EDIT_INCOMING_DEFECT = "Edit Incoming Defect";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_CREATE_OUTGOING_DEFECT = "Create Outgoing Defect";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_EDIT_OUTGOING_DEFECT = "Edit Outgoing Defect";

        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_CREATE_INCOMING_SR = "Create Incoming SR";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_EDIT_INCOMING_SR = "Edit Incoming SR";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_CREATE_OUTGOING_SR = "Create Outgoing SR";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_EDIT_OUTGOING_SR = "Edit Outgoing SR";


        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_CREATE_CONTACT = "Create Contact";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCES_EDIT_CONTACT = "Edit Contact";

        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_LEAD_REPORT = "View Lead Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_DOWNLOAD_LEAD_REPORT = "Download Lead Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_POTENTIAL_REPORT = "View Potential Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_DOWNLOAD_POTENTIAL_REPORT = "Download Potential Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_SALES_TRANSAC_REPORT = "View Sales Transac Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_DOWNLOAD_SALES_TRANSAC_REPORT = "Download Sales Transac Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_PURCHASE_TRANSAC_REPORT = "View Purchase Transac Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_DOWNLOAD_PURCHASE_TRANSAC_REPORT = "Download Purchase Transac Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_INCOMING_DEFECT_REPORT = "View Incoming Defects Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_DOWNLOAD_INCOMING_DEFECT_REPORT = "Download Incoming Defects Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_OUTGOING_DEFECT_REPORT = "View Outgoing Defects Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_DOWNLOAD_OUTGOING_DEFECT_REPORT = "Download Outgoing Defects Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_VIEW_CUSTOM_REPORT = "View Custom Report";
        public const String ENTITY_ACCESS_LIST_RECORD_ACCESS_DOWNLOAD_CUSTOM_REPORT = "Download Custom Report";

        public String getEntId()
        {
            return this.entId;
        }
        public void setEntId(String eId)
        {
            this.entId = eId;
        }
        public String getAdGrouporId()
        {
            return this.adGrouporId;
        }
        public void setAdGrouporId(String adId)
        {
            this.adGrouporId = adId;
        }
        public String getAccessContext()
        {
            return this.accessContext;
        }
        public void setAccessContext(String aContext)
        {
            this.accessContext = aContext;
        }

        /// <summary>
        /// This method inserts a access list record object into the database
        /// </summary>
        /// <param name="alRObj"></param>
        /// <returns></returns>
        public static int insertEntityAccessListRecordObjDB(EntityAccessListRecord alRObj)
        {
            int rowsAffected = 0;


            String insertCmd = "insert into " + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_TABLE
            + " ("
            + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_ENT_ID + ","
            + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_AD_GROUP_ID + ","
            + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_ACCESS + ")"
            + "values (";
            Connections cn = new Connections();

            insertCmd = insertCmd + "'" + alRObj.getEntId() + "'," + "'" +
            alRObj.getAdGrouporId() + "'," + "'" +
            alRObj.getAccessContext() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            return rowsAffected;
        }
        /// <summary>
        /// insert a list of 'EntityAccessListRecord' objects
        /// </summary>
        /// <param name="alRObjList"></param>
        /// <returns></returns>
        public static int insertEntityAccessListRecordObjectsDB(ArrayList alRObjList)
        {
            int rowsAffected = 0;

            for (int i = 0; i < alRObjList.Count; i++)
                rowsAffected += insertEntityAccessListRecordObjDB((EntityAccessListRecord)alRObjList[i]);

            return rowsAffected;
        }

        public static int updateEntityAccessListRecord(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
                        String whereClauseCheck = "";

           // if (!whereClause.TryGetValue(Requirement.REQ_COL_REQ_ID, out whereClauseCheck))
                //throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Requirement.updateRequirementDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to EntityAccessListRecord.updateEntityAccessListRecord is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to EntityAccessListRecord.updateEntityAccessListRecord is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_TABLE+
                " set " : Connections.OPERATION_DELETE + " from " + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_ENT_ID, EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_ENT_ID_TYPE);
            chkDataType.Add(EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_AD_GROUP_ID, EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_AD_GROUP_ID_TYPE);
            chkDataType.Add(EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_ACCESS, EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_ACCESS_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to EntityAccessListRecord.updateEntityAccessListRecord" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to EntityAccessListRecord.updateEntityAccessListRecord" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }
        /// <summary>
        /// For a given entity id and group/user id this method returns an ArrayList containing access contexts strings.
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        public static ArrayList getAccessDetailsForGroupOrUserbyEntIdandGroupDB(String entId, String groupId)
        {
            if (entId == null || entId.Equals("") || groupId == null || groupId.Equals(""))
                throw new CustomExceptions.businessRuleViolationException("Invalid entity id and/or group/user id sent to EntityAccessListRecord.getAccessDetailsForGroupbyEntIdandGroup");

            Connections cn = new Connections();
            String query = "select " + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_ENT_ID +
                 "," + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_AD_GROUP_ID +
                  "," + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_ACCESS +
                 " from " + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_TABLE+
                " where " + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_ENT_ID + "='" + entId.Trim() + "'" +
                " and " + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_AD_GROUP_ID + "='" + groupId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList accessContextList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
                       accessContextList.Add(dr[2].ToString());

            cn.disconnect();
            return accessContextList;
            }
        /// <summary>
        /// For a given entity id this method returns a dictionary containing AD group /user as a key and all related access context strings as an ArrayList value.
        /// </summary>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static Dictionary<String,ArrayList> getCompleteAccessListbyEntId(String entId)
        {
            if(entId==null || entId.Equals(""))
                throw new CustomExceptions.businessRuleViolationException("invalid entity id sent to EntityAccessListRecord.getCompleteAccessListbyEntId");

                        Connections cn = new Connections();
                        String query = "select " + "DISTINCT (" + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_AD_GROUP_ID +")"+
                 " from " + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_TABLE+
                " where " + EntityAccessListRecord.ENTITY_ACCESS_LIST_RECORD_COL_ENT_ID + "='" + entId.Trim() + "'" ;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String,ArrayList> accessDict=new Dictionary<string,ArrayList>();

            foreach (DataRow dr in dt.Rows)
                accessDict.Add(dr[0].ToString(),EntityAccessListRecord.getAccessDetailsForGroupOrUserbyEntIdandGroupDB(entId,dr[0].ToString()));

            return accessDict;
        }
            }
    /// <summary>
    /// This class is representative of the backend object 'Shop_Child_Prdcts_Inventory'
    /// </summary>
    public class ShopChildProdsInventory
    {
        private String entityId;
        private String prodCatId;
        private String prodName;
        private float qnty;
        private String msrmntUnit;
        private String unitSrcPrice;
        private String unitListPrice;
        private String createdBy;
        private String dateCreated;
        private String currency;

        private static String sessionUser = "";

        public const String SHOP_CHILD_PROD_INVNTRY_TABLE = "Shop_Child_Prdcts_Inventory";


        public const String SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID = "Shop_Usr_id";
        public const String SHOP_CHILD_PROD_INVNTRY_COL_PROD_CAT_ID = "Category_id";
        public const String SHOP_CHILD_PROD_INVNTRY_COL_PROD_NAME = "Product_Name";
        public const String SHOP_CHILD_PROD_INVNTRY_COL_QNTY = "Quantity";
        public const String SHOP_CHILD_PROD_INVNTRY_COL_MSRMNT_UNIT = "msrmnt_unit";
        public const String SHOP_CHILD_PROD_INVNTRY_COL_UNIT_SRC_PRC = "Unit_Src_Price";
        public const String SHOP_CHILD_PROD_INVNTRY_COL_UNIT_LST_PRC = "Unit_List_Price";
        public const String SHOP_CHILD_PROD_INVNTRY_COL_CREATED_BY = "Created_By";
        public const String SHOP_CHILD_PROD_INVNTRY_COL_DATE_CREATED = "Date_Created";
        public const String SHOP_CHILD_PROD_INVNTRY_COL_CURRENCY = "Currency_Id";

        public const String SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_INVNTRY_COL_PROD_CAT_ID_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_INVNTRY_COL_PROD_NAME_TYPE= Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_INVNTRY_COL_QNTY_TYPE = Connections.NUMBER_TYPE;
        public const String SHOP_CHILD_PROD_INVNTRY_COL_MSRMNT_UNIT_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_INVNTRY_COL_UNIT_SRC_PRC_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_INVNTRY_COL_UNIT_LST_PRC_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_INVNTRY_COL_CREATED_BY_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_INVNTRY_COL_DATE_CREATED_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_INVNTRY_COL_CURRENCY_TYPE = Connections.STRING_TYPE;


        public String getCurrency()
        {
            return currency;
        }
        public void setCurrency(String currency)
        {
            this.currency = currency;
        }
        public String getEntityId()
        {
            return this.entityId;
        }
        public void setEntityId(String entId)
        {
            this.entityId = entId;
        }
        public String getProdCatId()
        {
            return this.prodCatId;
        }
        public void setProdCatId(String pId)
        {
            this.prodCatId = pId;
        }
        public String getProdName()
        {
            return this.prodName;
        }
        public void setProdName(String prodNm)
        {
            this.prodName = prodNm;
        }
        public float getQnty()
        {
            return this.qnty;
        }
        public void setQnty(float qnt)
        {
            this.qnty = qnt;
        }
        public String getMsrmntUnit()
        {
            return this.msrmntUnit;
        }
        public void setMsrmntUnit(String mUnit)
        {
            this.msrmntUnit = mUnit;
        }
        public String getUnitSrcPrice()
        {
            return this.unitSrcPrice;
        }
        public void setUnitSrcPrice(String uSrcPrc)
        {
            this.unitSrcPrice = uSrcPrc;
        }
        public String getUnitListPrice()
        {
            return this.unitListPrice;
        }
        public void setUnitListPrice(String uLPrc)
        {
            this.unitListPrice = uLPrc;
        }
        public String getCreatedBy()
        {
            return this.createdBy;
        }
        public void setCreatedBy(String cBy)
        {
            this.createdBy = cBy;
        }
        public String getDateCreated()
        {
            return this.dateCreated;
        }
        public void setDateCreated(String dC)
        {
            this.dateCreated = dC;
        }

        /// <summary>
        /// This method inserts the passed object into the database.
        /// </summary>
        /// <param name="chldPrdObj"></param>
        /// <returns></returns>
        public static int insertShopChildProdsInventoryDB(ShopChildProdsInventory chldPrdObj)
        {
            if (chldPrdObj.getEntityId() == null || chldPrdObj.getEntityId().Equals("") || chldPrdObj.getProdName() == null || chldPrdObj.getProdName().Equals("")
                || chldPrdObj.getProdCatId() == null || chldPrdObj.getProdCatId().Equals(""))
                throw new CustomExceptions.businessRuleViolationException("Incorrect/Missing required data passed to ShopChildProdsInventory.insertShopChildProdsInventoryDB");
            int rowsAffected = 0;


            String insertCmd = "insert into " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_TABLE
            + " ("
            + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID + ","
            + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_CAT_ID + ","
            + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_NAME + ","
            + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_QNTY + ","
            + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_LST_PRC + ","
            + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_SRC_PRC + ","
            + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CREATED_BY + ","
             + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_MSRMNT_UNIT + ","
             + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CURRENCY + ","
            + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_DATE_CREATED + ")"
            + "values (";
            Connections cn = new Connections();

            insertCmd = insertCmd + "'" + chldPrdObj.getEntityId() + "'," + "'" +
            chldPrdObj.getProdCatId() + "'," + "'" +
            chldPrdObj.getProdName() + "'," + 
            chldPrdObj.getQnty() + "," + "'" +
            chldPrdObj.getUnitListPrice() + "'," + "'" +
            chldPrdObj.getUnitSrcPrice() + "'," + "'" +
            chldPrdObj.getCreatedBy() + "'," + "'" +
            chldPrdObj.getMsrmntUnit() + "'," + "'" +
            chldPrdObj.getCurrency() + "'," + "'" +
            chldPrdObj.getDateCreated()+ "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            return rowsAffected;

        }

        public static int updateShopChildProdsInventoryDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

           // if (!whereClause.TryGetValue(Requirement.REQ_COL_REQ_ID, out whereClauseCheck))
                //throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Requirement.updateRequirementDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to ShopChildProdsInventory.updateShopChildProdsInventoryDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to ShopChildProdsInventory.updateShopChildProdsInventoryDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CREATED_BY, ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CREATED_BY_TYPE);
            chkDataType.Add(ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_DATE_CREATED, ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_DATE_CREATED_TYPE);
            chkDataType.Add(ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID, ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID_TYPE);
            chkDataType.Add(ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_MSRMNT_UNIT, ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_MSRMNT_UNIT_TYPE);
            chkDataType.Add(ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_CAT_ID, ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_CAT_ID_TYPE);
            chkDataType.Add(ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_NAME, ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_NAME_TYPE);
            chkDataType.Add(ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_QNTY, ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_QNTY_TYPE);
            chkDataType.Add(ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_LST_PRC, ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_LST_PRC_TYPE);
            chkDataType.Add(ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_SRC_PRC, ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_SRC_PRC_TYPE);
            chkDataType.Add(ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CURRENCY, ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CURRENCY_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to ShopChildProdsInventory.updateShopChildProdsInventoryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to ShopChildProdsInventory.updateShopChildProdsInventoryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }
        /// <summary>
        /// For a given entity id and product name this method returns the 'ShopChildProdsInventory' object from database
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="prodNm"></param>
        /// <returns></returns>
        public static ShopChildProdsInventory getShopChildProdObjbyEntIdandProdNameDB(String entId, String prodNm)
        {
            if (entId == null || entId.Equals("") || prodNm == null || prodNm.Equals(""))
                throw new CustomExceptions.businessRuleViolationException("Invalid entity id and/or product Name sent to ShopChildProdsInventory.getShopChildProdObjbyEntIdandProdNameDB");

            Connections cn = new Connections();
            String query = "select " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID +
                "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_CAT_ID +
                 "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_NAME +
                  "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_QNTY +
                   "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_LST_PRC +
                    "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_SRC_PRC +
                     "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CREATED_BY +
                      "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_DATE_CREATED +
                      "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_MSRMNT_UNIT +
                      "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CURRENCY +
                 " from " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_TABLE +
                " where " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID + "='" + entId.Trim() + "'" +
                " and " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_NAME + "='" + prodNm.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ShopChildProdsInventory shopChldObj = new ShopChildProdsInventory();

            foreach (DataRow dr in dt.Rows)
            {
                shopChldObj.setEntityId(dr[0].ToString());
                shopChldObj.setProdCatId(dr[1].ToString());
                shopChldObj.setProdName(dr[2].ToString());
                shopChldObj.setQnty(float.Parse(dr[3].ToString()));
                shopChldObj.setUnitListPrice(dr[4].ToString());
                shopChldObj.setUnitSrcPrice(dr[5].ToString());
                shopChldObj.setCreatedBy(dr[6].ToString());
                shopChldObj.setDateCreated(dr[7].ToString());
                shopChldObj.setMsrmntUnit(dr[8].ToString());
                shopChldObj.setCurrency(dr[9].ToString());
            }
            cn.disconnect();
            return shopChldObj;
        }
        /// <summary>
        /// For a given entity id this method return the dictionary containing all the 'ShopChildProdsInventory' objects associated with that entity.
        /// The key is the product name and the value is of type 'ShopChildProdsInventory'
        /// </summary>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static Dictionary<String, ShopChildProdsInventory> getAllShopChildProdObjsbyEntId(String entId)
        {
            if (entId == null || entId.Equals(""))
                throw new CustomExceptions.businessRuleViolationException("invalid entity id sent to ShopChildProdsInventory.getAllShopChildProdObjsbyEntId");

            Connections cn = new Connections();
            String query = "select " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID +
                "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_CAT_ID +
                 "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_NAME +
                  "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_QNTY +
                   "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_LST_PRC +
                    "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_SRC_PRC +
                     "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CREATED_BY +
                      "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_DATE_CREATED +
                      "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_MSRMNT_UNIT +
                      "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CURRENCY +
                 " from " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_TABLE +
                " where " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID + "='" + entId.Trim() + "'";
                


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, ShopChildProdsInventory> tempDict = new Dictionary<string, ShopChildProdsInventory>();
            

            foreach (DataRow dr in dt.Rows)
            {
                ShopChildProdsInventory shopChldObj = new ShopChildProdsInventory();

                shopChldObj.setEntityId(dr[0].ToString());
                shopChldObj.setProdCatId(dr[1].ToString());
                shopChldObj.setProdName(dr[2].ToString());
                shopChldObj.setQnty(float.Parse(dr[3].ToString()));
                shopChldObj.setUnitListPrice(dr[4].ToString());
                shopChldObj.setUnitSrcPrice(dr[5].ToString());
                shopChldObj.setCreatedBy(dr[6].ToString());
                shopChldObj.setDateCreated(dr[7].ToString());
                shopChldObj.setMsrmntUnit(dr[8].ToString());
                shopChldObj.setCurrency(dr[9].ToString());

                tempDict.Add(shopChldObj.getProdName(), shopChldObj);
            }
            cn.disconnect();
            return tempDict;
        }
        /// <summary>
        /// For a given entity id and product category id this method returns a dictionary containing objects of 'ShopChildProdsInventory'.
        /// The key is product name and the value is object of type 'ShopChildProdsInventory'.
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="prodCatId"></param>
        /// <returns></returns>
        public static Dictionary<String, ShopChildProdsInventory> getAllShopChildProdObjsbyEntIdandProdCatId(String entId, String prodCatId)
        {
           if (entId == null || entId.Equals(""))
                throw new CustomExceptions.businessRuleViolationException("invalid entity id sent to ShopChildProdsInventory.getAllShopChildProdObjsbyEntIdandProdCatId");

            Connections cn = new Connections();
            String query = "select " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID +
                "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_CAT_ID +
                 "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_NAME +
                  "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_QNTY +
                   "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_LST_PRC +
                    "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_UNIT_SRC_PRC +
                     "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CREATED_BY +
                      "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_DATE_CREATED +
                      "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_MSRMNT_UNIT +
                      "," + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_CURRENCY +
                 " from " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_TABLE +
                " where " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_ENTITY_ID + "='" + entId.Trim() + "'" +
                " and " + ShopChildProdsInventory.SHOP_CHILD_PROD_INVNTRY_COL_PROD_CAT_ID + "='" + prodCatId.Trim() + "'";



            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, ShopChildProdsInventory> tempDict = new Dictionary<string, ShopChildProdsInventory>();


            foreach (DataRow dr in dt.Rows)
            {
                ShopChildProdsInventory shopChldObj = new ShopChildProdsInventory();

                shopChldObj.setEntityId(dr[0].ToString());
                shopChldObj.setProdCatId(dr[1].ToString());
                shopChldObj.setProdName(dr[2].ToString());
                shopChldObj.setQnty(float.Parse(dr[3].ToString()));
                shopChldObj.setUnitListPrice(dr[4].ToString());
                shopChldObj.setUnitSrcPrice(dr[5].ToString());
                shopChldObj.setCreatedBy(dr[6].ToString());
                shopChldObj.setDateCreated(dr[7].ToString());
                shopChldObj.setMsrmntUnit(dr[8].ToString());
                shopChldObj.setCurrency(dr[9].ToString());

                tempDict.Add(shopChldObj.getProdName(), shopChldObj);
            }
            cn.disconnect();
            return tempDict;
        }
    }

    /// <summary>
    /// This class is representative of the backend object 'Shop_Child_Prdcts_Spec'
    /// </summary>
    public class ShopChildProdsSpecs
    {
        private String entityId;
        private String prodName;
        private String featId;
        private String specText;
        private String fromSpecId;
        private String toSpecId;
        private String imgPath;

        private FileUpload fileStream;

        private static String sessionUser = "";

        public const String SHOP_CHILD_PROD_SPEC_TABLE = "Shop_Child_Prdcts_Spec";


        public const String SHOP_CHILD_PROD_SPEC_COL_ENTITY_ID = "Shop_Usr_id";        
        public const String SHOP_CHILD_PROD_SPEC_COL_PROD_NAME = "Product_Name";
        public const String SHOP_CHILD_PROD_SPEC_COL_FEAT_ID = "Feature_id";
        public const String SHOP_CHILD_PROD_SPEC_COL_SPEC_TEXT = "Specification_Text";
        public const String SHOP_CHILD_PROD_SPEC_COL_FROM_SPEC_ID = "From_Spec_id";
        public const String SHOP_CHILD_PROD_SPEC_COL_TO_SPEC_ID = "To_Spec_id";
        public const String SHOP_CHILD_PROD_SPEC_COL_IMG_PATH = "Pic_Path";

        public const String SHOP_CHILD_PROD_SPEC_COL_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_SPEC_COL_PROD_NAME_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_SPEC_COL_FEAT_ID_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_SPEC_COL_SPEC_TEXT_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_SPEC_COL_FROM_SPEC_ID_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_SPEC_COL_TO_SPEC_ID_TYPE = Connections.STRING_TYPE;
        public const String SHOP_CHILD_PROD_SPEC_COL_IMG_PATH_TYPE = Connections.STRING_TYPE;

        public FileUpload getFileStream()
        {
            return this.fileStream;
        }
        public void setFileStream(FileUpload fs)
        {
            this.fileStream = fs;
        }
        public String getEntityId()
        {
            return this.entityId;
        }
        public void setEntityId(String entId)
        {
            this.entityId = entId;
        }
        public String getProdName()
        {
            return this.prodName;
        }
        public void setProdName(String prodNm)
        {
            this.prodName = prodNm;
        }
        public String getFeatId()
        {
            return this.featId;
        }
        public void setFeatId(String ftId)
        {
            this.featId = ftId;
        }
        public String getSpecText()
        {
            return this.specText;
        }
        public void setSpecText(String spTxt)
        {
            this.specText = spTxt;
        }
        public String getFromSpecId()
        {
            return this.fromSpecId;
        }
        public void setFromSpecId(String spcId)
        {
            this.fromSpecId = spcId;
        }
        public String getToSpecId()
        {
            return this.toSpecId;
        }
        public void setToSpecId(String spId)
        {
            this.toSpecId = spId;
        }
        public String getImgPath()
        {
            return this.imgPath;
        }
        public void setImgPath(String imPath)
        {
            this.imgPath = imPath;
        }
        /// <summary>
        /// This method needs to be passed the main business entity id. This method will create a folder structure using that entity id and this objects
        /// requirement id.
        /// Product Name must be set to this object before this method is called.
        /// Also, this method will generate a image id for the image and prepond the image name (as stored with the filestream property) with the id
        /// </summary>
        /// <param name="entId"></param>
        public void setImgPathInFileStore(String entId)
        {
            if (entId == null || entId.Equals("") || this.getProdName() == null || this.getProdName().Equals(""))
                throw new CustomExceptions.businessRuleViolationException("Product Name id and/or entity id not set");
            else
                imgPath = this.generateImagePath(entId + "\\" + this.getProdName()) + "\\" + new Id().getNewId(Id.ID_TYPE_IMAGE_ID_STRING) + "_" + this.getFileStream().FileName;

        }
        /// <summary>
        /// Provided a folder path (can have multi-level path also separated by "\\" this method will create the entire
        /// folder structure.
        /// </summary>
        /// <param name="folderName"></param>
        /// <returns></returns>
        public String generateImagePath(String folderName)
        {
            String fileStoreRoot = App.Default.FileStoreRoot;
            String[] delimList = { "\\" };
            String[] subFolders = folderName.Split(delimList, StringSplitOptions.RemoveEmptyEntries);

            String returnPath = "";
            try
            {
                for (int i = 0; i < subFolders.Length; i++)
                    if (!Directory.Exists(fileStoreRoot + "\\" + subFolders[i]))
                    {
                        Directory.CreateDirectory(fileStoreRoot + "\\" + subFolders[i]);
                        fileStoreRoot += "\\" + subFolders[i];
                    }
                    else
                        fileStoreRoot += "\\" + subFolders[i];

                returnPath = fileStoreRoot;
            }
            catch (Exception ex)
            {
                returnPath = "";

            }
            return returnPath;
        }

        /// <summary>
        /// Passed an ArrayList of objects of type 'ShopChildProdsSpecs' this method inserts these into the DB
        /// </summary>
        /// <param name="specList"></param>
        /// <returns></returns>
        public static int insertShopChildProdsSpecsListDB(ArrayList specList)
        {
            int rowsAffected = 0;
            for (int i = 0; i < specList.Count; i++)
                rowsAffected+=insertShopChildProdsSpecsDB((ShopChildProdsSpecs)specList[i]);

            return rowsAffected;
        }
        public static int insertShopChildProdsSpecsDB(ShopChildProdsSpecs chldPrdObj)
        {
            if (chldPrdObj.getEntityId() == null || chldPrdObj.getEntityId().Equals("") || chldPrdObj.getProdName() == null || chldPrdObj.getProdName().Equals(""))               
                throw new CustomExceptions.businessRuleViolationException("Incorrect/Missing required data passed to ShopChildProdsSpecs.insertShopChildProdsSpecsDB");
            
            int rowsAffected = 0;


            String insertCmd = "insert into " + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_TABLE
            + " ("
            + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_ENTITY_ID + ","
            + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_FEAT_ID + ","
            + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_FROM_SPEC_ID + ","
            + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_IMG_PATH + ","
            + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_PROD_NAME + ","
            + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_SPEC_TEXT + ","
            + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_TO_SPEC_ID + ")"
            + "values (";
            Connections cn = new Connections();

            insertCmd = insertCmd + "'" + chldPrdObj.getEntityId() + "'," + "'" +
            chldPrdObj.getFeatId() + "'," + "'" +
            chldPrdObj.getFromSpecId() + "'," + "'" +
            chldPrdObj.getImgPath()+ "'," + "'" +
            chldPrdObj.getProdName() + "'," + "'" +
            chldPrdObj.getSpecText() + "'," + "'" +
            chldPrdObj.getToSpecId() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();

            FileUpload fileControl = chldPrdObj.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(chldPrdObj.getImgPath());
                

            return rowsAffected;

        }
        
        public static int updateShopChildProdsSpecsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            // if (!whereClause.TryGetValue(Requirement.REQ_COL_REQ_ID, out whereClauseCheck))
            //throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Requirement.updateRequirementDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to ShopChildProdsSpecs.updateShopChildProdsSpecsDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to ShopChildProdsSpecs.updateShopChildProdsSpecsDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_ENTITY_ID, ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_ENTITY_ID_TYPE);
            chkDataType.Add(ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_FEAT_ID, ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_FEAT_ID_TYPE);
            chkDataType.Add(ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_FROM_SPEC_ID, ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_FROM_SPEC_ID_TYPE);
            chkDataType.Add(ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_IMG_PATH, ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_IMG_PATH_TYPE);
            chkDataType.Add(ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_PROD_NAME, ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_PROD_NAME_TYPE);
            chkDataType.Add(ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_SPEC_TEXT, ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_SPEC_TEXT_TYPE);
            chkDataType.Add(ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_TO_SPEC_ID, ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_TO_SPEC_ID_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to ShopChildProdsSpecs.updateShopChildProdsSpecsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to ShopChildProdsSpecs.updateShopChildProdsSpecsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
                if (operation.Equals(Connections.OPERATION_DELETE))
                {
                    String docPath = "";
                    DataSet ds = cn.execQuery("select " + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_IMG_PATH + " from "
                        + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_TABLE + " where " 
                        + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_PROD_NAME + "='" + whereClause[SHOP_CHILD_PROD_SPEC_COL_PROD_NAME] + "'" + " and "
                        + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_ENTITY_ID + "='" + whereClause[SHOP_CHILD_PROD_SPEC_COL_ENTITY_ID] + "'"+" and "
                        + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_FEAT_ID + "='" + whereClause[SHOP_CHILD_PROD_SPEC_COL_FEAT_ID]+"'"
                        , "");

                    DataTable dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {
                        docPath = dr[0].ToString();
                    }

                    if (File.Exists(docPath))
                        File.Delete(docPath);

                }

            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);

            cn.disconnect();

            return rowsAffected;
        }
        /// <summary>
        /// For a given entity id and product name this method returns all associated specification objects from the database.
        /// This method return a dictionary with the feature id as the key and 'ShopChildProdsSpecs' object as the value.
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="prodNm"></param>
        /// <returns></returns>
        public static Dictionary<String,ShopChildProdsSpecs> getShopChildProdsSpecObjbyEntIdandProdNameDB(String entId, String prodNm)
        {
            if (entId == null || entId.Equals("") || prodNm == null || prodNm.Equals(""))
                throw new CustomExceptions.businessRuleViolationException("invalid entity id and /or Product Name sent to ShopChildProdsSpecs.getShopChildProdsSpecObjbyEntIdandProdNameDB");

            Connections cn = new Connections();
            String query = "select " + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_ENTITY_ID +
                "," + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_FEAT_ID +
                 "," + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_FROM_SPEC_ID +
                  "," + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_IMG_PATH +
                   "," + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_PROD_NAME +
                    "," + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_SPEC_TEXT +
                     "," + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_TO_SPEC_ID +
                 " from " + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_TABLE +
                " where " + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_ENTITY_ID + "='" + entId.Trim() + "'" +
                " and " + ShopChildProdsSpecs.SHOP_CHILD_PROD_SPEC_COL_PROD_NAME + "='" + prodNm.Trim() + "'";



            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, ShopChildProdsSpecs> tempDict = new Dictionary<string, ShopChildProdsSpecs>();


            foreach (DataRow dr in dt.Rows)
            {
                ShopChildProdsSpecs shopChldObjSpec = new ShopChildProdsSpecs();

                shopChldObjSpec.setEntityId(dr[0].ToString());
                shopChldObjSpec.setFeatId(dr[1].ToString());
                shopChldObjSpec.setFromSpecId(dr[2].ToString());
                shopChldObjSpec.setImgPath(dr[3].ToString());
                shopChldObjSpec.setProdName(dr[4].ToString());
                shopChldObjSpec.setSpecText(dr[5].ToString());
                shopChldObjSpec.setToSpecId(dr[6].ToString());

                tempDict.Add(shopChldObjSpec.getFeatId(), shopChldObjSpec);
            }
            cn.disconnect();
            return tempDict;
        }
    }
    /// <summary>
    /// this class mainly represents two backend tables - 'Policy_Details' and 'Policy_Documents'
    /// </summary>
    public class Policy
    {
        private String polNo;
        private String mainBusinessEntityId;
        private String polPurchDate;
        private String polRenDate;
        private String polName;
        private String issueComp;
        /// <summary>
        /// this is an arraylist of byte streams
        /// each member is a byte stream containing a policy related document
        /// </summary>
        private Dictionary<String,byte[]>  polDoc; 

        private static String sessionUser = "";

        public const String POLICY_TABLE = "Policy_Details";
        public const String POLICY_DOC_TABLE = "Policy_Documents";

        public const String POL_COL_POL_NO = "Policy_No";
        public const String POL_COL_ENTITY_ID = "Cmp_Usr_Shop_id";
        public const String POL_COL_PURCH_DATE = "Policy_purchase_date";
        public const String POL_COL_REN_DATE = "renewal_date";
        public const String POL_COL_POL_NAME = "Policy_Name";
        public const String POL_COL_ISSUE_COMP = "Issuing_company";

        public const String POL_DOC_COL_POL_NO = "Policy_No";
        public const String POL_DOC_COL_POL_DOC = "policy_document";
        public const String POL_DOC_COL_DOC_ID = "doc_id";

        public const String POL_COL_POL_NO_TYPE = Connections.STRING_TYPE;
        public const String POL_COL_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String POL_COL_PURCH_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String POL_COL_REN_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String POL_COL_POL_NAME_TYPE = Connections.STRING_TYPE;
        public const String POL_COL_ISSUE_COMP_TYPE = Connections.STRING_TYPE;

        public const String POL_DOC_COL_POL_NO_TYPE = Connections.STRING_TYPE;
        public const String POL_DOC_COL_POL_DOC_TYPE = Connections.BLOB_TYPE;
        public const String POL_DOC_COL_DOC_ID_TYPE = Connections.STRING_TYPE;

        public String getPolNo()
        {
            return polNo;
        }
        public void setPolNo(String pNo)
        {
            polNo = pNo;
        }
        public String getMainBusinessEntityId()
        {
            return mainBusinessEntityId;
        }
        public void setMainBusinessEntityId(String eId)
        {
            mainBusinessEntityId = eId;
        }
        public String getPolPurchDate()
        {
            return polPurchDate;
        }
        public void setPolPurchDate(String purchDate)
        {
            polPurchDate = purchDate;
        }
        public String getPolRenDate()
        {
            return polRenDate;
        }
        public void setPolRenDate(String renDate)
        {
            polRenDate = renDate;
        }
        public String getPolName()
        {
            return polName;
        }
        public void setPolName(String pName)
        {
            polName = pName;
        }
        public String getIssueComp()
        {
            return issueComp;
        }
        public void setIssueComp(String iComp)
        {
            issueComp = iComp;
        }
        public Dictionary<String,byte[]> getPolDocs()
        {
            return polDoc;
        }
        public void setPolDocs(Dictionary<String,byte[]> pDoc)
        {
            polDoc = pDoc;
        }
        /// <summary>
        /// pass the doc id as the parameter and if the id existis as a key in the 'polDoc' property of the respective object
        /// the respective document byte stream will be returned
        /// </summary>
        /// <param name="docId"></param>
        /// <returns></returns>
        public byte[] getPolDocbyId(String docId)
        {
            byte[] outVal;
            polDoc.TryGetValue(docId, out outVal);

            return outVal;
        }
        public void setPolDocbyId(String docId, byte[] content)
        {
            polDoc.Add(docId.Trim(), content);
        }
        /// <summary>
        /// for a given policy number returns the associated doc_id and document byte streams in a dictionary
        /// </summary>
        /// <param name="polNo"></param>
        /// <returns></returns>
        public static Dictionary<String,byte[]> getPolicyDocsforPolicyNoDB(String polNo)
        {
            if (polNo.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty policy number passed in Policy.getPolicyDocsforPolicyNoDB"));

            String cmd = " select " + Policy.POL_DOC_COL_POL_DOC +
                ","+Policy.POL_DOC_COL_DOC_ID+
                 " from " + Policy.POLICY_DOC_TABLE +
                " where " + Policy.POL_DOC_COL_POL_NO + "=" + "'" + polNo.Trim() + "'";

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, byte[]> polDocs = new Dictionary<String, byte[]>();

            foreach (DataRow dr in dt.Rows)
            {
                polDocs.Add((String)dr[1],(byte[])dr[0]);
          
            }
            cn.disconnect();

            return polDocs;

        }
        /// <summary>
        /// this is a heavy weight method as it returns the associated policy documents as well
        /// if the documents are not required to be retrieved, use the lightweight version of this method - 'getPolicybyIdwoDocDB'
        /// </summary>
        /// <param name="polNo"></param>
        /// <returns></returns>
        public static Policy getPolicybyIdDB(String polNo)
        {
            /*this is a heavy weight method as it returns the associated policy documents as well
             * if the documents are not required to be retrieved, use the lightweight version of this method - 'getPolicybyIdwoDocDB'
             * 
             * @Author: shibasis sengupta
            */

            if (polNo.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty policy number passed in Policy.getPolicybyIdDB"));

            String cmd = " select " + Policy.POL_COL_ENTITY_ID +
                "," + Policy.POL_COL_ISSUE_COMP +
                "," + Policy.POL_COL_POL_NAME +
                 "," + Policy.POL_COL_POL_NO +
                 "," + Policy.POL_COL_PURCH_DATE +
                 "," + Policy.POL_COL_REN_DATE +
                 " from " + Policy.POLICY_TABLE +
                " where " + Policy.POL_COL_POL_NO + "=" + "'" + polNo.Trim() + "'";

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];

            Policy polDetails = new Policy();

            foreach (DataRow dr in dt.Rows)
            {
                polDetails.setMainBusinessEntityId(dr[0].ToString());
                polDetails.setIssueComp(dr[1].ToString());
                polDetails.setPolName(dr[2].ToString());
                polDetails.setPolNo(dr[3].ToString());
                polDetails.setPolPurchDate(dr[4].ToString());
                polDetails.setPolRenDate(dr[5].ToString());

                Dictionary<String, byte[]> temp = new Dictionary<string, byte[]>();
                temp = Policy.getPolicyDocsforPolicyNoDB(polNo.Trim());

                polDetails.setPolDocs(temp);
           
            }

            cn.disconnect();
            return polDetails;
        }
        /// <summary>
        /// a lightweight version of the method 'getPolicybyIdDB'
        /// does not return the associated policy documents
        /// </summary>
        /// <param name="pNo"></param>
        /// <returns></returns>
        public static Policy getPolicybyIdwoDocDB(String polNo)
        {
            /*a lightweight version of the method 'getPolicybyIdDB'
             * does not return the associated policy documents
             * 
             * @Author: shibasis sengupta
            */
            if (polNo.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty policy number passed in Policy.getPolicybyIdDB"));

            String cmd = " select " + Policy.POL_COL_ENTITY_ID +
                "," + Policy.POL_COL_ISSUE_COMP +
                "," + Policy.POL_COL_POL_NAME +
                 "," + Policy.POL_COL_POL_NO +
                 "," + Policy.POL_COL_PURCH_DATE +
                 "," + Policy.POL_COL_REN_DATE +
                 " from " + Policy.POLICY_TABLE +
                " where " + Policy.POL_COL_POL_NO + "=" + "'" + polNo.Trim() + "'";

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(cmd, sessionUser);
            DataTable dt = ds.Tables[0];

            Policy polDetails = new Policy();

            foreach (DataRow dr in dt.Rows)
            {
                polDetails.setMainBusinessEntityId(dr[0].ToString());
                polDetails.setIssueComp(dr[1].ToString());
                polDetails.setPolName(dr[2].ToString());
                polDetails.setPolNo(dr[3].ToString());
                polDetails.setPolPurchDate(dr[4].ToString());
                polDetails.setPolRenDate(dr[5].ToString());

                Dictionary<String, byte[]> temp = new Dictionary<string, byte[]>();
                //insert the empty arraylist to prevent getting 'null pointer exception' in the calling code in case of accidental access to documents
                polDetails.setPolDocs(temp);

            }

            cn.disconnect();
            return polDetails;
        

        }
        /// <summary>
        /// inserts into database 'Policy_Documents' the documents related to a policy
        /// the second parameter is a dictionary of {'doc_id','document content'}
        /// </summary>
        /// <param name="docs"></param>
        /// <returns></returns>
        public static int insertPolicyDocsforPolDB(String polNo,Dictionary<String,byte[]> docs)
        {
            if (polNo.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty policy no  string sent to method Policy.insertPolicyDocsforPolDB"));

            if(docs.Count==0)
                throw (new CustomExceptions.invalidParamException("Empty document list  sent to method Policy.insertPolicyDocsforPolDB"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + Policy.POLICY_DOC_TABLE
                + " ("
                + Policy.POL_DOC_COL_POL_NO + ","
                + Policy.POL_DOC_COL_DOC_ID + ","
                + Policy.POL_DOC_COL_POL_DOC +  ")"
                + "values (" + "'" + polNo.Trim() + "'" + ",";
            Connections cn = new Connections();

            foreach(KeyValuePair<String,byte[]> kvp in docs)
            {
                insertCmd = insertCmd + "'"+kvp.Key+"',"+(byte[])kvp.Value;

                insertCmd += ")";

                //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            return rowsAffected;

        }
        /// <summary>
        /// inserts the policy details into the two database tables 'Policy_Details' and 'Policy_Documents'
        /// </summary>
        /// <param name="polNo"></param>
        /// <returns></returns>
        public static int insertPolicyDetailsDB(Policy pol)
        {
            if (pol.getPolNo().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty policy no  string sent to method Policy.insertPolicyDetailsDB"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + Policy.POLICY_TABLE
                + " ("
                + Policy.POL_COL_ENTITY_ID + ","
                + Policy.POL_COL_ISSUE_COMP + ","
                + Policy.POL_COL_POL_NAME + ","
                + Policy.POL_COL_POL_NO + ","
                + Policy.POL_COL_PURCH_DATE + ","
                + Policy.POL_COL_REN_DATE + ")"
                + "values (" + "'" + pol.getMainBusinessEntityId() + "'" + ",";
            Connections cn = new Connections();


            insertCmd = insertCmd + "'" + pol.getIssueComp() + "'," + "'" +
            pol.getPolName() + "'" + "," + "'" +
            pol.getPolNo() + "'" + "," + "'" +
            pol.getPolPurchDate() + "'" + "," + "'" +
            pol.getPolRenDate() + "'";

            insertCmd += ")";

            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            if(pol.getPolDocs().Count!=0)
            rowsAffected += Policy.insertPolicyDocsforPolDB(pol.getPolNo(),pol.getPolDocs());

            return rowsAffected;
           
        }
        /// <summary>
        /// updates the policy details except the document details
        /// for updating the document related details use the other update method 'updatePolicyDocsbyPolicyIdDB'
        /// </summary>
        public static int updatePolicyDetailswoDocsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Policy.POL_COL_POL_NO, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Policy.updatePolicyDetailswoDocsDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Policy.updatePolicyDetailswoDocsDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Policy.updatePolicyDetailswoDocsDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Policy.POLICY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Policy.POLICY_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(Policy.POL_COL_REN_DATE, Policy.POL_COL_REN_DATE_TYPE);
            chkDataType.Add(Policy.POL_COL_PURCH_DATE, Policy.POL_COL_PURCH_DATE_TYPE);
            chkDataType.Add(Policy.POL_COL_POL_NO, Policy.POL_COL_POL_NO_TYPE);
            chkDataType.Add(Policy.POL_COL_POL_NAME, Policy.POL_COL_POL_NAME_TYPE);
            chkDataType.Add(Policy.POL_COL_ISSUE_COMP, Policy.POL_COL_ISSUE_COMP_TYPE);
            chkDataType.Add(Policy.POL_COL_ENTITY_ID, Policy.POL_COL_ENTITY_ID_TYPE);
            
            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Policy.updatePolicyDetailswoDocsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Policy.updatePolicyDetailswoDocsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        

        }
        /// <summary>
        /// update the document content for a given policy number and doc id
        /// </summary>
        /// <param name="polNo"></param>
        /// <param name="docId"></param>
        /// <param name="content"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updatePolicyDocsbyPolicyIdDB(String polNo,String docId,byte[] content,String op)
        {
            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Policy.updatePolicyDocsbyPolicyIdDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && content.Length == 0)
                throw (new CustomExceptions.invalidParamException(" Empty Document Passed to Policy.updatePolicyDocsbyPolicyIdDB  "));

            /*In case of Update -> 'update <table_name> set '
            * In case of delete -> 'delete from <table_name> '
            */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Policy.POLICY_DOC_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Policy.POLICY_DOC_TABLE) + " ";

            if (operation.Equals(Connections.OPERATION_UPDATE))
                cmd += Policy.POL_DOC_COL_POL_DOC + "=" + content;

            cmd += " where " + Policy.POL_DOC_COL_POL_NO + "=" + "'"+polNo.Trim() +"'"+ " and " + Policy.POL_DOC_COL_DOC_ID + "=" + "'"+docId.Trim()+"'";

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }



    }
    /// <summary>
    /// for any given requirement, this class maps the related specifications to that requirement,
    /// this class is representative of the database table 'Requirement_Specification_Map'
    /// </summary>
    public class Requirement_Spec
    {
        private String reqId;
        private String prodCatId;
        private String specText;
        private String fromSpecId;
        private String toSpecId;
        private String createdUser;
        private String createDate;
        private String featId;
        //private byte[] pic;
        private String imgPath;
        private FileUpload fileStream;

        private static String sessionUser = "";

        public const String REQ_SPEC_TABLE = "Requirement_Specification_Map";

        public const String REQ_SPEC_COL_REQ_ID = "requirement_id";
        public const String REQ_SPEC_COL_PROD_ID="Product_Service_Category";
        public const String REQ_SPEC_COL_SPEC_TXT="Specification_Text";
        public const String REQ_SPEC_COL_FROM_SPEC_ID="From_Spec_id";
        public const String REQ_SPEC_COL_TO_SPEC_ID="To_Spec_id";
        public const String REQ_SPEC_COL_CREATED_USR="Created_By";
        public const String REQ_SPEC_COL_CREATED_DATE="Date_Created";
        public const String REQ_SPEC_COL_FEAT_ID = "Feature_Id";
        public const String REQ_SPEC_COL_PIC_PATH = "Pic_Path";

        public const String REQ_SPEC_COL_REQ_ID_TYPE = Connections.STRING_TYPE;
        public const String REQ_SPEC_COL_PROD_ID_TYPE = Connections.STRING_TYPE;
        public const String REQ_SPEC_COL_SPEC_TXT_TYPE = Connections.STRING_TYPE;
        public const String REQ_SPEC_COL_FROM_SPEC_ID_TYPE = Connections.STRING_TYPE;
        public const String REQ_SPEC_COL_TO_SPEC_ID_TYPE = Connections.STRING_TYPE;
        public const String REQ_SPEC_COL_CREATED_USR_TYPE = Connections.STRING_TYPE;
        public const String REQ_SPEC_COL_CREATED_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String REQ_SPEC_COL_FEAT_ID_TYPE = Connections.STRING_TYPE;
        public const String REQ_SPEC_COL_PIC_PATH_TYPE = Connections.STRING_TYPE;

        public String getReqId()
        {
            return reqId;
        }
        public void setReqId(String rId)
        {
            reqId = rId;
        }
        public String getProdCatId()
        {
            return prodCatId;
        }
        public void setProdCatId(String pId)
        {
            prodCatId = pId;
        }
        public String getSpecText()
        {
            return specText;
        }
        public void setSpecText(String text)
        {
            specText = text;
        }
        public String getFromSpecId()
        {
            return fromSpecId;
        }
        public void setFromSpecId(String sId)
        {
            fromSpecId = sId;
        }
        public String getToSpecId()
        {
            return toSpecId;
        }
        public void setToSpecId(String sId)
        {
            toSpecId = sId;
        }
        public String getCreatedUser()
        {
            return createdUser;
        }
        public void setCreatedUser(String cUsr)
        {
            createdUser = cUsr;
        }
        public String getCreateDate()
        {
            return createDate;
        }
        public void setCreateDate(String cDate)
        {
            createDate = cDate;
        }
        public String getFeatId()
        {
            return featId;
        }
        public void setFeatId(String fId)
        {
            featId=fId;
        }
        /*public byte[] getPic()
        {
            return pic;
        }*/
        /*public void setPic(byte[] p)
        {
            pic=p;
        }*/
        public FileUpload getFileStream()
        {
            return this.fileStream;
        }
        public void setFileStream(FileUpload fU)
        {
            this.fileStream = fU;
        }
        public String getImgPath()
        {
            return this.imgPath;
        }
        public void setImgPath(String imgPath)
        {
            this.imgPath = imgPath;
        }
        /// <summary>
        /// This method needs to be passed the main business entity id. This method will create a folder structure using that entity id and this objects
        /// requirement id.
        /// Requirement id must be set to this object before this method is called.
        /// Also, this method will generate a image id for the image and prepond the image name (as stored with the filestream property) with the id
        /// </summary>
        /// <param name="entId"></param>
        public void setImgPathInFileStore(String entId)
        {
            if (entId == null || entId.Equals("") ||this.getReqId()==null||this.getReqId().Equals(""))
                throw new CustomExceptions.businessRuleViolationException("Requirement id and/or entity id not set");
            else
                imgPath = this.generateImagePath(entId+ "\\" + this.getReqId()) +"\\"+new Id().getNewId(Id.ID_TYPE_IMAGE_ID_STRING)+ "_" + this.getFileStream().FileName;

        }
        /// <summary>
        /// Provided a folder path (can have multi-level path also separated by "\\" this method will create the entire
        /// folder structure.
        /// </summary>
        /// <param name="folderName"></param>
        /// <returns></returns>
        public String generateImagePath(String folderName)
        {
            String fileStoreRoot = App.Default.FileStoreRoot;
            String[] delimList={"\\"};
            String[] subFolders = folderName.Split(delimList, StringSplitOptions.RemoveEmptyEntries);

            String returnPath = "";
            try
            {
                for (int i = 0; i < subFolders.Length; i++)
                    if (!Directory.Exists(fileStoreRoot + "\\" + subFolders[i]))
                    {
                        Directory.CreateDirectory(fileStoreRoot + "\\" + subFolders[i]);
                        fileStoreRoot += "\\" + subFolders[i];
                    }
                    else
                        fileStoreRoot += "\\" + subFolders[i];

                returnPath = fileStoreRoot ;
            }
            catch (Exception ex)
            {
                returnPath = "";

            }
            return returnPath;
        }
        /// <summary>
        /// for a given requirement id, returns all the associated specifications  from database
        /// </summary>
        /// <param name="reqId"></param>
        public static ArrayList  getRequirementSpecsforReqbyIdDB(String reqId)
        {
            /*for a given requirement id, returns all the associated specifications  from database
             * 
             * @Author: shibasis sengupta
            */
             if (reqId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty requirement Id sent to Requirement_Spec.getRequirementSpecsforReqbyIdDB"));

            Connections cn = new Connections();
            String query = "select " +  Requirement_Spec.REQ_SPEC_COL_REQ_ID +
                "," + Requirement_Spec.REQ_SPEC_COL_FROM_SPEC_ID +
                "," + Requirement_Spec.REQ_SPEC_COL_TO_SPEC_ID+
                "," + Requirement_Spec.REQ_SPEC_COL_SPEC_TXT +
                "," + Requirement_Spec.REQ_SPEC_COL_PROD_ID +
                "," + Requirement_Spec.REQ_SPEC_COL_PIC_PATH +
                "," + Requirement_Spec.REQ_SPEC_COL_CREATED_USR +
                "," + Requirement_Spec.REQ_SPEC_COL_CREATED_DATE+
                "," + Requirement_Spec.REQ_SPEC_COL_FEAT_ID +
                " from " + Requirement_Spec.REQ_SPEC_TABLE +
                " where " + Requirement_Spec.REQ_SPEC_COL_REQ_ID + "='" + reqId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            
            ArrayList temp = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                Requirement_Spec tempSpec = new Requirement_Spec();
                tempSpec.setReqId(dr[0].ToString());
                tempSpec.setFromSpecId(dr[1].ToString());
                tempSpec.setToSpecId(dr[2].ToString());
                tempSpec.setSpecText(dr[3].ToString());
                tempSpec.setProdCatId(dr[4].ToString());
                tempSpec.setImgPath(dr[5].ToString());
                tempSpec.setCreatedUser(dr[6].ToString());
                tempSpec.setCreateDate(dr[7].ToString());
                tempSpec.setFeatId(dr[8].ToString());

                temp.Add(tempSpec);
            }
            cn.disconnect();
            return temp;

        }
        /// <summary>
        /// insert the requirement spec object to the database 
        /// </summary>
        /// <param name="rSpec"></param>
        /// <returns></returns>
        public static int insertRequirementSpecsDB(Requirement_Spec rSpec)
        {
            if (rSpec.getReqId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Requirement_Spec Id sent to Requirement_Spec.insertRequirementSpecsDB"));

            if(rSpec.getProdCatId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Product Category Id sent to Requirement_Spec.insertRequirementSpecsDB"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + Requirement_Spec.REQ_SPEC_TABLE
                + " ("
                + Requirement_Spec.REQ_SPEC_COL_REQ_ID + ","
                + Requirement_Spec.REQ_SPEC_COL_PROD_ID + ","
                + Requirement_Spec.REQ_SPEC_COL_FROM_SPEC_ID + ","
                + Requirement_Spec.REQ_SPEC_COL_TO_SPEC_ID + ","
                + Requirement_Spec.REQ_SPEC_COL_SPEC_TXT + ","
                + Requirement_Spec.REQ_SPEC_COL_PIC_PATH + ","
                + Requirement_Spec.REQ_SPEC_COL_CREATED_USR + ","
                + Requirement_Spec.REQ_SPEC_COL_FEAT_ID + ","
                + Requirement_Spec.REQ_SPEC_COL_CREATED_DATE + ")"
                + "values (";
            Connections cn = new Connections();

            insertCmd = insertCmd + "'" + rSpec.getReqId() + "'," + "'" +
            rSpec.getProdCatId() + "'," + "'" +
            rSpec.getFromSpecId() + "'," + "'" +
            rSpec.getToSpecId() + "'," + "'" +
            rSpec.getSpecText() + "','" +
            rSpec.getImgPath() + "'," + "'" + 
            rSpec.getCreatedUser() + "'," + "'" +
            rSpec.getFeatId() + "'," + "'" +
            rSpec.getCreateDate() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            //Save the image to server path
            FileUpload fileControl = rSpec.getFileStream();
            if (fileControl!=null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(rSpec.getImgPath());

            cn.disconnect();
            return rowsAffected;



        }

        public static int insertRequirementSpecsDB(ArrayList rqSpecList)
        {

            int rowsAffected = 0;            
            String insertCmd = "insert into " + Requirement_Spec.REQ_SPEC_TABLE
                + " ("
                + Requirement_Spec.REQ_SPEC_COL_REQ_ID + ","
                + Requirement_Spec.REQ_SPEC_COL_PROD_ID + ","
                + Requirement_Spec.REQ_SPEC_COL_FROM_SPEC_ID + ","
                + Requirement_Spec.REQ_SPEC_COL_TO_SPEC_ID + ","
                + Requirement_Spec.REQ_SPEC_COL_SPEC_TXT + ","
                + Requirement_Spec.REQ_SPEC_COL_PIC_PATH + ","
                + Requirement_Spec.REQ_SPEC_COL_CREATED_USR + ","
                + Requirement_Spec.REQ_SPEC_COL_FEAT_ID + ","
                + Requirement_Spec.REQ_SPEC_COL_CREATED_DATE + ")"
                + " values (";
            Connections cn = new Connections();

            for(int i=0;i<rqSpecList.Count;i++)
            {
                Requirement_Spec rSpec = (Requirement_Spec)rqSpecList[i];

                            String insertCmdFinal = insertCmd + "'" + rSpec.getReqId() + "'," + "'" +
            rSpec.getProdCatId() + "'," + "'" +
            rSpec.getFromSpecId() + "'," + "'" +
            rSpec.getToSpecId() + "'," + "'" +
            rSpec.getSpecText() + "','" +
            rSpec.getImgPath() + "'," + "'" +
            rSpec.getCreatedUser() + "'," + "'" +
            rSpec.getFeatId() + "'," + "'" +
            rSpec.getCreateDate() + "'";

                            insertCmdFinal += ")";

            //execute the insert for each of the state object
                            rowsAffected += cn.execInsertUpdate(insertCmdFinal, sessionUser);
            //Save the image to server path
            FileUpload fileControl = rSpec.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(rSpec.getImgPath());
            }
            
            cn.disconnect();
            return rowsAffected;



        }
        /// <summary>
        /// update or delete values in the requirement specification database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the requirement id or product category id
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any other tables
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateRequirementSpecsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Requirement_Spec.REQ_SPEC_COL_REQ_ID, out whereClauseCheck) && !whereClause.TryGetValue(Requirement_Spec.REQ_SPEC_COL_PROD_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Requirement_Spec.updateRequirementSpecsDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Requirement_Spec.updateRequirementSpecsDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Requirement_Spec.updateRequirementSpecsDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Requirement_Spec.REQ_SPEC_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Requirement_Spec.REQ_SPEC_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(Requirement_Spec.REQ_SPEC_COL_TO_SPEC_ID, Requirement_Spec.REQ_SPEC_COL_TO_SPEC_ID_TYPE);
            chkDataType.Add(Requirement_Spec.REQ_SPEC_COL_SPEC_TXT, Requirement_Spec.REQ_SPEC_COL_SPEC_TXT_TYPE);
            chkDataType.Add(Requirement_Spec.REQ_SPEC_COL_REQ_ID, Requirement_Spec.REQ_SPEC_COL_REQ_ID_TYPE);
            chkDataType.Add(Requirement_Spec.REQ_SPEC_COL_PROD_ID, Requirement_Spec.REQ_SPEC_COL_PROD_ID_TYPE);
            chkDataType.Add(Requirement_Spec.REQ_SPEC_COL_PIC_PATH, Requirement_Spec.REQ_SPEC_COL_PIC_PATH_TYPE);
            chkDataType.Add(Requirement_Spec.REQ_SPEC_COL_FROM_SPEC_ID, Requirement_Spec.REQ_SPEC_COL_FROM_SPEC_ID_TYPE);
            chkDataType.Add(Requirement_Spec.REQ_SPEC_COL_CREATED_USR, Requirement_Spec.REQ_SPEC_COL_CREATED_USR_TYPE);
            chkDataType.Add(Requirement_Spec.REQ_SPEC_COL_FEAT_ID, Requirement_Spec.REQ_SPEC_COL_FEAT_ID_TYPE);
            chkDataType.Add(Requirement_Spec.REQ_SPEC_COL_CREATED_DATE, Requirement_Spec.REQ_SPEC_COL_CREATED_DATE_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Requirement_Spec.updateRequirementSpecsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }
            
            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Requirement_Spec.updateRequirementSpecsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();

            if (operation.Equals(Connections.OPERATION_DELETE))
            {
                String docPath = "";
                DataSet ds = cn.execQuery("select " + Requirement_Spec.REQ_SPEC_COL_PIC_PATH + " from "
                    + Requirement_Spec.REQ_SPEC_TABLE + " where " + Requirement_Spec.REQ_SPEC_COL_REQ_ID +
                    "='" + whereClause[REQ_SPEC_COL_REQ_ID] + "'" + " and "
                    + Requirement_Spec.REQ_SPEC_COL_PROD_ID + "='" + whereClause[REQ_SPEC_COL_PROD_ID] + "'", "");

                DataTable dt = ds.Tables[0];

                foreach (DataRow dr in dt.Rows)
                {
                    docPath = dr[0].ToString();
                }

                if (File.Exists(docPath))
                    File.Delete(docPath);

            }

            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }

    }
    /// <summary>
    /// this class represents the requirements of the users,
    /// this class represents the database table 'Requirement_Details'
    /// </summary>
    public class Requirement
    {
        private String reqId;
        private String reqName;
        private String submitDate;
        private String dueDate;
        private String createdUser;
        private String entityId;
        private String activeStat;
        private String localId;
        private ArrayList reqSpecs; //Arraylist of all related requirement spcification objects
        private ArrayList reqProdSrvQnty;//Arraylist of all related requirement product service qnty objects
        private String currency;

        private static String sessionUser = "";

        public const String REQ_TABLE = "Requirement_Details";

        public const String REQ_COL_REQ_ID = "requirement_id";
        public const String REQ_COL_REQ_NAME = "requirement_name";
        public const String REQ_COL_SUBMIT_DATE = "Date_Submitted";
        public const String REQ_COL_DUE_DATE = "Due_Date";
        public const String REQ_COL_CREATED_USR = "Created_by_Usr_id";
        public const String REQ_COL_ENTITY_ID = "Cmp_Usr_Shop_id";
        public const String REQ_COL_ACTIVE_STAT = "Active_Status";
        public const String REQ_COL_LOCAL_ID = "Locality_id";
        public const String REQ_COL_CURRENCY = "Currency_Id";

        public const String REQ_COL_REQ_ID_TYPE = Connections.STRING_TYPE;
        public const String REQ_COL_REQ_NAME_TYPE = Connections.STRING_TYPE;
        public const String REQ_COL_SUBMIT_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String REQ_COL_DUE_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String REQ_COL_CREATED_USR_TYPE = Connections.STRING_TYPE;
        public const String REQ_COL_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String REQ_COL_ACTIVE_STAT_TYPE = Connections.STRING_TYPE;
        public const String REQ_COL_LOCAL_ID_TYPE = Connections.STRING_TYPE;
        public const String REQ_COL_CURRENCY_TYPE = Connections.STRING_TYPE;

        public const String REQ_ACTIVE_STAT_ACTIVE = "active";
        public const String REQ_ACTIVE_STAT_INACTIVE = "inactive";


        public String getCurrency()
        {
            return currency;
        }
        public void setCurrency(String currency)
        {
            this.currency = currency;
        }
        public String getReqId()
        {
            return reqId;
        }
        /// <summary>
        /// This method also makes sure that the requirement id of all the associated requirement specs are same
        /// </summary>
        /// <param name="rId"></param>
        public void setReqId(String rId)
        {
            reqId = rId;
            //If the attached requirement_spec arraylist does not contain the same requirement id, update that with this one
            int count = 0;
            if (reqSpecs!=null)
            for(count=0;count<reqSpecs.Count;count++)
            {
                Requirement_Spec assocSpec = (Requirement_Spec) this.reqSpecs[count];
                assocSpec.setReqId(reqId);
            }
             
        }
        public String getReqName()
        {
            return reqName;
        }
        public void setReqName(String rqNm)
        {
            reqName = rqNm;
        }
        public String getSubmitDate()
        {
            return submitDate;
        }
        public void setSubmitDate(String sDate)
        {
            submitDate = sDate;
        }
        public String getDueDate()
        {
            return dueDate;
        }
        public void setDueDate(String dDate)
        {
            dueDate = dDate;
        }
        public String getCratedUsr()
        {
            return createdUser;
        }
        public void setCreatedUsr(String cUsr)
        {
            createdUser = cUsr;
        }
        public String getEntityId()
        {
            return entityId;
        }
        public void setEntityId(String eId)
        {
            entityId = eId;
        }
        public String getActiveStat()
        {
            return activeStat;
        }
        public void setActiveStat(String aStat)
        {
            activeStat = aStat;
        }
        public String getLocalId()
        {
            return localId;
        }
        public void setLocalId(String lId)
        {
            localId = lId;
        }
        public ArrayList getReqSpecs()
        {
            return reqSpecs;
        }
        public void setReqSpecs(ArrayList reqSpc)
        {
            reqSpecs = reqSpc;
        }

        public ArrayList getReqProdSrvQnty()
        {
            return this.reqProdSrvQnty;
        }
        /// <summary>
        /// Sets the associated product service quantity list objects for a requirement
        /// </summary>
        /// <param name="rPrdSrvList"></param>
        public void setReqProdSrvQnty(ArrayList rPrdSrvList)
        {
            this.reqProdSrvQnty = rPrdSrvList;
        }
        /// <summary>
        /// for a given requirement id, return the respective requirement details excluding the specifications
        /// this is a lightweight method - use it when there is not need to extract the related specifications
        /// </summary>
        /// <param name="reqId"></param>
        /// <returns></returns>
        public static Requirement getRequirementbyIdwoSpecsDB(String reqId)
        {
            /*for a given requirement id, return the respective requirement details excluding the specifications
             * 
             * @Author: shibasis sengupta
            */
            if (reqId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty requirement Id sent to Requirement.getRequirementbyIdwoSpecsDB"));

            Connections cn = new Connections();
            String query = "select " + Requirement.REQ_COL_REQ_ID +
                "," + Requirement.REQ_COL_REQ_NAME +
                "," + Requirement.REQ_COL_LOCAL_ID +
                "," + Requirement.REQ_COL_ACTIVE_STAT +
                "," + Requirement.REQ_COL_ENTITY_ID +
                "," + Requirement.REQ_COL_SUBMIT_DATE +
                "," + Requirement.REQ_COL_DUE_DATE +
                "," + Requirement.REQ_COL_CREATED_USR +
                "," + Requirement.REQ_COL_CURRENCY +
                " from " + Requirement.REQ_TABLE +
                " where " + Requirement.REQ_COL_REQ_ID + "='" + reqId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Requirement tempReq = new Requirement();
            
            foreach (DataRow dr in dt.Rows)
            {
                tempReq.setReqId(dr[0].ToString());
                tempReq.setReqName(dr[1].ToString());
                tempReq.setLocalId(dr[2].ToString());
                tempReq.setActiveStat(dr[3].ToString());
                tempReq.setEntityId(dr[4].ToString());
                tempReq.setSubmitDate(dr[5].ToString());
                tempReq.setDueDate(dr[6].ToString());
                tempReq.setCreatedUsr(dr[7].ToString());
                tempReq.setCurrency(dr[8].ToString());
                tempReq.setReqSpecs(new ArrayList());
            }
            cn.disconnect();
            return tempReq;

        }
        /// <summary>
        /// for a given requirement id, return the respective requirement details including the specifications
        /// this is a heavyweight method, if the related specifications are not required use the light-weight version 'getRequirementbyIdwoSpecsDB'
        /// </summary>
        /// <param name="reqId"></param>
        /// <returns></returns>
        public static Requirement getRequirementbyIdDB(String reqId)
        {
            if (reqId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty requirement Id sent to Requirement.getRequirementbyIdDB"));

            Connections cn = new Connections();
            String query = "select " + Requirement.REQ_COL_REQ_ID +
                "," + Requirement.REQ_COL_REQ_NAME +
                "," + Requirement.REQ_COL_LOCAL_ID +
                "," + Requirement.REQ_COL_ACTIVE_STAT +
                "," + Requirement.REQ_COL_ENTITY_ID +
                "," + Requirement.REQ_COL_SUBMIT_DATE +
                "," + Requirement.REQ_COL_DUE_DATE +
                "," + Requirement.REQ_COL_CREATED_USR +
                "," + Requirement.REQ_COL_CURRENCY +
                " from " + Requirement.REQ_TABLE +
                " where " + Requirement.REQ_COL_REQ_ID + "='" + reqId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Requirement tempReq = new Requirement();

            foreach (DataRow dr in dt.Rows)
            {
                tempReq.setReqId(dr[0].ToString());
                tempReq.setReqName(dr[1].ToString());
                tempReq.setLocalId(dr[2].ToString());
                tempReq.setActiveStat(dr[3].ToString());
                tempReq.setEntityId(dr[4].ToString());
                tempReq.setSubmitDate(dr[5].ToString());
                tempReq.setDueDate(dr[6].ToString());
                tempReq.setCreatedUsr(dr[7].ToString());
                tempReq.setCurrency(dr[8].ToString());
                tempReq.setReqSpecs(Requirement_Spec.getRequirementSpecsforReqbyIdDB(reqId.Trim()));
                tempReq.setReqProdSrvQnty(RequirementProdServQnty.getRequirementProductServiceQuantityforReqIdDB(reqId.Trim()));
            }
            cn.disconnect();
            return tempReq;

        }
        /// <summary>
        /// for a given business entity id, this method returns all the requirements from the database in an ArrayList.
        /// Each element of this arraylist is an object of type 'Requirement' (without the specification objects)
        /// </summary>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static ArrayList getAllRequirementsbyEntityIdDB(String entId)
        {
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity Id sent to Requirement.getAllRequirementsbyEntityIdDB"));

            Connections cn = new Connections();
            String query = "select " + Requirement.REQ_COL_REQ_ID +
                "," + Requirement.REQ_COL_REQ_NAME +
                "," + Requirement.REQ_COL_LOCAL_ID +
                "," + Requirement.REQ_COL_ACTIVE_STAT +
                "," + Requirement.REQ_COL_ENTITY_ID +
                "," + Requirement.REQ_COL_SUBMIT_DATE +
                "," + Requirement.REQ_COL_DUE_DATE +
                "," + Requirement.REQ_COL_CREATED_USR +
                "," + Requirement.REQ_COL_CURRENCY +
                " from " + Requirement.REQ_TABLE +
                " where " + Requirement.REQ_COL_ENTITY_ID + "='" + entId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            ArrayList reqrList = new ArrayList();
            

            foreach (DataRow dr in dt.Rows)
            {
                Requirement tempReq = new Requirement();

                tempReq.setReqId(dr[0].ToString());
                tempReq.setReqName(dr[1].ToString());
                tempReq.setLocalId(dr[2].ToString());
                tempReq.setActiveStat(dr[3].ToString());
                tempReq.setEntityId(dr[4].ToString());
                tempReq.setSubmitDate(dr[5].ToString());
                tempReq.setDueDate(dr[6].ToString());
                tempReq.setCreatedUsr(dr[7].ToString());
                tempReq.setCurrency(dr[8].ToString());
               // tempReq.setReqSpecs(new ArrayList());
                reqrList.Add(tempReq);
                    
            }
            cn.disconnect();
            return reqrList;
        }
        /// <summary>
        /// this method inserts all the details of a requirement into database
        /// if the associated requirement specs are also attached to the parameter object those details will also be inserted into table 'Requirement_Specification_Map'.
        /// if the associated requirement product service quantiy objects are also attached to the parameter, those details will also be inserted in the backed table 'REQ_Product_Service_Qnty'.
        /// </summary>
        /// <param name="req"></param>
        /// <returns></returns>
        public static int insertRequirementDB(Requirement req)
        {
            /*this method inserts all the details of a requirement into database
             * if the associated requirement specs are also attached to the parameter object those details will also be inserted into table 'Requirement_Specification_Map'
             * 
             * @Author: shibasis sengupta
            */

            if (req.getReqId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Requirement Id sent to Requirement.insertRequirementDB"));

           
            int rowsAffected = 0;
            String insertCmd = "insert into " + Requirement.REQ_TABLE
                + " ("
                + Requirement.REQ_COL_REQ_ID + ","
                + Requirement.REQ_COL_REQ_NAME + ","
                + Requirement.REQ_COL_ENTITY_ID + ","
                + Requirement.REQ_COL_LOCAL_ID + ","
                + Requirement.REQ_COL_DUE_DATE + ","
                + Requirement.REQ_COL_SUBMIT_DATE + ","
                + Requirement.REQ_COL_ACTIVE_STAT + ","
                + Requirement.REQ_COL_CURRENCY + ","
                + Requirement.REQ_COL_CREATED_USR + ")"
                + "values (";
            Connections cn = new Connections();

            insertCmd = insertCmd + "'" + req.getReqId() + "'," + "'" +
            req.getReqName() + "'," + "'" +
            req.getEntityId() + "'," + "'" +
            req.getLocalId() + "'," + "'" +
            req.getDueDate() + "'," + "'" +
            req.getSubmitDate() + "'," +"'"+
            req.getActiveStat() + "'," + "'" +
            req.getCurrency() + "'," + "'" + 
            req.getCratedUsr()+ "'";

            insertCmd += ")";

            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            if (req.getReqSpecs()!=null && req.getReqSpecs().Count > 0)  //If associated specification objects have also been sent insert those also into database
            {
                int counter = 0;
                ArrayList temp = req.getReqSpecs();

                while (counter < temp.Count)
                {
                    rowsAffected+=Requirement_Spec.insertRequirementSpecsDB((Requirement_Spec)temp[counter]);
                    counter++;
                }

            }

            if (req.getReqProdSrvQnty()!=null && req.getReqProdSrvQnty().Count > 0)  //If associated product service quantity objects have also been sent insert those also into database
            {
                int counter = 0;
                ArrayList temp = req.getReqProdSrvQnty();

                while (counter < temp.Count)
                {
                    rowsAffected += RequirementProdServQnty.insertRequirementProductServiceQuantityDetailsDB((RequirementProdServQnty)temp[counter]);
                    counter++;
                }

            }

            cn.disconnect();
            return rowsAffected;


        }
        /// <summary>
        /// update or delete values in the 'Requirement_Details'  database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the requirement id
        /// the third parameter contains the type of operation
        /// 
        /// a delete operation will  have a cascading effect on the dependent table 'Requirement_Specification_Map'
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateRequirementDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* a delete operation will  have a cascading effect on the dependent table 'Requirement_Specification_Map'
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Requirement.REQ_COL_REQ_ID, out whereClauseCheck) )
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Requirement.updateRequirementDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Requirement.updateRequirementDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Requirement.updateRequirementDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Requirement.REQ_TABLE+
                " set " : Connections.OPERATION_DELETE + " from " + Requirement.REQ_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(Requirement.REQ_COL_SUBMIT_DATE, Requirement.REQ_COL_SUBMIT_DATE_TYPE);
            chkDataType.Add(Requirement.REQ_COL_REQ_ID, Requirement.REQ_COL_REQ_ID_TYPE);
            chkDataType.Add(Requirement.REQ_COL_REQ_NAME, Requirement.REQ_COL_REQ_NAME_TYPE);
            chkDataType.Add(Requirement.REQ_COL_LOCAL_ID, Requirement.REQ_COL_LOCAL_ID_TYPE);
            chkDataType.Add(Requirement.REQ_COL_ENTITY_ID, Requirement.REQ_COL_ENTITY_ID_TYPE);
            chkDataType.Add(Requirement.REQ_COL_DUE_DATE, Requirement.REQ_COL_DUE_DATE_TYPE);
            chkDataType.Add(Requirement.REQ_COL_CREATED_USR, Requirement.REQ_COL_CREATED_USR_TYPE);
            chkDataType.Add(Requirement.REQ_COL_ACTIVE_STAT, Requirement.REQ_COL_ACTIVE_STAT_TYPE);
            chkDataType.Add(Requirement.REQ_COL_CURRENCY, Requirement.REQ_COL_CURRENCY_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Requirement.updateRequirementDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Requirement.updateRequirementDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        
        }
        
    }
    /// <summary>
    /// This class is representative of the backend object 'REQ_Product_Service_Qnty'
    /// </summary>
    public class RequirementProdServQnty
    {
        private String reqId;
        private String prodCatId;
        private float fromQnty;
        private float toQnty;
        private String fromPrice;
        private String toPrice;
        private String mrsmntUnit;

        public String getRequirementId()
        {
            return this.reqId;
        }
        public void setRequirementId(String rfId)
        {
            this.reqId = rfId;
        }
        public String getProdCatId()
        {
            return this.prodCatId;
        }
        public void setProdCatId(String pcId)
        {
            this.prodCatId = pcId;
        }
        public float getFromQnty()
        {
            return this.fromQnty;
        }
        public void setFromQnty(float FQ)
        {
            this.fromQnty = FQ;
        }
        public float getToQnty()
        {
            return this.toQnty;
        }
        public void setToQnty(float TQ)
        {
            this.toQnty = TQ;
        }
        public String getFromPrice()
        {
            return this.fromPrice;
        }
        public void setFromPrice(String fp)
        {
            this.fromPrice = fp;
        }
        public String getToPrice()
        {
            return this.toPrice;
        }
        public void setToPrice(String tp)
        {
            this.toPrice = tp;
        }
        public String getMsrmntUnit()
        {
            return this.mrsmntUnit;
        }
        public void setMsrmntUnit(String mUnit)
        {
            this.mrsmntUnit = mUnit;
        }

        private static String sessionUser = "";

        public const String REQ_PROD_SRV_QNTY_TABLE = "REQ_Product_Service_Qnty";

        public const String REQ_PROD_SRV_COL_REQ_ID = "requirement_id";
        public const String REQ_PROD_SRV_COL_PROD_SRV_ID = "Product_Service_Category";
        public const String REQ_PROD_SRV_COL_FROM_QNTY = "From_Quantity";
        public const String REQ_PROD_SRV_COL_TO_QNTY = "To_Quantity";
        public const String REQ_PROD_SRV_COL_FROM_PRICE = "From_Price";
        public const String REQ_PROD_SRV_COL_TO_PRICE = "To_Price";
        public const String REQ_PROD_SRV_COL_MSRMNT_UNIT = "msrmnt_unit";


        public const String REQ_PROD_SRV_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String REQ_PROD_SRV_COL_PROD_SRV_ID_TYPE = Connections.STRING_TYPE;
        public const String REQ_PROD_SRV_COL_FROM_QNTY_TYPE = Connections.NUMBER_TYPE;
        public const String REQ_PROD_SRV_COL_TO_QNTY_TYPE = Connections.NUMBER_TYPE;
        public const String REQ_PROD_SRV_COL_FROM_PRICE_TYPE = Connections.STRING_TYPE;
        public const String REQ_PROD_SRV_COL_TO_PRICE_TYPE = Connections.STRING_TYPE;
        public const String REQ_PROD_SRV_COL_MSRMNT_UNIT_TYPE = Connections.STRING_TYPE;

        /// <summary>
        /// This method inserts the passed 'RequirementProdServQnty' object into database.
        /// The passed object must have the req id and prod category id attached to it.
        /// </summary>
        /// <param name="reqPrdSrvQntyObj"></param>
        /// <returns></returns>
        public static int insertRequirementProductServiceQuantityDetailsDB(RequirementProdServQnty reqPrdSrvQntyObj)
        {
            if (reqPrdSrvQntyObj.getRequirementId() == null || reqPrdSrvQntyObj.getRequirementId().Equals("") || reqPrdSrvQntyObj.getProdCatId() == null || reqPrdSrvQntyObj.getProdCatId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Primary Key missing field value sent to RequirementProdServQnty.RequirementProdServQnty"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + RequirementProdServQnty.REQ_PROD_SRV_QNTY_TABLE
                + " ("
                + RequirementProdServQnty.REQ_PROD_SRV_COL_REQ_ID + ","
                + RequirementProdServQnty.REQ_PROD_SRV_COL_FROM_PRICE + ","
                + RequirementProdServQnty.REQ_PROD_SRV_COL_FROM_QNTY + ","
                //+ RFQProductServiceDetails.RFQ_PROD_COL_ENTITY_ID + ","
                + RequirementProdServQnty.REQ_PROD_SRV_COL_MSRMNT_UNIT + ","
                + RequirementProdServQnty.REQ_PROD_SRV_COL_PROD_SRV_ID + ","
                + RequirementProdServQnty.REQ_PROD_SRV_COL_TO_PRICE + ","
                + RequirementProdServQnty.REQ_PROD_SRV_COL_TO_QNTY + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " '" + reqPrdSrvQntyObj.getRequirementId() + "'," + "'" +
            reqPrdSrvQntyObj.getFromPrice() + "'," +
            reqPrdSrvQntyObj.getFromQnty() + "," + "'" +
                //rfPrdDet.getEntityId() + "'," + "'" +
            reqPrdSrvQntyObj.getMsrmntUnit() + "'," + "'" +
            reqPrdSrvQntyObj.getProdCatId() + "'," + "'" +
            reqPrdSrvQntyObj.getToPrice() + "'," +
            reqPrdSrvQntyObj.getToQnty();

            insertCmd += ")";

            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            cn.disconnect();


            return rowsAffected;

        }
        /// <summary>
        /// For a given Requirement id this method returns an arraylist of 'RequirementProdServQnty' objects.
        /// </summary>
        /// <param name="reqId"></param>
        /// <returns></returns>
        public static ArrayList getRequirementProductServiceQuantityforReqIdDB(String reqId)
        {
            if (reqId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Requirement Id sent to RequirementProdServQnty.getRequirementProductServiceQuantityforReqIdDB"));

            Connections cn = new Connections();
            String query = "select " + RequirementProdServQnty.REQ_PROD_SRV_COL_REQ_ID +
                "," + RequirementProdServQnty.REQ_PROD_SRV_COL_FROM_PRICE +
                "," + RequirementProdServQnty.REQ_PROD_SRV_COL_FROM_QNTY +
                "," + RequirementProdServQnty.REQ_PROD_SRV_COL_MSRMNT_UNIT +
                "," + RequirementProdServQnty.REQ_PROD_SRV_COL_PROD_SRV_ID +
                "," + RequirementProdServQnty.REQ_PROD_SRV_COL_TO_PRICE +
                "," + RequirementProdServQnty.REQ_PROD_SRV_COL_TO_QNTY +
                " from " + RequirementProdServQnty.REQ_PROD_SRV_QNTY_TABLE +
                " where " + RequirementProdServQnty.REQ_PROD_SRV_COL_REQ_ID + "='" + reqId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList qntyList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                RequirementProdServQnty temp = new RequirementProdServQnty();

                temp.setRequirementId(dr[0].ToString());
                temp.setFromPrice(dr[1].ToString());
                temp.setFromQnty(float.Parse(dr[2].ToString()));
                temp.setMsrmntUnit(dr[3].ToString());
                temp.setProdCatId(dr[4].ToString());
                temp.setToPrice(dr[5].ToString());
                temp.setToQnty(float.Parse(dr[6].ToString()));

                qntyList.Add(temp);
            }
            cn.disconnect();
            return qntyList;
        }
        /// <summary>
        /// update or delete values in the RequirementProdServQnty  database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the Requirement id
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any other tables
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateRequirementProductServiceQuantityDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(RequirementProdServQnty.REQ_PROD_SRV_COL_REQ_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - RequirementProdServQnty.updateRequirementProductServiceQuantityDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to RequirementProdServQnty.updateRequirementProductServiceQuantityDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to RequirementProdServQnty.updateRequirementProductServiceQuantityDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + RequirementProdServQnty.REQ_PROD_SRV_QNTY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + RequirementProdServQnty.REQ_PROD_SRV_QNTY_TABLE ) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(RequirementProdServQnty.REQ_PROD_SRV_COL_REQ_ID, RequirementProdServQnty.REQ_PROD_SRV_COL_RFQ_ID_TYPE);
            chkDataType.Add(RequirementProdServQnty.REQ_PROD_SRV_COL_FROM_PRICE, RequirementProdServQnty.REQ_PROD_SRV_COL_FROM_PRICE_TYPE);
            chkDataType.Add(RequirementProdServQnty.REQ_PROD_SRV_COL_FROM_QNTY, RequirementProdServQnty.REQ_PROD_SRV_COL_FROM_QNTY_TYPE);
            chkDataType.Add(RequirementProdServQnty.REQ_PROD_SRV_COL_MSRMNT_UNIT, RequirementProdServQnty.REQ_PROD_SRV_COL_MSRMNT_UNIT_TYPE);
            chkDataType.Add(RequirementProdServQnty.REQ_PROD_SRV_COL_PROD_SRV_ID, RequirementProdServQnty.REQ_PROD_SRV_COL_PROD_SRV_ID_TYPE);
            chkDataType.Add(RequirementProdServQnty.REQ_PROD_SRV_COL_TO_PRICE, RequirementProdServQnty.REQ_PROD_SRV_COL_TO_PRICE_TYPE);
            chkDataType.Add(RequirementProdServQnty.REQ_PROD_SRV_COL_TO_QNTY, RequirementProdServQnty.REQ_PROD_SRV_COL_TO_QNTY_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RequirementProdServQnty.updateRequirementProductServiceQuantityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RequirementProdServQnty.updateRequirementProductServiceQuantityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }

            if (operation.Equals(Connections.OPERATION_DELETE))
                cmd += " ";

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }
        
    }
    /// <summary>
    /// this class represents the backend database table 'Invoice_Details'
    /// </summary>
    public class Invoice
    {
        private String RFQId;
        private String invoiceId;
        private String invoiceDate;
        private String deliveryStatus;
        private String paymentStatus;
        private String invoiceType;
        private String policyNo;
        private String RespEntityId;
        private String invComments;
        private String shipVia;
        private float taxableAmount;
        private String invoiceNo;
        private String creationMode;
        private float totalAmount;
        private String approvalStat;
        public String approvalLevel;
        private String currency;
        private String relatedPO;

        private static String sessionUser = "";

        public const String INVOICE_CREATION_MODE_MANUAL = "Manual";
        public const String INVOICE_CREATION_MODE_AUTO = "Auto";

        public const String INVOICE_APPROVAL_STAT_APPROVED = "Approved";

        public const String INVOICE_TABLE = "Invoice_Details";

        public const String INVOICE_COL_RFQ_ID = "RFQ_id";
        public const String INVOICE_COL_INVOICE_ID = "Invoice_id";
        public const String INVOICE_COL_INVOICE_DATE = "invoice_date";
        public const String INVOICE_COL_DELIVERY_STAT = "Delivery_Status";
        public const String INVOICE_COL_PAYMENT_STAT = "Payment_Status";
        public const String INVOICE_COL_INVOICE_TYPE = "Invoice_Type";
        public const String INVOICE_COL_POLICY_NO = "Policy_No";
        public const String INVOICE_COL_ENTITY_ID = "Resp_Cmp_Usr_Shop_id";
        public const String INVOICE_COL_COMMENTS = "Invoice_Comments";
        public const String INVOICE_COL_SHIP_VIA = "Ship_Via";
        public const String INVOICE_COL_TAXABLE_AMNT = "Taxable_Amount";
        public const String INVOICE_COL_CREATION_MODE = "Creation_Mode";
        public const String INVOICE_COL_INVOICE_NO = "Invoice_No";
        public const String INVOICE_COL_TOTAL_AMOUNT = "Total_Amount";
        public const String INVOICE_COL_APPROVAL_STAT = "Approval_Status";
        public const String INVOICE_COL_APPROVAL_LEVEL = "Approval_Level";
        public const String INVOICE_COL_CURRENCY = "Currency_Id";
        public const String INVOICE_COL_RELATED_PO = "Related_PO";

        public const String INVOICE_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_INVOICE_ID_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_INVOICE_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String INVOICE_COL_DELIVERY_STAT_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_PAYMENT_STAT_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_INVOICE_TYPE_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_POLICY_NO_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_COMMENTS_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_SHIP_VIA_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_TAXABLE_AMNT_TYPE = Connections.NUMBER_TYPE;
        public const String INVOICE_COL_CREATION_MODE_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_INVOICE_NO_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_TOTAL_AMOUNT_TYPE = Connections.NUMBER_TYPE;
        public const String INVOICE_COL_APPROVAL_STAT_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_APPROVAL_LEVEL_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_CURRENCY_TYPE = Connections.STRING_TYPE;
        public const String INVOICE_COL_RELATED_PO_TYPE = Connections.STRING_TYPE;


        public String getRelatedPO()
        {
            return this.relatedPO;
        }
        public void setRelatedPO(String relPO)
        {
            relatedPO = relPO;
        }

        public String getCurrency()
        {
            return currency;
        }
        public void setCurrency(String currency)
        {
            this.currency = currency;
        }
        public String getApprovalStat()
        {
            return approvalStat;
        }
        public void setApprovalStat(String approvalStat)
        {
            this.approvalStat = approvalStat;
        }
        public String getApprovalLevel()
        {
            return approvalLevel;
        }
        public void setApprovalLevel(String appLevel)
        {
            approvalLevel = appLevel;
        }
        public float getTotalAmount()
        {
            return this.totalAmount;
        }
        public void setTotalAmount(float tAmnt)
        {
            this.totalAmount = tAmnt;
        }
        public String getCreationMode()
        {
            return this.creationMode;
        }
        public void setCreationMode(String cMode)
        {
            this.creationMode = cMode;
        }
        public String getInvoiceNo()
        {
            return this.invoiceNo;
        }
        public void setInvoiceNo(String invNo)
        {
            this.invoiceNo = invNo;
        }
        public String getRFQId()
        {
            return RFQId;
        }
        public void setRFQId(String rId)
        {
            RFQId = rId;
        }
        public String getInvoiceId()
        {
            return invoiceId;
        }
        public void setInvoiceId(String invId)
        {
            invoiceId = invId;
        }
        public String getInvoiceDate()
        {
            return invoiceDate;
        }
        public void setInvoiceDate(String invDate)
        {
            invoiceDate = invDate;
        }
        public String getDeliveryStatus()
        {
            return deliveryStatus;
        }
        public void setDeliveryStatus(String dStat)
        {
            deliveryStatus = dStat;
        }
        public String getPaymentStatus()
        {
            return paymentStatus;
        }
        public void setPaymentStatus(String pStat)
        {
            paymentStatus = pStat;
        }
        public String getInvoiceType()
        {
            return invoiceType;
        }
        public void setInvoiceType(String invType)
        {
            invoiceType = invType;
        }
        public String getPolicyNo()
        {
            return policyNo;
        }
        public void setPolicyNo(String pNo)
        {
            policyNo = pNo;
        }
        public String getRespEntityId()
        {
            return RespEntityId;
        }
        public void setRespEntityId(String eId)
        {
            RespEntityId = eId;
        }

        public String getInvComments()
        {
            return this.invComments;
        }

        public void setInvComments(String comm)
        {
            this.invComments = comm;
        }

        public String getShipVia()
        {
            return this.shipVia;
        }
        public void setShipVia(String ship)
        {
            this.shipVia = ship;
        }

        public float getTaxableAmnt()
        {
            return this.taxableAmount;
        }

        public void setTaxableAmnt(float taxAmnt)
        {
            this.taxableAmount = taxAmnt;
        }

        /// <summary>
        /// returns the respective invoice object from database for the passed invoice id parameter
        /// </summary>
        /// <param name="invNo"></param>
        /// <returns></returns>
        public static Invoice getInvoicebyIdDB(String invId)
        {
            /* returns the respective invoice object from database for the passed invoice id parameter
             * 
             * @Author: shibasis sengupta
            */

            if (invId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Invoice Id sent to Invoice.getInvoicebyIdDB"));

            Connections cn = new Connections();
            String query = "select " + Invoice.INVOICE_COL_INVOICE_ID +
                "," + Invoice.INVOICE_COL_RFQ_ID +
                "," + Invoice.INVOICE_COL_POLICY_NO +
                "," + Invoice.INVOICE_COL_PAYMENT_STAT +
                "," + Invoice.INVOICE_COL_INVOICE_TYPE +
                "," + Invoice.INVOICE_COL_INVOICE_DATE +
                "," + Invoice.INVOICE_COL_ENTITY_ID +
                "," + Invoice.INVOICE_COL_DELIVERY_STAT +
                "," + Invoice.INVOICE_COL_COMMENTS +
                "," + Invoice.INVOICE_COL_SHIP_VIA +
                "," + Invoice.INVOICE_COL_TAXABLE_AMNT +
                "," + Invoice.INVOICE_COL_INVOICE_NO +
                "," + Invoice.INVOICE_COL_CREATION_MODE +
                "," + Invoice.INVOICE_COL_TOTAL_AMOUNT +
                "," + Invoice.INVOICE_COL_APPROVAL_STAT +
                "," + Invoice.INVOICE_COL_APPROVAL_LEVEL +
                "," + Invoice.INVOICE_COL_CURRENCY +
                "," + Invoice.INVOICE_COL_RELATED_PO +
                " from " + Invoice.INVOICE_TABLE +
                " where " + Invoice.INVOICE_COL_INVOICE_ID + "='" + invId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Invoice tempInvoice = new Invoice();

            foreach (DataRow dr in dt.Rows)
            {
                tempInvoice.setInvoiceId(dr[0].ToString());
                tempInvoice.setRFQId(dr[1].ToString());
                tempInvoice.setPolicyNo(dr[2].ToString());
                tempInvoice.setPaymentStatus(dr[3].ToString());
                tempInvoice.setInvoiceType(dr[4].ToString());
                tempInvoice.setInvoiceDate(dr[5].ToString());
                tempInvoice.setRespEntityId(dr[6].ToString());
                tempInvoice.setDeliveryStatus(dr[7].ToString());
                tempInvoice.setInvComments(dr[8].ToString());
                tempInvoice.setShipVia(dr[9].ToString());
                tempInvoice.setTaxableAmnt(float.Parse(dr[10].ToString()));
                tempInvoice.setInvoiceNo(dr[11].ToString());
                tempInvoice.setCreationMode(dr[12].ToString());
                tempInvoice.setTotalAmount(float.Parse(dr[13].ToString()));
                tempInvoice.setApprovalStat(dr[14].ToString());
                tempInvoice.setApprovalLevel(dr[15].ToString());
                tempInvoice.setCurrency(dr[16].ToString());
                tempInvoice.setRelatedPO(dr[17].ToString());
            }
            cn.disconnect();
            return tempInvoice;

        }
        /// <summary>
        /// returns the respective invoice object from database for the passed invoice number parameter
        /// </summary>
        /// <param name="invId"></param>
        /// <returns></returns>
        public static Invoice getInvoicebyNoDB(String invNo)
        {
            /* returns the respective invoice object from database for the passed invoice id parameter
             * 
             * @Author: shibasis sengupta
            */

            if (invNo.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Invoice Id sent to Invoice.getInvoicebyIdDB"));

            Connections cn = new Connections();
            String query = "select " + Invoice.INVOICE_COL_INVOICE_ID +
                "," + Invoice.INVOICE_COL_RFQ_ID +
                "," + Invoice.INVOICE_COL_POLICY_NO +
                "," + Invoice.INVOICE_COL_PAYMENT_STAT +
                "," + Invoice.INVOICE_COL_INVOICE_TYPE +
                "," + Invoice.INVOICE_COL_INVOICE_DATE +
                "," + Invoice.INVOICE_COL_ENTITY_ID +
                "," + Invoice.INVOICE_COL_DELIVERY_STAT +
                "," + Invoice.INVOICE_COL_COMMENTS +
                "," + Invoice.INVOICE_COL_SHIP_VIA +
                "," + Invoice.INVOICE_COL_TAXABLE_AMNT +
                "," + Invoice.INVOICE_COL_INVOICE_NO +
                "," + Invoice.INVOICE_COL_CREATION_MODE +
                "," + Invoice.INVOICE_COL_TOTAL_AMOUNT +
                "," + Invoice.INVOICE_COL_APPROVAL_STAT +
                "," + Invoice.INVOICE_COL_APPROVAL_LEVEL +
                "," + Invoice.INVOICE_COL_CURRENCY +
                "," + Invoice.INVOICE_COL_RELATED_PO +
                " from " + Invoice.INVOICE_TABLE +
                " where " + Invoice.INVOICE_COL_INVOICE_NO + "='" + invNo.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Invoice tempInvoice = new Invoice();

            foreach (DataRow dr in dt.Rows)
            {
                tempInvoice.setInvoiceId(dr[0].ToString());
                tempInvoice.setRFQId(dr[1].ToString());
                tempInvoice.setPolicyNo(dr[2].ToString());
                tempInvoice.setPaymentStatus(dr[3].ToString());
                tempInvoice.setInvoiceType(dr[4].ToString());
                tempInvoice.setInvoiceDate(dr[5].ToString());
                tempInvoice.setRespEntityId(dr[6].ToString());
                tempInvoice.setDeliveryStatus(dr[7].ToString());
                tempInvoice.setInvComments(dr[8].ToString());
                tempInvoice.setShipVia(dr[9].ToString());
                tempInvoice.setTaxableAmnt(float.Parse(dr[10].ToString()));
                tempInvoice.setInvoiceNo(dr[11].ToString());
                tempInvoice.setCreationMode(dr[12].ToString());
                tempInvoice.setTotalAmount(float.Parse(dr[13].ToString()));
                tempInvoice.setApprovalStat(dr[14].ToString());
                tempInvoice.setApprovalLevel(dr[15].ToString());
                tempInvoice.setCurrency(dr[16].ToString());
                tempInvoice.setRelatedPO(dr[17].ToString());
            }
            cn.disconnect();
            return tempInvoice;

        }
        /// <summary>
        /// get the invoice details by rfq Id
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static Invoice getInvoicebyRfIdDB(String rfId)
        {
            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to Invoice.getInvoicebyRfIdDB"));

            Connections cn = new Connections();
            String query = "select " + Invoice.INVOICE_COL_INVOICE_ID +
                "," + Invoice.INVOICE_COL_RFQ_ID +
                "," + Invoice.INVOICE_COL_POLICY_NO +
                "," + Invoice.INVOICE_COL_PAYMENT_STAT +
                "," + Invoice.INVOICE_COL_INVOICE_TYPE +
                "," + Invoice.INVOICE_COL_INVOICE_DATE +
                "," + Invoice.INVOICE_COL_ENTITY_ID +
                "," + Invoice.INVOICE_COL_DELIVERY_STAT +
                "," + Invoice.INVOICE_COL_COMMENTS +
                "," + Invoice.INVOICE_COL_SHIP_VIA +
                "," + Invoice.INVOICE_COL_TAXABLE_AMNT +
                "," + Invoice.INVOICE_COL_CREATION_MODE +
                "," + Invoice.INVOICE_COL_INVOICE_NO +
                "," + Invoice.INVOICE_COL_TOTAL_AMOUNT +
                "," + Invoice.INVOICE_COL_APPROVAL_STAT +
                "," + Invoice.INVOICE_COL_APPROVAL_LEVEL +
                "," + Invoice.INVOICE_COL_CURRENCY +
                "," + Invoice.INVOICE_COL_RELATED_PO +
                " from " + Invoice.INVOICE_TABLE +
                " where " + Invoice.INVOICE_COL_RFQ_ID + "='" + rfId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Invoice tempInvoice = new Invoice();


            foreach (DataRow dr in dt.Rows)
            {

                tempInvoice.setInvoiceId(dr[0].ToString());
                tempInvoice.setRFQId(dr[1].ToString());
                tempInvoice.setPolicyNo(dr[2].ToString());
                tempInvoice.setPaymentStatus(dr[3].ToString());
                tempInvoice.setInvoiceType(dr[4].ToString());
                tempInvoice.setInvoiceDate(dr[5].ToString());
                tempInvoice.setRespEntityId(dr[6].ToString());
                tempInvoice.setDeliveryStatus(dr[7].ToString());
                tempInvoice.setInvComments(dr[8].ToString());
                tempInvoice.setShipVia(dr[9].ToString());
                tempInvoice.setTaxableAmnt(float.Parse(dr[10].ToString()));
                tempInvoice.setCreationMode(dr[11].ToString());
                tempInvoice.setInvoiceNo(dr[12].ToString());
                tempInvoice.setTotalAmount(float.Parse(dr[13].ToString()));
                tempInvoice.setApprovalStat(dr[14].ToString());
                tempInvoice.setApprovalLevel(dr[15].ToString());
                tempInvoice.setCurrency(dr[16].ToString());
                tempInvoice.setRelatedPO(dr[17].ToString());
            }
            cn.disconnect();
            return tempInvoice;
        }
        /// <summary>
        /// In cases where there can be multiple invoices attached to a particular RFQ id, this method should be used
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static Dictionary<String, Invoice> getAllInvoicesbyRfIdDB(String rfId)
        {
            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to Invoice.getInvoicebyRfIdDB"));

            Connections cn = new Connections();
            String query = "select " + Invoice.INVOICE_COL_INVOICE_ID +
                "," + Invoice.INVOICE_COL_RFQ_ID +
                "," + Invoice.INVOICE_COL_POLICY_NO +
                "," + Invoice.INVOICE_COL_PAYMENT_STAT +
                "," + Invoice.INVOICE_COL_INVOICE_TYPE +
                "," + Invoice.INVOICE_COL_INVOICE_DATE +
                "," + Invoice.INVOICE_COL_ENTITY_ID +
                "," + Invoice.INVOICE_COL_DELIVERY_STAT +
                "," + Invoice.INVOICE_COL_COMMENTS +
                "," + Invoice.INVOICE_COL_SHIP_VIA +
                "," + Invoice.INVOICE_COL_TAXABLE_AMNT +
                "," + Invoice.INVOICE_COL_CREATION_MODE +
                "," + Invoice.INVOICE_COL_INVOICE_NO +
                "," + Invoice.INVOICE_COL_TOTAL_AMOUNT +
                "," + Invoice.INVOICE_COL_APPROVAL_STAT +
                "," + Invoice.INVOICE_COL_APPROVAL_LEVEL +
                "," + Invoice.INVOICE_COL_CURRENCY +
                "," + Invoice.INVOICE_COL_RELATED_PO +
                " from " + Invoice.INVOICE_TABLE +
                " where " + Invoice.INVOICE_COL_RFQ_ID + "='" + rfId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, Invoice> tempDict = new Dictionary<string, Invoice>();


            foreach (DataRow dr in dt.Rows)
            {

                Invoice tempInvoice = new Invoice();
                tempInvoice.setInvoiceId(dr[0].ToString());
                tempInvoice.setRFQId(dr[1].ToString());
                tempInvoice.setPolicyNo(dr[2].ToString());
                tempInvoice.setPaymentStatus(dr[3].ToString());
                tempInvoice.setInvoiceType(dr[4].ToString());
                tempInvoice.setInvoiceDate(dr[5].ToString());
                tempInvoice.setRespEntityId(dr[6].ToString());
                tempInvoice.setDeliveryStatus(dr[7].ToString());
                tempInvoice.setInvComments(dr[8].ToString());
                tempInvoice.setShipVia(dr[9].ToString());
                tempInvoice.setTaxableAmnt(float.Parse(dr[10].ToString()));
                tempInvoice.setCreationMode(dr[11].ToString());
                tempInvoice.setInvoiceNo(dr[12].ToString());
                tempInvoice.setTotalAmount(float.Parse(dr[13].ToString()));
                tempInvoice.setApprovalStat(dr[14].ToString());
                tempInvoice.setApprovalLevel(dr[15].ToString());
                tempInvoice.setCurrency(dr[16].ToString());
                tempInvoice.setRelatedPO(dr[17].ToString());

                tempDict.Add(tempInvoice.getInvoiceId(), tempInvoice);
            }
            cn.disconnect();
            return tempDict;
        }
        /// <summary>
        /// For a given entity id, this method returns all the invoices which were sent to it and  which were approved by the sending organization
        /// </summary>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static ArrayList getAllInvoicesbyEntId(String entId)
        {
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty EntId sent to Invoice.getAllInvoicesbyEntId"));

            Connections cn = new Connections();
            String query = "select m." + Invoice.INVOICE_COL_INVOICE_ID +
                ",m." + Invoice.INVOICE_COL_RFQ_ID +
                ",m." + Invoice.INVOICE_COL_POLICY_NO +
                ",m." + Invoice.INVOICE_COL_PAYMENT_STAT +
                ",m." + Invoice.INVOICE_COL_INVOICE_TYPE +
                ",m." + Invoice.INVOICE_COL_INVOICE_DATE +
                ",m." + Invoice.INVOICE_COL_ENTITY_ID +
                ",m." + Invoice.INVOICE_COL_DELIVERY_STAT +
                ",m." + Invoice.INVOICE_COL_COMMENTS +
                ",m." + Invoice.INVOICE_COL_SHIP_VIA +
                ",m." + Invoice.INVOICE_COL_TAXABLE_AMNT +
                ",m." + Invoice.INVOICE_COL_CREATION_MODE +
                ",m." + Invoice.INVOICE_COL_INVOICE_NO +
                ",m." + Invoice.INVOICE_COL_TOTAL_AMOUNT +
                ",m." + Invoice.INVOICE_COL_APPROVAL_STAT +
                ",m." + Invoice.INVOICE_COL_APPROVAL_LEVEL +
                ",m." + Invoice.INVOICE_COL_CURRENCY +
                ",m." + Invoice.INVOICE_COL_RELATED_PO +
                " from " + Invoice.INVOICE_TABLE + " m " + "," + RFQDetails.RFQ_TABLE + " n " +
                " where " + RFQDetails.RFQ_COL_ENTITY_ID + "='" + entId.Trim() + "'" + " and n." +
                RFQDetails.RFQ_COL_RFQ_ID + "=m." + Invoice.INVOICE_COL_RFQ_ID + " and m." +
                Invoice.INVOICE_COL_APPROVAL_STAT + "='" + Invoice.INVOICE_APPROVAL_STAT_APPROVED + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList invoiceList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                Invoice tempInvoice = new Invoice();
                tempInvoice.setInvoiceId(dr[0].ToString());
                tempInvoice.setRFQId(dr[1].ToString());
                tempInvoice.setPolicyNo(dr[2].ToString());
                tempInvoice.setPaymentStatus(dr[3].ToString());
                tempInvoice.setInvoiceType(dr[4].ToString());
                tempInvoice.setInvoiceDate(dr[5].ToString());
                tempInvoice.setRespEntityId(dr[6].ToString());
                tempInvoice.setDeliveryStatus(dr[7].ToString());
                tempInvoice.setInvComments(dr[8].ToString());
                tempInvoice.setShipVia(dr[9].ToString());
                tempInvoice.setTaxableAmnt(float.Parse(dr[10].ToString()));
                tempInvoice.setCreationMode(dr[11].ToString());
                tempInvoice.setInvoiceNo(dr[12].ToString());
                tempInvoice.setTotalAmount(float.Parse(dr[13].ToString()));
                tempInvoice.setApprovalStat(dr[14].ToString());
                tempInvoice.setApprovalLevel(dr[15].ToString());
                tempInvoice.setCurrency(dr[16].ToString());
                tempInvoice.setRelatedPO(dr[17].ToString());

                invoiceList.Add(tempInvoice);
            }
            cn.disconnect();
            return invoiceList;

        }
        /// <summary>
        /// For a given response entity id this method returns an ArrayList of invoice object that is created by the response entity id
        /// </summary>
        /// <param name="respEntId"></param>
        /// <returns></returns>
        public static ArrayList getAllInvoicesbyRespEntId(String respEntId)
        {
            if (respEntId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty respEntId sent to Invoice.getAllInvoicebyRespEntId"));

            Connections cn = new Connections();
            String query = "select " + Invoice.INVOICE_COL_INVOICE_ID +
                "," + Invoice.INVOICE_COL_RFQ_ID +
                "," + Invoice.INVOICE_COL_POLICY_NO +
                "," + Invoice.INVOICE_COL_PAYMENT_STAT +
                "," + Invoice.INVOICE_COL_INVOICE_TYPE +
                "," + Invoice.INVOICE_COL_INVOICE_DATE +
                "," + Invoice.INVOICE_COL_ENTITY_ID +
                "," + Invoice.INVOICE_COL_DELIVERY_STAT +
                "," + Invoice.INVOICE_COL_COMMENTS +
                "," + Invoice.INVOICE_COL_SHIP_VIA +
                "," + Invoice.INVOICE_COL_TAXABLE_AMNT +
                "," + Invoice.INVOICE_COL_CREATION_MODE +
                "," + Invoice.INVOICE_COL_INVOICE_NO +
                "," + Invoice.INVOICE_COL_TOTAL_AMOUNT +
                "," + Invoice.INVOICE_COL_APPROVAL_STAT +
                "," + Invoice.INVOICE_COL_APPROVAL_LEVEL +
                "," + Invoice.INVOICE_COL_CURRENCY +
                "," + Invoice.INVOICE_COL_RELATED_PO +
                " from " + Invoice.INVOICE_TABLE +
                " where " + Invoice.INVOICE_COL_ENTITY_ID + "='" + respEntId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList invoiceList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                Invoice tempInvoice = new Invoice();
                tempInvoice.setInvoiceId(dr[0].ToString());
                tempInvoice.setRFQId(dr[1].ToString());
                tempInvoice.setPolicyNo(dr[2].ToString());
                tempInvoice.setPaymentStatus(dr[3].ToString());
                tempInvoice.setInvoiceType(dr[4].ToString());
                tempInvoice.setInvoiceDate(dr[5].ToString());
                tempInvoice.setRespEntityId(dr[6].ToString());
                tempInvoice.setDeliveryStatus(dr[7].ToString());
                tempInvoice.setInvComments(dr[8].ToString());
                tempInvoice.setShipVia(dr[9].ToString());
                tempInvoice.setTaxableAmnt(float.Parse(dr[10].ToString()));
                tempInvoice.setCreationMode(dr[11].ToString());
                tempInvoice.setInvoiceNo(dr[12].ToString());
                tempInvoice.setTotalAmount(float.Parse(dr[13].ToString()));
                tempInvoice.setApprovalStat(dr[14].ToString());
                tempInvoice.setApprovalLevel(dr[15].ToString());
                tempInvoice.setCurrency(dr[16].ToString());
                tempInvoice.setRelatedPO(dr[17].ToString());

                invoiceList.Add(tempInvoice);
            }
            cn.disconnect();
            return invoiceList;
        }
        /// <summary>
        /// For a given approver id and response entity id this method returns all Invoice objects which are pending approval with the user
        /// </summary>
        /// <param name="appId"></param>
        /// <returns></returns>
        public static ArrayList getAllInvoicesbyApproverIdAndRespEntIdDB(String appId, String respEntId)
        {
            if (appId.Equals("") || respEntId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty  Id sent to Invoice.getAllInvoicesbyApproverIdDB"));

            Connections cn = new Connections();
            String query = "select " + Invoice.INVOICE_COL_INVOICE_ID +
                "," + Invoice.INVOICE_COL_RFQ_ID +
                "," + Invoice.INVOICE_COL_POLICY_NO +
                "," + Invoice.INVOICE_COL_PAYMENT_STAT +
                "," + Invoice.INVOICE_COL_INVOICE_TYPE +
                "," + Invoice.INVOICE_COL_INVOICE_DATE +
                "," + Invoice.INVOICE_COL_ENTITY_ID +
                "," + Invoice.INVOICE_COL_DELIVERY_STAT +
                "," + Invoice.INVOICE_COL_COMMENTS +
                "," + Invoice.INVOICE_COL_SHIP_VIA +
                "," + Invoice.INVOICE_COL_TAXABLE_AMNT +
                "," + Invoice.INVOICE_COL_CREATION_MODE +
                "," + Invoice.INVOICE_COL_INVOICE_NO +
                "," + Invoice.INVOICE_COL_TOTAL_AMOUNT +
                "," + Invoice.INVOICE_COL_APPROVAL_STAT +
                "," + Invoice.INVOICE_COL_APPROVAL_LEVEL +
                "," + Invoice.INVOICE_COL_CURRENCY +
                "," + Invoice.INVOICE_COL_RELATED_PO +
                " from " + Invoice.INVOICE_TABLE +
                " where " + Invoice.INVOICE_COL_APPROVAL_STAT + "='" + appId.Trim() + "'" + " and " +
                Invoice.INVOICE_COL_ENTITY_ID + "='" + respEntId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList invoiceList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                Invoice tempInvoice = new Invoice();
                tempInvoice.setInvoiceId(dr[0].ToString());
                tempInvoice.setRFQId(dr[1].ToString());
                tempInvoice.setPolicyNo(dr[2].ToString());
                tempInvoice.setPaymentStatus(dr[3].ToString());
                tempInvoice.setInvoiceType(dr[4].ToString());
                tempInvoice.setInvoiceDate(dr[5].ToString());
                tempInvoice.setRespEntityId(dr[6].ToString());
                tempInvoice.setDeliveryStatus(dr[7].ToString());
                tempInvoice.setInvComments(dr[8].ToString());
                tempInvoice.setShipVia(dr[9].ToString());
                tempInvoice.setTaxableAmnt(float.Parse(dr[10].ToString()));
                tempInvoice.setCreationMode(dr[11].ToString());
                tempInvoice.setInvoiceNo(dr[12].ToString());
                tempInvoice.setTotalAmount(float.Parse(dr[13].ToString()));
                tempInvoice.setApprovalStat(dr[14].ToString());
                tempInvoice.setApprovalLevel(dr[15].ToString());
                tempInvoice.setCurrency(dr[16].ToString());
                tempInvoice.setRelatedPO(dr[17].ToString());

                invoiceList.Add(tempInvoice);
            }
            cn.disconnect();
            return invoiceList;

        }
        /// <summary>
        /// inserts multiple associates invoice objects into database table for a given rfqid
        /// the first parameter is the rfqid
        /// the second parameter is arraylist of invoice objects
        /// </summary>
        /// <param name="invObjs"></param>
        /// <returns></returns>
        public static int insertInvoiceforRFQIdDB(String rfqId, ArrayList invObjs)
        {
            /*inserts multiple associates invoice objects into database table for a given rfqid
             * the first parameter is the rfqid
             * the second parameter is arraylist of invoice objects
             * 
             * @Author: shibasis sengupta
            */
            if (rfqId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to Invoice.insertInvoiceforRFQIdDB"));

            if (invObjs.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty invoice object list sent to Invoice.insertInvoiceforRFQIdDB"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + Invoice.INVOICE_TABLE
                + " ("
                + Invoice.INVOICE_COL_RFQ_ID + ","
                + Invoice.INVOICE_COL_POLICY_NO + ","
                + Invoice.INVOICE_COL_PAYMENT_STAT + ","
                + Invoice.INVOICE_COL_INVOICE_TYPE + ","
                + Invoice.INVOICE_COL_INVOICE_ID + ","
                + Invoice.INVOICE_COL_INVOICE_DATE + ","
                + Invoice.INVOICE_COL_ENTITY_ID + ","
                + Invoice.INVOICE_COL_SHIP_VIA + ","
                + Invoice.INVOICE_COL_COMMENTS + ","
                + Invoice.INVOICE_COL_TAXABLE_AMNT + ","
                + Invoice.INVOICE_COL_INVOICE_NO + ","
                + Invoice.INVOICE_COL_CREATION_MODE + ","
                + Invoice.INVOICE_COL_TOTAL_AMOUNT + ","
                + Invoice.INVOICE_COL_APPROVAL_STAT + ","
                + Invoice.INVOICE_COL_APPROVAL_LEVEL + ","
                + Invoice.INVOICE_COL_CURRENCY + ","
                + Invoice.INVOICE_COL_RELATED_PO + ","
                + Invoice.INVOICE_COL_DELIVERY_STAT + ")"
                + "values (";
            Connections cn = new Connections();

            int counter = 0;
            while (counter < invObjs.Count)
            {
                Invoice tempObj = (Invoice)invObjs[counter];
                insertCmd = insertCmd + "'" + tempObj.getRFQId() + "'," + "'" +
                tempObj.getPolicyNo() + "'," + "'" +
                tempObj.getPaymentStatus() + "'," + "'" +
                tempObj.getInvoiceType() + "'," + "'" +
                tempObj.getInvoiceId() + "'," + "'" +
                tempObj.getInvoiceDate() + "'," +
                tempObj.getRespEntityId() + "'," + "'" +
                tempObj.getShipVia() + "'," + "'" +
                tempObj.getInvComments() + "'," +
                tempObj.getTaxableAmnt() + "," + "'" +
                tempObj.getInvoiceNo() + "'," + "'" +
                tempObj.getCreationMode() + "'," +
                tempObj.getTotalAmount() + "," + "'" +
                                tempObj.getApprovalStat() + "," + "'" +
                                tempObj.getApprovalLevel() + "," + "'" +
                                tempObj.getCurrency() + "," + "'" +
                                tempObj.getRelatedPO() + "," + "'" +
                tempObj.getDeliveryStatus() + "'";

                insertCmd += ")";

                //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
                counter++;
            }
            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// inserts a single invoice object into the database
        /// </summary>
        /// <param name="invObj"></param>
        /// <returns></returns>
        public static int insertInvoiceDB(Invoice invObj)
        {
            /*inserts a single invoice object into the database
             * 
             * @Author: shibasis sengupta
            */

            if (invObj.getInvoiceId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty mandatory field value sent to Invoice.insertInvoiceDB"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + Invoice.INVOICE_TABLE
                + " ("
                + Invoice.INVOICE_COL_RFQ_ID + ","
                + Invoice.INVOICE_COL_POLICY_NO + ","
                + Invoice.INVOICE_COL_PAYMENT_STAT + ","
                + Invoice.INVOICE_COL_INVOICE_TYPE + ","
                + Invoice.INVOICE_COL_INVOICE_ID + ","
                + Invoice.INVOICE_COL_INVOICE_DATE + ","
                + Invoice.INVOICE_COL_ENTITY_ID + ","
                + Invoice.INVOICE_COL_COMMENTS + ","
                + Invoice.INVOICE_COL_SHIP_VIA + ","
                + Invoice.INVOICE_COL_TAXABLE_AMNT + ","
                                + Invoice.INVOICE_COL_INVOICE_NO + ","
                + Invoice.INVOICE_COL_CREATION_MODE + ","
                 + Invoice.INVOICE_COL_TOTAL_AMOUNT + ","
                 + Invoice.INVOICE_COL_APPROVAL_STAT + ","
                 + Invoice.INVOICE_COL_APPROVAL_LEVEL + ","
                 + Invoice.INVOICE_COL_CURRENCY + ","
                 + Invoice.INVOICE_COL_RELATED_PO + ","
                + Invoice.INVOICE_COL_DELIVERY_STAT + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + "'" + invObj.getRFQId() + "'," + "'" +
            invObj.getPolicyNo() + "'," + "'" +
            invObj.getPaymentStatus() + "'," + "'" +
            invObj.getInvoiceType() + "'," + "'" +
            invObj.getInvoiceId() + "'," + "'" +
            invObj.getInvoiceDate() + "'," + "'" +
            invObj.getRespEntityId() + "'," + "'" +
            invObj.getInvComments() + "'," + "'" +
            invObj.getShipVia() + "'," + "'" +
            invObj.getTaxableAmnt() + "'," + "'" +
                            invObj.getInvoiceNo() + "'," + "'" +
            invObj.getCreationMode() + "'," +
            invObj.getTotalAmount() + "," + "'" +
            invObj.getApprovalStat() + "'," + "'" +
            invObj.getApprovalLevel() + "'," + "'" +
            invObj.getCurrency() + "'," + "'" +
            invObj.getRelatedPO() + "'," + "'" +
            invObj.getDeliveryStatus() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the requirement invoice database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the invoice id
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any other tables
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateInvoiceDetailsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Invoice.INVOICE_COL_INVOICE_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Invoice.updateInvoiceDetailsDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Invoice.updateInvoiceDetailsDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Invoice.updateInvoiceDetailsDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Invoice.INVOICE_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Invoice.INVOICE_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(Invoice.INVOICE_COL_RFQ_ID, Invoice.INVOICE_COL_RFQ_ID_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_POLICY_NO, Invoice.INVOICE_COL_POLICY_NO_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_PAYMENT_STAT, Invoice.INVOICE_COL_PAYMENT_STAT_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_INVOICE_TYPE, Invoice.INVOICE_COL_INVOICE_TYPE_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_INVOICE_ID, Invoice.INVOICE_COL_INVOICE_ID_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_INVOICE_DATE, Invoice.INVOICE_COL_INVOICE_DATE_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_ENTITY_ID, Invoice.INVOICE_COL_ENTITY_ID_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_DELIVERY_STAT, Invoice.INVOICE_COL_DELIVERY_STAT_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_SHIP_VIA, Invoice.INVOICE_COL_SHIP_VIA_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_COMMENTS, Invoice.INVOICE_COL_COMMENTS_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_TAXABLE_AMNT, Invoice.INVOICE_COL_TAXABLE_AMNT_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_CREATION_MODE, Invoice.INVOICE_COL_CREATION_MODE_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_INVOICE_NO, Invoice.INVOICE_COL_INVOICE_NO_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_TOTAL_AMOUNT, Invoice.INVOICE_COL_TOTAL_AMOUNT_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_APPROVAL_STAT, Invoice.INVOICE_COL_APPROVAL_STAT_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_APPROVAL_LEVEL, Invoice.INVOICE_COL_APPROVAL_LEVEL_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_CURRENCY, Invoice.INVOICE_COL_CURRENCY_TYPE);
            chkDataType.Add(Invoice.INVOICE_COL_RELATED_PO, Invoice.INVOICE_COL_RELATED_PO_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Invoice.updateInvoiceDetailsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Invoice.updateInvoiceDetailsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;


        }

    }
    /// <summary>
    /// This class is representative of the backend object 'Invoice_Components'.
    /// Each object of this class represents record of type 'Invoice_Components'.
    /// </summary>
    public class InvoiceComponents
    {
        public String Invoice_Id;
        public String Section_type_name;
        public String Section_type;
        public String Section_value;

        private static String sessionUser = "";

        public const String INVOICE_COMPONENTS_TABLE = "Invoice_Components";

        public const String INVOICE_COMPONENTS_COL_INVOICE_ID="Invoice_Id";
        public const String INVOICE_COMPONENTS_COL_SECTION_TYPE_NAME="Section_type_name";
        public const String INVOICE_COMPONENTS_COL_SECTION_TYPE="Section_type";
        public const String INVOICE_COMPONENTS_COL_SECTION_VALUE = "Section_value";

        public const String INVOICE_COMPONENTS_COL_INVOICE_ID_TYPE=Connections.STRING_TYPE;
        public const String INVOICE_COMPONENTS_COL_SECTION_TYPE_NAME_TYPE=Connections.STRING_TYPE;
        public const String INVOICE_COMPONENTS_COL_SECTION_TYPE_TYPE=Connections.STRING_TYPE;
        public const String INVOICE_COMPONENTS_COL_SECTION_VALUE_TYPE = Connections.STRING_TYPE;

        public const String INVOICE_SECTION_TYPE_TAX = DocFormat.DOCFORMAT_DOC_TYPE_INVOICE_SECTION_TYPE_TAX;

        public String getInvoice_Id()
        {
            return Invoice_Id;
        }
        public void setInvoice_Id(String invoice_Id)
        {
            Invoice_Id = invoice_Id;
        }
        public String getSection_type_name()
        {
            return Section_type_name;
        }
        public void setSection_type_name(String section_type_name)
        {
            Section_type_name = section_type_name;
        }
        public String getSection_type()
        {
            return Section_type;
        }
        public void setSection_type(String section_type)
        {
            Section_type = section_type;
        }
        public String getSection_value()
        {
            return Section_value;
        }
        public void setSection_value(String section_value)
        {
            Section_value = section_value;
        }
        /// <summary>
        /// For a given invoice id and section type this method returna all the different Invoice Components with different sefction type name
        /// </summary>
        /// <param name="invId"></param>
        /// <param name="secType"></param>
        /// <returns></returns>
        public static ArrayList getInvoiceComponentByInvIdandSecType(String invId, String secType)
        {
            if (invId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Invoice Id sent to Invoice.getInvoiceComponentByInvIdandSecType"));

            Connections cn = new Connections();
            String query = "select " + InvoiceComponents.INVOICE_COMPONENTS_COL_INVOICE_ID +
                "," + InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE +
                "," + InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE_NAME +
                "," + InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_VALUE +
                 " from " + InvoiceComponents.INVOICE_COMPONENTS_TABLE +
                " where " + InvoiceComponents.INVOICE_COMPONENTS_COL_INVOICE_ID + "='" + invId.Trim() + "'"+
                " and " + InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE + "='" + secType.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList InvCompList = new ArrayList();            

            foreach (DataRow dr in dt.Rows)
            {
                InvoiceComponents tempInvoice = new InvoiceComponents();

                tempInvoice.setInvoice_Id(dr[0].ToString());
                tempInvoice.setSection_type(dr[1].ToString());
                tempInvoice.setSection_type_name(dr[2].ToString());
                tempInvoice.setSection_value(dr[3].ToString());

                InvCompList.Add(tempInvoice);
            }
            cn.disconnect();
            return InvCompList;
        }
        /// <summary>
        /// inserts a single invoice component object into the database
        /// </summary>
        /// <param name="invObj"></param>
        /// <returns></returns>
        public static int insertInvoiceComponentDB(InvoiceComponents invObj)
        {
            /*inserts a single invoice object into the database
             * 
             * @Author: shibasis sengupta
            */

            if (invObj.getInvoice_Id().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty mandatory field value sent to InvoiceComponents.insertInvoiceComponentDB"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + InvoiceComponents.INVOICE_COMPONENTS_TABLE
                + " ("
                + InvoiceComponents.INVOICE_COMPONENTS_COL_INVOICE_ID + ","
                + InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE + ","
                + InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE_NAME + ","
                + InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_VALUE  + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + "'" + invObj.getInvoice_Id() + "'," + "'" +
            invObj.getSection_type() + "'," + "'" +
            invObj.getSection_type_name() + "'," + "'" +
            invObj.getSection_value() +  "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// Inserts an Array List of InvoiceComponents objects into backend DB
        /// </summary>
        /// <param name="invCompList"></param>
        /// <returns></returns>
        public static int insertInvoiceComponentListDB(ArrayList invCompList)
        {
            int rowsAffected = 0;

            String insertCmd1stFirst = "insert into " + InvoiceComponents.INVOICE_COMPONENTS_TABLE
+ " ("
+ InvoiceComponents.INVOICE_COMPONENTS_COL_INVOICE_ID + ","
+ InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE + ","
+ InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE_NAME + ","
+ InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_VALUE + ")"
+ "values (";

            Connections cn = new Connections();

            for (int i = 0; i < invCompList.Count; i++)
            {
                InvoiceComponents invObj = (InvoiceComponents)invCompList[i];

                String insertCmd = "";

                insertCmd = insertCmd1stFirst + "'" + invObj.getInvoice_Id() + "'," + "'" +
                invObj.getSection_type() + "'," + "'" +
                invObj.getSection_type_name() + "'," + "'" +
                invObj.getSection_value() + "'";

                insertCmd += ")";

                //execute the insert for each of the state object
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }
            cn.disconnect();
            return rowsAffected;
        }
        /// <summary>
        /// note that the where clause must contain the invoice id
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any other tables
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateInvoiceComponentDetailsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(InvoiceComponents.INVOICE_COMPONENTS_COL_INVOICE_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - InvoiceComponents.updateInvoiceComponentDetailsDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to InvoiceComponents.updateInvoiceComponentDetailsDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to InvoiceComponents.updateInvoiceComponentDetailsDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + InvoiceComponents.INVOICE_COMPONENTS_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + InvoiceComponents.INVOICE_COMPONENTS_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
             chkDataType.Add(InvoiceComponents.INVOICE_COMPONENTS_COL_INVOICE_ID,InvoiceComponents.INVOICE_COMPONENTS_COL_INVOICE_ID_TYPE);
             chkDataType.Add(InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE_NAME,InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE_NAME_TYPE);
             chkDataType.Add(InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE,InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_TYPE_TYPE);
             chkDataType.Add(InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_VALUE, InvoiceComponents.INVOICE_COMPONENTS_COL_SECTION_VALUE_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to InvoiceComponents.updateInvoiceComponentDetailsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to InvoiceComponents.updateInvoiceComponentDetailsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;


        }
    }
    /// <summary>
    /// this class is representative of the backend database object 'Communication_Details'
    /// This is used for representing both communication and notes details
    /// </summary>
    public class Communications
    {
        private String contextId;
        private String contextType;
        private String docPath;
        private String commId;
        private String text;
        private String fromUserId;
        private String fromEntityId;
        private String dateCreated;
        private String toUserId;
        private String toEntityId;
        private FileUpload fileStream;

        private static String sessionUser = "";

        public const String COMMUNICATIONS_TABLE = "Communication_Details";

        /// <summary>
        /// This defines cumminication type as usual communication
        /// </summary>
        public const String COMMUNICATIONS_CONTEXT_TYPE_COMM = "comm";
        /// <summary>
        /// This defines communicatons type as note
        /// </summary>
        public const String COMMUNICATIONS_CONTEXT_TYPE_NOTE = "note";
        public const String COMMUNICATIONS_CONTEXT_TYPE_MSG = "msg";

        public const String COMMUNICATIONS_COL_CONTEXT_ID = "Context_id";
        public const String COMMUNICATIONS_COL_CONTEXT_TYPE = "Context_Type";
        public const String COMMUNICATIONS_COL_DOC_PATH = "Doc_Path";
        public const String COMMUNICATIONS_COL_COMM_ID = "Communication_id";
        public const String COMMUNICATIONS_COL_TEXT = "Text";
        public const String COMMUNICATIONS_COL_FROM_USR_ID = "From_Usr_id";
        public const String COMMUNICATIONS_COL_FROM_ENTITY_ID = "From_Cmp_Usr_Shop_id";
        public const String COMMUNICATIONS_COL_DATE_CREATED = "Date_Created";
        public const String COMMUNICATIONS_COL_TO_USR_ID = "To_Usr_id";
        public const String COMMUNICATIONS_COL_TO_ENTITY_ID = "To_Cmp_Usr_Shop_id";

        public const String COMMUNICATIONS_COL_CONTEXT_ID_TYPE = Connections.STRING_TYPE;
        public const String COMMUNICATIONS_COL_CONTEXT_TYPE_TYPE = Connections.STRING_TYPE;
        public const String COMMUNICATIONS_COL_DOC_PATH_TYPE = Connections.STRING_TYPE;
        public const String COMMUNICATIONS_COL_COMM_ID_TYPE = Connections.STRING_TYPE;
        public const String COMMUNICATIONS_COL_TEXT_TYPE = Connections.STRING_TYPE;
        public const String COMMUNICATIONS_COL_FROM_USR_ID_TYPE = Connections.STRING_TYPE;
        public const String COMMUNICATIONS_COL_FROM_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String COMMUNICATIONS_COL_DATE_CREATED_TYPE = Connections.DATE_TIME_TYPE;
        public const String COMMUNICATIONS_COL_TO_USR_ID_TYPE = Connections.STRING_TYPE;
        public const String COMMUNICATIONS_COL_TO_ENTITY_ID_TYPE = Connections.STRING_TYPE;



        public String getContextId()
        {
            return contextId;
        }
        public void setContextId(String cId)
        {
            contextId = cId;
        }
        public String getCommId()
        {
            return commId;
        }
        public void setCommId(String comId)
        {
            commId = comId;
        }
        public String getText()
        {
            return text;
        }
        public void setText(String txt)
        {
            text = txt;
        }
        public String getFromUserId()
        {
            return fromUserId;
        }
        public void setFromUserId(String uId)
        {
            fromUserId = uId;
        }
        public String getFromEntityId()
        {
            return fromEntityId;
        }
        public void setFromEntityId(String eId)
        {
            fromEntityId = eId;
        }
        public String getDateCreated()
        {
            return dateCreated;
        }
        public void setDateCreated(String dtCreated)
        {
            dateCreated = dtCreated;
        }
        public String getToEntityId()
        {
            return this.toEntityId;
        }
        public void setToEntityId(String entId)
        {
            this.toEntityId = entId;
        }
        public String getToUserId()
        {
            return this.toUserId;
        }
        public void setToUserId(String userId)
        {
            this.toUserId = userId;
        }
        public String getContextType()
        {
            return contextType;
        }
        public void setContextType(String contextType)
        {
            this.contextType = contextType;
        }
        public String getDocPath()
        {
            return docPath;
        }
        public void setDocPath(String docPath)
        {
            this.docPath = docPath;
        }
        public FileUpload getFileStream()
        {
            return this.fileStream;
        }
        public void setFileStream(FileUpload fS)
        {
            this.fileStream = fS;
        }

        /// <summary>
        /// for a given communication id return the respective database object from the table 'Communication_Details'
        /// </summary>
        /// <param name="commId"></param>
        /// <returns></returns>
        public static Communications getCommunicationbyIdDB(String commId)
        {
            if (commId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty communication Id sent to Communications.getCommunicationbyIdDB"));

            Connections cn = new Connections();
            String query = "select " + Communications.COMMUNICATIONS_COL_COMM_ID +
                "," + Communications.COMMUNICATIONS_COL_CONTEXT_ID +
                "," + Communications.COMMUNICATIONS_COL_DATE_CREATED +
                "," + Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID +
                "," + Communications.COMMUNICATIONS_COL_TEXT +
                "," + Communications.COMMUNICATIONS_COL_FROM_USR_ID +
                "," + Communications.COMMUNICATIONS_COL_TO_ENTITY_ID +
                "," + Communications.COMMUNICATIONS_COL_TO_USR_ID +
                "," + Communications.COMMUNICATIONS_COL_CONTEXT_TYPE +
                "," + Communications.COMMUNICATIONS_COL_DOC_PATH +
               " from " + Communications.COMMUNICATIONS_TABLE +
                " where " + Communications.COMMUNICATIONS_COL_COMM_ID + "='" + commId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Communications tempComm = new Communications();

            foreach (DataRow dr in dt.Rows)
            {
                tempComm.setCommId(dr[0].ToString());
                tempComm.setContextId(dr[1].ToString());
                tempComm.setDateCreated(dr[2].ToString());
                tempComm.setFromEntityId(dr[3].ToString());
                tempComm.setText(dr[4].ToString());
                tempComm.setFromUserId(dr[5].ToString());
                tempComm.setToEntityId(dr[6].ToString());
                tempComm.setToUserId(dr[7].ToString());
                tempComm.setContextType(dr[8].ToString());
                tempComm.setDocPath(dr[9].ToString());
            }
            cn.disconnect();
            return tempComm;

        }
        /// <summary>
        /// returns all associated communication objects related to a particular context id
        /// this is a heavyweight method - if not required absolutely use the lightweight version 'getCommunicationbyIdDB'
        /// </summary>
        /// <param name="contxtId"></param>
        /// <returns></returns>
        public static Dictionary<String, Communications> getAllCommunicationsforContextIdAndContextTypeAndSourceIdDB(String contxtId, String contextType,String sourceEntId)
        {
            /*returns all associated communication objects related to a particular context id
             * this is a heavyweight method - if not required absolutely use the lightweight version 'getCommunicationbyIdDB'
             * 
             * @Author: shibasis sengupta
            */

            if (contxtId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty context Id sent to Communications.getAllCommunicationsforContextIdDB"));

            Connections cn = new Connections();

            String query = "select " + Communications.COMMUNICATIONS_COL_COMM_ID +
                "," + Communications.COMMUNICATIONS_COL_CONTEXT_ID +
                "," + Communications.COMMUNICATIONS_COL_DATE_CREATED +
                "," + Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID +
                "," + Communications.COMMUNICATIONS_COL_TEXT +
                "," + Communications.COMMUNICATIONS_COL_FROM_USR_ID +
                "," + Communications.COMMUNICATIONS_COL_TO_ENTITY_ID +
                "," + Communications.COMMUNICATIONS_COL_TO_USR_ID +
                "," + Communications.COMMUNICATIONS_COL_CONTEXT_TYPE +
                "," + Communications.COMMUNICATIONS_COL_DOC_PATH +
                "," + Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID +
               " from " + Communications.COMMUNICATIONS_TABLE +
                " where " + Communications.COMMUNICATIONS_COL_CONTEXT_ID + "='" + contxtId.Trim() + "'" + " and " +
                Communications.COMMUNICATIONS_COL_CONTEXT_TYPE + "='" + contextType.Trim() + "'" + " and " +
                Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID + "='" + sourceEntId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, Communications> commDict = new Dictionary<string, Communications>();

            foreach (DataRow dr in dt.Rows)
            {
                //Communications tempComm = Communications.getCommunicationbyIdDB(dr[0].ToString());
                Communications tempComm = new Communications();
                tempComm.setCommId(dr[0].ToString());
                tempComm.setContextId(dr[1].ToString());
                tempComm.setDateCreated(dr[2].ToString());
                tempComm.setFromEntityId(dr[3].ToString());
                tempComm.setText(dr[4].ToString());
                tempComm.setFromUserId(dr[5].ToString());
                tempComm.setToEntityId(dr[6].ToString());
                tempComm.setToUserId(dr[7].ToString());
                tempComm.setContextType(dr[8].ToString());
                tempComm.setDocPath(dr[9].ToString());

                commDict.Add(dr[0].ToString(), tempComm);
            }
            cn.disconnect();
            return commDict;

        }
        /// <summary>
        /// For a given context id, source and destination entity id this returns a sorted dictionary sorted on the create date of the communication.
        /// This type of communiation is NOT for notes
        /// </summary>
        /// <param name="contxtId"></param>
        /// <returns></returns>
        public static SortedDictionary<DateTime, Communications> getAllCommunicationsforContextIdBetweenSourceAndDestDB(String contxtId, String src, String dest)
        {

            if (contxtId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty context Id sent to Communications.getAllCommunicationsforContextIdSourceAndDestDB"));

            if (src.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty source Id sent to Communications.getAllCommunicationsforContextIdSourceAndDestDB"));

            if (dest.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty destination Id sent to Communications.getAllCommunicationsforContextIdSourceAndDestDB"));

            Connections cn = new Connections();

            String query = "select " + Communications.COMMUNICATIONS_COL_COMM_ID +
                "," + Communications.COMMUNICATIONS_COL_CONTEXT_ID +
                "," + Communications.COMMUNICATIONS_COL_DATE_CREATED +
                "," + Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID +
                "," + Communications.COMMUNICATIONS_COL_TEXT +
                "," + Communications.COMMUNICATIONS_COL_FROM_USR_ID +
                "," + Communications.COMMUNICATIONS_COL_TO_ENTITY_ID +
                "," + Communications.COMMUNICATIONS_COL_TO_USR_ID +
               " from " + Communications.COMMUNICATIONS_TABLE +
                " where "
                + Communications.COMMUNICATIONS_COL_CONTEXT_ID + "='" + contxtId.Trim() + "'" + " and "
                + Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID + "='" + src.Trim() + "'" + " and "
                + Communications.COMMUNICATIONS_COL_TO_ENTITY_ID + "='" + dest.Trim() + "'";

            String query1 = "select " + Communications.COMMUNICATIONS_COL_COMM_ID +
    "," + Communications.COMMUNICATIONS_COL_CONTEXT_ID +
    "," + Communications.COMMUNICATIONS_COL_DATE_CREATED +
    "," + Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID +
    "," + Communications.COMMUNICATIONS_COL_TEXT +
    "," + Communications.COMMUNICATIONS_COL_FROM_USR_ID +
    "," + Communications.COMMUNICATIONS_COL_TO_ENTITY_ID +
    "," + Communications.COMMUNICATIONS_COL_TO_USR_ID +
    " from " + Communications.COMMUNICATIONS_TABLE +
    " where "
    + Communications.COMMUNICATIONS_COL_CONTEXT_ID + "='" + contxtId.Trim() + "'" + " and "
    + Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID + "='" + dest.Trim() + "'" + " and "
    + Communications.COMMUNICATIONS_COL_TO_ENTITY_ID + "='" + src.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            SortedDictionary<DateTime, Communications> commDict = new SortedDictionary<DateTime, Communications>();

            foreach (DataRow dr in dt.Rows)
            {
                Communications tempComm = Communications.getCommunicationbyIdDB(dr[0].ToString());
                commDict.Add((DateTime)dr[2], tempComm);
            }

            //Now for query 1
            ds = cn.execQuery(query1, sessionUser);
            dt = ds.Tables[0];


            foreach (DataRow dr in dt.Rows)
            {
                Communications tempComm = Communications.getCommunicationbyIdDB(dr[0].ToString());
                commDict.Add((DateTime)dr[2], tempComm);
            }
            cn.disconnect();
            return commDict;

        }
        /// <summary>
        /// insert the communication object into database
        /// </summary>
        /// <param name="comm"></param>
        /// <returns></returns>
        public static int insertCommunicationDB(Communications comm)
        {
            /*insert the communication object into database
             * 
             * @Author: shibasis sengupta
            */

            if (comm.getCommId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty mandatory field value sent to Invoice.insertInvoiceDB"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + Communications.COMMUNICATIONS_TABLE
                + " ("
                + Communications.COMMUNICATIONS_COL_COMM_ID + ","
                + Communications.COMMUNICATIONS_COL_CONTEXT_ID + ","
                + Communications.COMMUNICATIONS_COL_DATE_CREATED + ","
                + Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID + ","
                + Communications.COMMUNICATIONS_COL_TEXT + ","
                + Communications.COMMUNICATIONS_COL_FROM_USR_ID + ","
                + Communications.COMMUNICATIONS_COL_TO_ENTITY_ID + ","
                + Communications.COMMUNICATIONS_COL_CONTEXT_TYPE + ","
                            + Communications.COMMUNICATIONS_COL_DOC_PATH + ","
                + Communications.COMMUNICATIONS_COL_TO_USR_ID + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + "'" + comm.getCommId() + "'," + "'" +
            comm.getContextId() + "'," + "'" +
            comm.getDateCreated() + "'," + "'" +
            comm.getFromEntityId() + "'," + "'" +
            comm.getText() + "'," + "'" +
            comm.getFromUserId() + "'," + "'" +
            comm.getToEntityId() + "'," + "'" +
            comm.getContextType() + "'," + "'" +
            comm.getDocPath() + "'," + "'" +
            comm.getToUserId() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            FileUpload fileControl = comm.getFileStream();
            if (fileControl!=null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(comm.getDocPath());

            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the communications database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the communication id 
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any other tables
        /// </summary>
        /// <returns></returns>
        public static int updateCommunicationDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Communications.COMMUNICATIONS_COL_COMM_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Communications.updateCommunicationDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Communications.updateCommunicationDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Communications.updateCommunicationDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Communications.COMMUNICATIONS_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Communications.COMMUNICATIONS_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(Communications.COMMUNICATIONS_COL_FROM_USR_ID, Communications.COMMUNICATIONS_COL_FROM_USR_ID_TYPE);
            chkDataType.Add(Communications.COMMUNICATIONS_COL_TEXT, Communications.COMMUNICATIONS_COL_TEXT_TYPE);
            chkDataType.Add(Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID, Communications.COMMUNICATIONS_COL_FROM_ENTITY_ID_TYPE);
            chkDataType.Add(Communications.COMMUNICATIONS_COL_DATE_CREATED, Communications.COMMUNICATIONS_COL_DATE_CREATED_TYPE);
            chkDataType.Add(Communications.COMMUNICATIONS_COL_CONTEXT_ID, Communications.COMMUNICATIONS_COL_CONTEXT_ID_TYPE);
            chkDataType.Add(Communications.COMMUNICATIONS_COL_COMM_ID, Communications.COMMUNICATIONS_COL_COMM_ID_TYPE);
            chkDataType.Add(Communications.COMMUNICATIONS_COL_TO_ENTITY_ID, Communications.COMMUNICATIONS_COL_TO_ENTITY_ID_TYPE);
            chkDataType.Add(Communications.COMMUNICATIONS_COL_TO_USR_ID, Communications.COMMUNICATIONS_COL_TO_USR_ID_TYPE);
            chkDataType.Add(Communications.COMMUNICATIONS_COL_CONTEXT_TYPE, Communications.COMMUNICATIONS_COL_CONTEXT_TYPE_TYPE);
            chkDataType.Add(Communications.COMMUNICATIONS_COL_DOC_PATH, Communications.COMMUNICATIONS_COL_DOC_PATH_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Communications.updateCommunicationDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Communications.updateCommunicationDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }

            Connections cn = new Connections();

            if (operation.Equals(Connections.OPERATION_DELETE))
            {
                String docPath = "";
                DataSet ds = cn.execQuery("select " + Communications.COMMUNICATIONS_COL_DOC_PATH + " from "
                    + Communications.COMMUNICATIONS_TABLE + " where " + Communications.COMMUNICATIONS_COL_COMM_ID +
                    "='" + whereClause[COMMUNICATIONS_COL_COMM_ID] + "'", "");

                DataTable dt = ds.Tables[0];

                foreach (DataRow dr in dt.Rows)
                {
                    docPath = dr[0].ToString();
                }

                    if (File.Exists(docPath))
                        File.Delete(docPath);

            }
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);

            cn.disconnect();
           return rowsAffected;

        }

        /// <summary>
        /// This method needs to be passed the main business entity id. This method will create a folder structure using that entity id and this objects
        /// context id.
        /// context id must be set to this object before this method is called.
        /// Also, this method will generate a image id for the image/dpc and prepond the image name (as stored with the filestream property) with the id
        /// </summary>
        /// <param name="entId"></param>
        public void setDocPathInFileStore(String entId)
        {
            if (entId == null || entId.Equals("") || this.getContextId() == null || this.getContextId().Equals(""))
                throw new CustomExceptions.businessRuleViolationException("context id and/or ent id not set");
            else
                docPath = this.generateImagePath(entId + "\\" + this.getContextId()) + "\\" + new Id().getNewId(Id.ID_TYPE_IMAGE_ID_STRING) + "_" + this.getFileStream().FileName;

        }

        /// <summary>
        /// Provided a folder path (can have multi-level path also separated by "\\" this method will create the entire
        /// folder structure.
        /// </summary>
        /// <param name="folderName"></param>
        /// <returns></returns>
        public String generateImagePath(String folderName)
        {
            String fileStoreRoot = App.Default.FileStoreRoot;
            String[] delimList = { "\\" };
            String[] subFolders = folderName.Split(delimList, StringSplitOptions.RemoveEmptyEntries);

            String returnPath = "";
            try
            {
                for (int i = 0; i < subFolders.Length; i++)
                    if (!Directory.Exists(fileStoreRoot + "\\" + subFolders[i]))
                    {
                        Directory.CreateDirectory(fileStoreRoot + "\\" + subFolders[i]);
                        fileStoreRoot += "\\" + subFolders[i];
                    }
                    else
                        fileStoreRoot += "\\" + subFolders[i];

                returnPath = fileStoreRoot;
            }
            catch (Exception ex)
            {
                returnPath = "";

            }
            return returnPath;
        }

    }
    /// <summary>
    /// this class is representative of the database object 'Payment_Details'
    /// </summary>
    public class Payment
    {
        private String invoiceId;
        private String RFQid;
        private String paymentId;
        private String UsrId;
        private String entityId;
        private String pmntDate;
        private String paymentType;
        private float amount;
        private String tranNo;
        private String clearingStat;
        private String clearingStatNote;
        
        private static String sessionUser = "";

        public const String PAYMENT_TABLE = "Payment_Details";

        public const String PAYMENT_CLEARING_STAT_CLEAR = "Clear";
        public const String PAYMENT_CLEARING_STAT_PENDING = "Pending";

        public const String PAYMENT_COL_INVOICE_ID = "Invoice_id";
        public const String PAYMENT_COL_RFQ_ID = "RFQ_id";
        public const String PAYMENT_COL_PAYMENT_ID = "payment_id";
        public const String PAYMENT_COL_USR_ID = "Usr_id";
        public const String PAYMENT_COL_ENTITY_ID = "Cmp_Usr_Shop_id";
        public const String PAYMENT_COL_PMNT_DATE = "Payment_date";
        public const String PAYMENT_COL_PAYMENT_TYPE = "Payment_Type";
        public const String PAYMENT_COL_AMOUNT = "Amount";
        public const String PAYMENT_COL_TRAN_NO = "Tran_no";
        public const String PAYMENT_COL_CLEARING_STAT = "Clearing_Status";
        public const String PAYMENT_COL_CLEARING_STAT_NOTE = "Clearing_Status_Note";

        public const String PAYMENT_COL_INVOICE_ID_TYPE = Connections.STRING_TYPE;
        public const String PAYMENT_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String PAYMENT_COL_PAYMENT_ID_TYPE = Connections.STRING_TYPE;
        public const String PAYMENT_COL_USR_ID_TYPE = Connections.STRING_TYPE;
        public const String PAYMENT_COL_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String PAYMENT_COL_PMNT_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String PAYMENT_COL_PAYMENT_TYPE_TYPE = Connections.STRING_TYPE;
        public const String PAYMENT_COL_AMOUNT_TYPE = Connections.NUMBER_TYPE;
        public const String PAYMENT_COL_TRAN_NO_TYPE = Connections.STRING_TYPE;
        public const String PAYMENT_COL_CLEARING_STAT_TYPE = Connections.STRING_TYPE;
        public const String PAYMENT_COL_CLEARING_STAT_NOTE_TYPE = Connections.STRING_TYPE;
        
        public String getInvoiceId()
        {
            return invoiceId;
        }
        public void setInvoiceId(String invId)
        {
            invoiceId = invId;
        }
        public String getRFQId()
        {
            return RFQid;
        }
        public void setRFQId(String rId)
        {
            RFQid = rId;
        }
        public String getPaymentId()
        {
            return paymentId;
        }
        public void setPaymentId(String pmntId)
        {
            paymentId = pmntId;
        }
        public String getUsrId()
        {
            return UsrId;
        }
        public void setUsrId(String uId)
        {
            UsrId = uId;
        }
        public String getEntityid()
        {
            return entityId;
        }
        public void setEntityId(String eId)
        {
            entityId = eId;
        }
        public String getPmntDate()
        {
            return pmntDate;
        }
        public void setPmntDate(String cDate)
        {
            pmntDate = cDate;
        }
        public String getPaymentType()
        {
            return paymentType;
        }
        public void setPaymentType(String pType)
        {
            paymentType = pType;
        }
        public float getAmount()
        {
            return amount;
        }
        public void setAmount(float amnt)
        {
            amount = amnt;
        }
        public String getTranNo()
        {
            return tranNo;
        }
        public void setTranNo(String tNo)
        {
            tranNo = tNo;
        }
        public String getClearingStat()
        {
            return clearingStat;
        }
        public void setClearingStat(String clStat)
        {
            clearingStat = clStat;
        }

        public String getClearingStatNote()
        {
            return this.clearingStatNote;
        }

        public void setClearingStatNote(String clStatNote)
        {
            this.clearingStatNote = clStatNote;
        }

        /// <summary>
        /// for a given invoice id, returns all associated payment objects from the database
        /// the return dictionary 'key' is the payment id String and the 'value' is the respective payment object
        /// </summary>
        /// <param name="invId"></param>
        /// <returns></returns>
        public static Dictionary<String, Payment> getPaymentDetailsforInvoiceDB(String invId)
        {
            /* for a given invoice id, returns all associated payment objects from the database
             * the return dictionary 'key' is the payment id String and the 'value' is the respective payment object
             * 
             * @Author: shibasis sengupta
            */

            if (invId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty invoice Id sent to Payment.getPaymentDetailsforInvoiceDB"));

            Connections cn = new Connections();
            String query = "select " + Payment.PAYMENT_COL_INVOICE_ID +
                "," + Payment.PAYMENT_COL_AMOUNT +
                "," + Payment.PAYMENT_COL_CLEARING_STAT +
                "," + Payment.PAYMENT_COL_PMNT_DATE +
                "," + Payment.PAYMENT_COL_ENTITY_ID +
                "," + Payment.PAYMENT_COL_PAYMENT_TYPE +
                "," + Payment.PAYMENT_COL_RFQ_ID +
                "," + Payment.PAYMENT_COL_TRAN_NO +
                "," + Payment.PAYMENT_COL_USR_ID +
                "," + Payment.PAYMENT_COL_PAYMENT_ID +
                "," + Payment.PAYMENT_COL_CLEARING_STAT_NOTE +
                " from " + Payment.PAYMENT_TABLE +
                " where " + Payment.PAYMENT_COL_INVOICE_ID + "='" + invId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, Payment> pmntDict = new Dictionary<string, Payment>();

            foreach (DataRow dr in dt.Rows)
            {
                Payment temp = new Payment();

                temp.setInvoiceId(dr[0].ToString());
                temp.setAmount(float.Parse(dr[1].ToString()));
                temp.setClearingStat(dr[2].ToString());
                temp.setPmntDate(dr[3].ToString());
                temp.setEntityId(dr[4].ToString());
                temp.setPaymentType(dr[5].ToString());
                temp.setRFQId(dr[6].ToString());
                temp.setTranNo(dr[7].ToString());
                temp.setUsrId(dr[8].ToString());
                temp.setPaymentId(dr[9].ToString());
                temp.setClearingStatNote(dr[10].ToString());

                pmntDict.Add(temp.getPaymentId(), temp);
                
            }
            cn.disconnect();
            return pmntDict;

        }

        /// <summary>
        /// for a given invoice id and transaction id, returns the associated payment object from the database
        /// the return dictionary 'key' is the payment id String and the 'value' is the respective payment object
        /// </summary>
        /// <param name="invId"></param>
        /// <returns></returns>
        public static Dictionary<String, Payment> getPaymentDetailsforInvoiceIdandTranIdDB(String invId,String tranId)
        {
            /* for a given invoice id, returns all associated payment objects from the database
             * the return dictionary 'key' is the payment id String and the 'value' is the respective payment object
             * 
             * @Author: shibasis sengupta
            */

            if (invId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty invoice Id sent to Payment.getPaymentDetailsforInvoiceDB"));

            Connections cn = new Connections();
            String query = "select " + Payment.PAYMENT_COL_INVOICE_ID +
                "," + Payment.PAYMENT_COL_AMOUNT +
                "," + Payment.PAYMENT_COL_CLEARING_STAT +
                "," + Payment.PAYMENT_COL_PMNT_DATE +
                "," + Payment.PAYMENT_COL_ENTITY_ID +
                "," + Payment.PAYMENT_COL_PAYMENT_TYPE +
                "," + Payment.PAYMENT_COL_RFQ_ID +
                "," + Payment.PAYMENT_COL_TRAN_NO +
                "," + Payment.PAYMENT_COL_USR_ID +
                "," + Payment.PAYMENT_COL_PAYMENT_ID +
                "," + Payment.PAYMENT_COL_CLEARING_STAT_NOTE +
                " from " + Payment.PAYMENT_TABLE +
                " where " + Payment.PAYMENT_COL_INVOICE_ID + "='" + invId.Trim() + "'" +
                " and " + Payment.PAYMENT_COL_TRAN_NO + "='" + tranId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, Payment> pmntDict = new Dictionary<string, Payment>();

            foreach (DataRow dr in dt.Rows)
            {
                Payment temp = new Payment();

                temp.setInvoiceId(dr[0].ToString());
                temp.setAmount(float.Parse(dr[1].ToString()));
                temp.setClearingStat(dr[2].ToString());
                temp.setPmntDate(dr[3].ToString());
                temp.setEntityId(dr[4].ToString());
                temp.setPaymentType(dr[5].ToString());
                temp.setRFQId(dr[6].ToString());
                temp.setTranNo(dr[7].ToString());
                temp.setUsrId(dr[8].ToString());
                temp.setPaymentId(dr[9].ToString());
                temp.setClearingStatNote(dr[10].ToString());

                pmntDict.Add(temp.getPaymentId(), temp);

            }
            cn.disconnect();
            return pmntDict;

        }
        /// <summary>
        /// for a given invoice id, returns all associated payment objects from the database
        /// the return dictionary 'key' is the payment id String and the 'value' is the respective payment object
        /// </summary>
        /// <param name="rId"></param>
        /// <returns></returns>
        public static Dictionary<String, Payment> getPaymentDetailsforRFQDB(String rId)
        {
            if (rId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to Payment.getPaymentDetailsforRFQDB"));

            Connections cn = new Connections();
            String query = "select " + Payment.PAYMENT_COL_RFQ_ID +
                "," + Payment.PAYMENT_COL_AMOUNT +
                "," + Payment.PAYMENT_COL_CLEARING_STAT +
                "," + Payment.PAYMENT_COL_PMNT_DATE +
                "," + Payment.PAYMENT_COL_ENTITY_ID +
                "," + Payment.PAYMENT_COL_PAYMENT_TYPE +
                "," + Payment.PAYMENT_COL_INVOICE_ID +
                "," + Payment.PAYMENT_COL_TRAN_NO +
                "," + Payment.PAYMENT_COL_USR_ID +
                "," + Payment.PAYMENT_COL_PAYMENT_ID +
                "," + Payment.PAYMENT_COL_CLEARING_STAT_NOTE +
                " from " + Payment.PAYMENT_TABLE +
                " where " + Payment.PAYMENT_COL_RFQ_ID + "='" + rId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, Payment> pmntDict = new Dictionary<string, Payment>();

            foreach (DataRow dr in dt.Rows)
            {
                Payment temp = new Payment();

                temp.setRFQId(dr[0].ToString());
                temp.setAmount(float.Parse(dr[1].ToString()));
                temp.setClearingStat(dr[2].ToString());
                temp.setPmntDate(dr[3].ToString());
                temp.setEntityId(dr[4].ToString());
                temp.setPaymentType(dr[5].ToString());
                temp.setInvoiceId(dr[6].ToString());
                temp.setTranNo(dr[7].ToString());
                temp.setUsrId(dr[8].ToString());
                temp.setPaymentId(dr[9].ToString());
                temp.setClearingStatNote(dr[10].ToString());

                pmntDict.Add(temp.getPaymentId(), temp);

            }
            cn.disconnect();
            return pmntDict;


        }
        /// <summary>
        /// for a given payment id return the respective payment object from database
        /// </summary>
        /// <param name="pmntId"></param>
        /// <returns></returns>
        public static Payment getPaymentDetailsbyIdDB(String pmntId)
        {
            /*for a given payment id return the respective payment object from database
             * 
             * @Author: shibasis sengupta
            */

            if (pmntId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty payment Id sent to Payment.getPaymentDetailsbyIdDB"));

            Connections cn = new Connections();
            String query = "select " + Payment.PAYMENT_COL_PAYMENT_ID  +
                "," + Payment.PAYMENT_COL_AMOUNT +
                "," + Payment.PAYMENT_COL_CLEARING_STAT +
                "," + Payment.PAYMENT_COL_PMNT_DATE +
                "," + Payment.PAYMENT_COL_ENTITY_ID +
                "," + Payment.PAYMENT_COL_PAYMENT_TYPE +
                "," + Payment.PAYMENT_COL_RFQ_ID +
                "," + Payment.PAYMENT_COL_TRAN_NO +
                "," + Payment.PAYMENT_COL_USR_ID +
                "," + Payment.PAYMENT_COL_INVOICE_ID +
                "," + Payment.PAYMENT_COL_CLEARING_STAT_NOTE +
                " from " + Payment.PAYMENT_TABLE +
                " where " + Payment.PAYMENT_COL_PAYMENT_ID + "='" + pmntId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            
                Payment temp = new Payment();

                foreach (DataRow dr in dt.Rows)
                {
                    temp.setPaymentId(dr[0].ToString());
                    temp.setAmount(float.Parse(dr[1].ToString()));
                    temp.setClearingStat(dr[2].ToString());
                    temp.setPmntDate(dr[3].ToString());
                    temp.setEntityId(dr[4].ToString());
                    temp.setPaymentType(dr[5].ToString());
                    temp.setRFQId(dr[6].ToString());
                    temp.setTranNo(dr[7].ToString());
                    temp.setUsrId(dr[8].ToString());
                    temp.setInvoiceId(dr[9].ToString());
                    temp.setClearingStatNote(dr[10].ToString());
                }
            cn.disconnect();
            return temp;

        }
        /// <summary>
        /// inserts the payment object into database
        /// </summary>
        /// <param name="pmnt"></param>
        /// <returns></returns>
        public static int insertPaymentDetailsDB(Payment pmnt)
        {
            /* inserts the payment object into database
             * 
             * @Author: shibasis senngupta
            */

            if (pmnt.getPaymentId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty payment id value sent to Payment.insertPaymentDetailsDB"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + Payment.PAYMENT_TABLE
                + " ("
                + Payment.PAYMENT_COL_AMOUNT + ","
                + Payment.PAYMENT_COL_CLEARING_STAT + ","
                + Payment.PAYMENT_COL_PMNT_DATE + ","
                + Payment.PAYMENT_COL_ENTITY_ID + ","
                + Payment.PAYMENT_COL_INVOICE_ID + ","
                + Payment.PAYMENT_COL_PAYMENT_ID + ","
                + Payment.PAYMENT_COL_PAYMENT_TYPE + ","
                + Payment.PAYMENT_COL_RFQ_ID + ","
                + Payment.PAYMENT_COL_TRAN_NO + ","
                + Payment.PAYMENT_COL_CLEARING_STAT_NOTE + ","
                + Payment.PAYMENT_COL_USR_ID + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " " + pmnt.getAmount() + "," + "'" +
            pmnt.getClearingStat() + "'," + "'" +
            pmnt.getPmntDate() + "'," + "'" +
            pmnt.getEntityid() + "'," + "'" +
            pmnt.getInvoiceId() + "'," + "'" +
            pmnt.getPaymentId() + "'," + "'" +
            pmnt.getPaymentType() + "'," + "'" +
            pmnt.getRFQId() + "'," + "'" +
            pmnt.getTranNo() + "'," + "'" +
            pmnt.getClearingStatNote() + "'," + "'" +
            pmnt.getUsrId() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            return rowsAffected;


        }
        /// <summary>
        /// update or delete values in the communications database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the payment id 
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any other tables
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updatePaymentDetailsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* update or delete values in the communications database table
             * the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the payment id 
             * the third parameter contains the type of operation
             * a delete operation will  have no  cascading effect on any other tables
             * 
             * @Author: shibasis sengupta
             */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Payment.PAYMENT_COL_PAYMENT_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Payment.updatePaymentDetailsDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Payment.updatePaymentDetailsDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Payment.updatePaymentDetailsDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Payment.PAYMENT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + Payment.PAYMENT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(Payment.PAYMENT_COL_USR_ID, Payment.PAYMENT_COL_USR_ID_TYPE);
            chkDataType.Add(Payment.PAYMENT_COL_TRAN_NO, Payment.PAYMENT_COL_TRAN_NO_TYPE);
            chkDataType.Add(Payment.PAYMENT_COL_RFQ_ID, Payment.PAYMENT_COL_RFQ_ID_TYPE);
            chkDataType.Add(Payment.PAYMENT_COL_PAYMENT_TYPE, Payment.PAYMENT_COL_PAYMENT_TYPE_TYPE);
            chkDataType.Add(Payment.PAYMENT_COL_PAYMENT_ID, Payment.PAYMENT_COL_PAYMENT_ID_TYPE);
            chkDataType.Add(Payment.PAYMENT_COL_INVOICE_ID, Payment.PAYMENT_COL_INVOICE_ID_TYPE);
            chkDataType.Add(Payment.PAYMENT_COL_ENTITY_ID, Payment.PAYMENT_COL_ENTITY_ID_TYPE);
            chkDataType.Add(Payment.PAYMENT_COL_PMNT_DATE, Payment.PAYMENT_COL_PMNT_DATE_TYPE);
            chkDataType.Add(Payment.PAYMENT_COL_CLEARING_STAT, Payment.PAYMENT_COL_CLEARING_STAT_TYPE);
            chkDataType.Add(Payment.PAYMENT_COL_AMOUNT, Payment.PAYMENT_COL_AMOUNT_TYPE);
            chkDataType.Add(Payment.PAYMENT_COL_CLEARING_STAT_NOTE, Payment.PAYMENT_COL_CLEARING_STAT_NOTE_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Payment.updatePaymentDetailsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to Payment.updatePaymentDetailsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
       
        }

    }
    /// <summary>
    /// this class is representative of the backend object 'Defect_Details'
    /// </summary>
    public class DefectDetails
    {
        private String RFQId;
        private String invoiceId;
        private String defectId;
        private String supplierId;
        private String customerId;
        private String dateCreated;
        private String defectStat;
        private String statReason;
        private String resolStat;
        private String assignedToUsr;
        private String descr;
        private String defectSeverity;
        private String creationMode;
        private String createdByComp;
        private String createdByUser;
        private String docPath;
        private String closeDate;
        private String currency;
        private String defectorsr;


        private FileUpload fileStream;

        private float totalAmount;

        private static String sessionUser = "";

        public const String DEFECT_TABLE = "Defect_Details";

        public const String DEFECT_CREATION_MODE_MANUAL = "Manual";
        public const String DEFECT_CREATION_MODE_AUTO = "Auto";

        public const String DEFECT_COL_RFQ_ID = "RFQ_id";
        public const String DEFECT_COL_INVOICE_ID = "Invoice_id";
        public const String DEFECT_COL_DEFECT_ID = "Defect_id";
        public const String DEFECT_COL_SUPPLIER_ID = "Supplier_id";
        public const String DEFECT_COL_CUSTOMER_ID = "Customer_id";
        public const String DEFECT_COL_DATE_CREATED = "date_created";
        public const String DEFECT_COL_DEFECT_STAT = "Defect_Status";
        public const String DEFECT_COL_STAT_REASON = "Status_Reason";
        public const String DEFECT_COL_RESOL_STAT = "Defect_Resolution_Status";
        public const String DEFECT_COL_ASSGND_TO = "Defect_Assigned_To";
        public const String DEFECT_COL_DESCR = "Description";
        public const String DEFECT_COL_SEVERITY = "Severity";
        public const String DEFECT_COL_CREATION_MODE = "Creation_Mode";
        public const String DEFECT_COL_CREATED_BY_CMP = "Created_By_Cmp_Id";
        public const String DEFECT_COL_CREATED_BY_USR = "Created_By_User_Id";
        public const String DEFECT_COL_TOTAL_AMNT = "Total_Amount";
        public const String DEFECT_COL_DOC_PATH = "Doc_Path";
        public const String DEFECT_COL_CLOSE_DATE = "Close_Date";
        public const String DEFECT_COL_CURRENCY = "Currency_Id";
        public const String DEFECT_COL_DEFECTORSR = "DefectorSR";

        public const String DEFECT_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_INVOICE_ID_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_DEFECT_ID_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_SUPPLIER_ID_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_CUSTOMER_ID_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_DATE_CREATED_TYPE = Connections.DATE_TIME_TYPE;
        public const String DEFECT_COL_DEFECT_STAT_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_STAT_REASON_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_RESOL_STAT_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_ASSGND_TO_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_DESCR_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_SEVERITY_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_CREATION_MODE_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_CREATED_BY_CMP_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_CREATED_BY_USR_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_TOTAL_AMNT_TYPE = Connections.NUMBER_TYPE;
        public const String DEFECT_COL_DOC_PATH_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_CLOSE_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String DEFECT_COL_CURRENCY_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_COL_DEFECTORSR_TYPE = Connections.STRING_TYPE;

        public String getCurrency()
        {
            return currency;
        }
        public void setCurrency(String currency)
        {
            this.currency = currency;
        }
        /// <summary>
        /// This method needs to be passed the main business entity id. This method will create a folder structure using that entity id and this objects
        /// Defect id.
        /// Defect id must be set to this object before this method is called.
        /// Also, this method will generate a image id for the image/dpc and prepond the image name (as stored with the filestream property) with the id
        /// </summary>
        /// <param name="entId"></param>
        public void setDocPathInFileStore(String entId)
        {
            if (entId == null || entId.Equals("") || this.getDefectId() == null || this.getDefectId().Equals(""))
                throw new CustomExceptions.businessRuleViolationException("RFQ id and/or entity id not set");
            else
                docPath = this.generateImagePath(entId + "\\" + this.getRFQId()) + "\\" + new Id().getNewId(Id.ID_TYPE_IMAGE_ID_STRING) + "_" + this.getFileStream().FileName;

        }

        /// <summary>
        /// Provided a folder path (can have multi-level path also separated by "\\" this method will create the entire
        /// folder structure.
        /// </summary>
        /// <param name="folderName"></param>
        /// <returns></returns>
        public String generateImagePath(String folderName)
        {
            String fileStoreRoot = App.Default.FileStoreRoot;
            String[] delimList = { "\\" };
            String[] subFolders = folderName.Split(delimList, StringSplitOptions.RemoveEmptyEntries);

            String returnPath = "";
            try
            {
                for (int i = 0; i < subFolders.Length; i++)
                    if (!Directory.Exists(fileStoreRoot + "\\" + subFolders[i]))
                    {
                        Directory.CreateDirectory(fileStoreRoot + "\\" + subFolders[i]);
                        fileStoreRoot += "\\" + subFolders[i];
                    }
                    else
                        fileStoreRoot += "\\" + subFolders[i];

                returnPath = fileStoreRoot;
            }
            catch (Exception ex)
            {
                returnPath = "";

            }
            return returnPath;
        }

        public String getCloseDate()
        {
            return this.closeDate;
        }

        public void setCloseDate(String cDate)
        {
            this.closeDate = cDate;
        }

        public FileUpload getFileStream()
        {
            return this.fileStream;
        }
        public void setFileStream(FileUpload fS)
        {
            this.fileStream = fS;
        }

        public String getDocPath()
        {
            return this.docPath;
        }

        public void setDocPath(String path)
        {
            this.docPath = path;
        }

        public float getTotalAmount()
        {
            return this.totalAmount;
        }

        public void setTotalAmount(float amount)
        {
            this.totalAmount = amount;
        }

        public String getCreatedByComp()
        {
            return createdByComp;
        }
        public void setCreatedByComp(String createdByComp)
        {
            this.createdByComp = createdByComp;
        }
        public String getCreatedByUser()
        {
            return createdByUser;
        }
        public void setCreatedByUser(String createdByUser)
        {
            this.createdByUser = createdByUser;
        }

        public String getRFQId()
        {
            return RFQId;
        }
        public void setRFQId(String rfId)
        {
            RFQId = rfId;
        }

        public String getCreationMode()
        {
            return this.creationMode;
        }
        public void setCreationMode(String cM)
        {
            this.creationMode = cM;
        }
        public String getSeverity()
        {
            return this.defectSeverity;
        }
        public void setSeverity(String sev)
        {
            this.defectSeverity = sev;
        }

        public String getDescription()
        {
            return this.descr;
        }

        public void setDescription(String desc)
        {
            this.descr = desc;
        }
        public String getInvoiceId()
        {
            return invoiceId;
        }
        public void setInvoiceId(String invId)
        {
            invoiceId = invId;
        }
        public String getDefectId()
        {
            return defectId;
        }
        public void setDefectId(String dfctId)
        {
            defectId = dfctId;
        }
        public String getSupplierId()
        {
            return supplierId;
        }
        public void setSupplierId(String sId)
        {
            supplierId = sId;
        }
        public String getCustomerId()
        {
            return customerId;
        }
        public void setCustomerId(String custId)
        {
            customerId = custId;
        }
        public String getDateCreated()
        {
            return dateCreated;
        }
        public void setDateCreated(String dt)
        {
            dateCreated = dt;
        }
        public String getDefectStat()
        {
            return defectStat;
        }
        public void setDefectStat(String dStat)
        {
            defectStat = dStat;
        }
        public String getStatReason()
        {
            return statReason;
        }
        public void setStatReason(String stRsn)
        {
            statReason = stRsn;
        }
        public String getResolStat()
        {
            return resolStat;
        }
        public void setResolStat(String resStat)
        {
            resolStat = resStat;
        }
        public String getAssignedToUser()
        {
            return assignedToUsr;
        }
        public void setAssignedToUser(String asgnUsr)
        {
            assignedToUsr = asgnUsr;
        }

        /// <summary>
        /// for a given defect id return the associated defect object from database
        /// </summary>
        /// <param name="dfctId"></param>
        /// <returns></returns>
        public static DefectDetails getDefectDetailsbyidDB(String dfctId)
        {
            if (dfctId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty defect Id sent to DefectDetails.getDefectDetailsbyidDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
            " from " + DefectDetails.DEFECT_TABLE +
             " where " + DefectDetails.DEFECT_COL_DEFECT_ID + "='" + dfctId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            DefectDetails temp = new DefectDetails();

            foreach (DataRow dr in dt.Rows)
            {
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByComp(dr[13].ToString());
                temp.setCreatedByUser(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());
            }
            cn.disconnect();
            return temp;
        }
        public static DefectDetails getSRDetailsbyidDB(String dfctId)
        {
            if (dfctId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty defect Id sent to DefectDetails.getDefectDetailsbyidDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
            " from " + DefectDetails.DEFECT_TABLE +
             " where " + DefectDetails.DEFECT_COL_DEFECT_ID + "='" + dfctId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            DefectDetails temp = new DefectDetails();

            foreach (DataRow dr in dt.Rows)
            {
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByComp(dr[13].ToString());
                temp.setCreatedByUser(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());
            }
            cn.disconnect();
            return temp;
        }
        /// <summary>
        /// for a given customer id returns all the associated defect objects from the database
        /// the 'key' of the returned dictionary is the defect id and the 'value' is respective defect details object
        /// </summary>
        /// <param name="custId"></param>
        /// <returns></returns>
        public static Dictionary<String, DefectDetails> getAllDefectDetailsforCustomerIdDB(String custId)
        {
            if (custId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty customer Id sent to DefectDetails.getAllDefectDetailsforCustomerIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_CUSTOMER_ID + "='" + custId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            Dictionary<String, DefectDetails> dfctDict = new Dictionary<String, DefectDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());

                dfctDict.Add(dr[0].ToString(), temp);
            }
            cn.disconnect();
            return dfctDict;

        }
        public static Dictionary<String, DefectDetails> getAllSRDetailsforCustomerIdDB(String custId)
        {
            if (custId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty customer Id sent to DefectDetails.getAllDefectDetailsforCustomerIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_CUSTOMER_ID + "='" + custId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            Dictionary<String, DefectDetails> dfctDict = new Dictionary<String, DefectDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());

                dfctDict.Add(dr[0].ToString(), temp);
            }
            cn.disconnect();
            return dfctDict;

        }
        public static ArrayList getAllDefectDetailsforCustomerIdDBORDERBYCreateDate(String custId)
        {
            if (custId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty customer Id sent to DefectDetails.getAllDefectDetailsforCustomerIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                   "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR + 
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_CUSTOMER_ID + "='" + custId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'"+
                " order by " + DefectDetails.DEFECT_COL_DATE_CREATED + " ASC ";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            ArrayList dfctList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctList.Add(temp);
            }
            cn.disconnect();
            return dfctList;

        }
        public static ArrayList getAllSRDetailsforCustomerIdDBORDERBYCreateDate(String custId)
        {
            if (custId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty customer Id sent to DefectDetails.getAllDefectDetailsforCustomerIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                   "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_CUSTOMER_ID + "='" + custId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'" +
                " order by " + DefectDetails.DEFECT_COL_DATE_CREATED + " ASC ";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            ArrayList dfctList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctList.Add(temp);
            }
            cn.disconnect();
            return dfctList;

        }
        public static ArrayList getAllDefectDetailsforCustomerIdDBORDERBYCloseDate(String custId)
        {
            if (custId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty customer Id sent to DefectDetails.getAllDefectDetailsforCustomerIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_CUSTOMER_ID + "='" + custId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'" + " order by " + DefectDetails.DEFECT_COL_CLOSE_DATE + " ASC ";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            ArrayList dfctList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctList.Add(temp);
            }
            cn.disconnect();
            return dfctList;

        }
        public static ArrayList getAllSRDetailsforCustomerIdDBORDERBYCloseDate(String custId)
        {
            if (custId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty customer Id sent to DefectDetails.getAllDefectDetailsforCustomerIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_CUSTOMER_ID + "='" + custId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'" + " order by " + DefectDetails.DEFECT_COL_CLOSE_DATE + " ASC ";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            ArrayList dfctList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctList.Add(temp);
            }
            cn.disconnect();
            return dfctList;

        }
        /// <summary>
        /// for a given customer id and defect id returns the respective defect object from the database
        /// </summary>
        /// <param name="custId"></param>
        /// <param name="dfctId"></param>
        /// <returns></returns>
        public static DefectDetails getDefectDetailsforCustomerIdandDefectIdDB(String custId, String dfctId)
        {
            if (dfctId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty defect Id sent to DefectDetails.getDefectDetailsforCustomerIdandDefectIdDB"));

            if (custId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty customer Id sent to DefectDetails.getDefectDetailsforCustomerIdandDefectIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                 " where " + DefectDetails.DEFECT_COL_DEFECT_ID + "='" + dfctId.Trim() + "'" +
                " and " + DefectDetails.DEFECT_COL_CUSTOMER_ID + "='" + custId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            DefectDetails temp = new DefectDetails();

            foreach (DataRow dr in dt.Rows)
            {
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByComp(dr[13].ToString());
                temp.setCreatedByUser(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());
            }
            cn.disconnect();
            return temp;


        }
        public static DefectDetails getSRDetailsforCustomerIdandDefectIdDB(String custId, String dfctId)
        {
            if (dfctId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty defect Id sent to DefectDetails.getDefectDetailsforCustomerIdandDefectIdDB"));

            if (custId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty customer Id sent to DefectDetails.getDefectDetailsforCustomerIdandDefectIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                 " where " + DefectDetails.DEFECT_COL_DEFECT_ID + "='" + dfctId.Trim() + "'" +
                " and " + DefectDetails.DEFECT_COL_CUSTOMER_ID + "='" + custId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            DefectDetails temp = new DefectDetails();

            foreach (DataRow dr in dt.Rows)
            {
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByComp(dr[13].ToString());
                temp.setCreatedByUser(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());
            }
            cn.disconnect();
            return temp;


        }
        /// <summary>
        /// for a given supplier id returns all the associated defect objects from the database
        /// the 'key' of the returned dictionary is the defect id and the 'value' is respective defect details object
        /// </summary>
        /// <param name="supId"></param>
        /// <returns></returns>
        public static Dictionary<String, DefectDetails> getAllDefectDetailsforSupplierIdDB(String supId)
        {

            if (supId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty supplier Id sent to DefectDetails.getAllDefectDetailsforSupplierIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_SUPPLIER_ID + "='" + supId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            Dictionary<String, DefectDetails> dfctDict = new Dictionary<String, DefectDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctDict.Add(dr[0].ToString(), temp);
            }
            cn.disconnect();
            return dfctDict;

        }
        public static Dictionary<String, DefectDetails> getAllSRDetailsforSupplierIdDB(String supId)
        {

            if (supId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty supplier Id sent to DefectDetails.getAllDefectDetailsforSupplierIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_SUPPLIER_ID + "='" + supId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            Dictionary<String, DefectDetails> dfctDict = new Dictionary<String, DefectDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctDict.Add(dr[0].ToString(), temp);
            }
            cn.disconnect();
            return dfctDict;

        }
        /// <summary>
        /// For a given supplier ent id and user id this method returns all the defect objects which are not resolved
        /// </summary>
        /// <param name="supId"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        public static Dictionary<String, DefectDetails> getAllOpenDefectDetailsforSupplierIdAndAssignedToUserDB(String supId, String userId)
        {

            if (supId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty supplier Id sent to DefectDetails.getAllOpenDefectDetailsforSupplierIdAndAssignedToUserDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_SUPPLIER_ID + "='" + supId.Trim() + "'" + " and " +
                DefectDetails.DEFECT_COL_ASSGND_TO + "='" + userId.Trim() + "'" + " and " +
                DefectDetails.DEFECT_COL_RESOL_STAT + "<>'" + DefectResolStatCodes.DEFECT_RESOL_STAT_CODE_RESOLVED + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            Dictionary<String, DefectDetails> dfctDict = new Dictionary<String, DefectDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctDict.Add(dr[0].ToString(), temp);
            }
            cn.disconnect();
            return dfctDict;

        }
        public static Dictionary<String, DefectDetails> getAllOpenSRDetailsforSupplierIdAndAssignedToUserDB(String supId, String userId)
        {

            if (supId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty supplier Id sent to DefectDetails.getAllOpenDefectDetailsforSupplierIdAndAssignedToUserDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_SUPPLIER_ID + "='" + supId.Trim() + "'" + " and " +
                DefectDetails.DEFECT_COL_ASSGND_TO + "='" + userId.Trim() + "'" + " and " +
                DefectDetails.DEFECT_COL_RESOL_STAT + "<>'" + DefectResolStatCodes.DEFECT_RESOL_STAT_CODE_RESOLVED + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            Dictionary<String, DefectDetails> dfctDict = new Dictionary<String, DefectDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctDict.Add(dr[0].ToString(), temp);
            }
            cn.disconnect();
            return dfctDict;

        }
        public static ArrayList getAllDefectDetailsforSupplierIdDBORDERBYCreateDate(String supId)
        {

            if (supId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty supplier Id sent to DefectDetails.getAllDefectDetailsforSupplierIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_SUPPLIER_ID + "='" + supId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'" + " order by " + DefectDetails.DEFECT_COL_DATE_CREATED + " ASC ";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            ArrayList dfctList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctList.Add(temp);
            }
            cn.disconnect();
            return dfctList;

        }
        public static ArrayList getAllSRDetailsforSupplierIdDBORDERBYCreateDate(String supId)
        {

            if (supId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty supplier Id sent to DefectDetails.getAllDefectDetailsforSupplierIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_SUPPLIER_ID + "='" + supId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'" + " order by " + DefectDetails.DEFECT_COL_DATE_CREATED + " ASC ";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            ArrayList dfctList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctList.Add(temp);
            }
            cn.disconnect();
            return dfctList;

        }
        public static ArrayList getAllDefectDetailsforSupplierIdDBORDERBYCloseDate(String supId)
        {

            if (supId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty supplier Id sent to DefectDetails.getAllDefectDetailsforSupplierIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_SUPPLIER_ID + "='" + supId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'" + " order by " + DefectDetails.DEFECT_COL_CLOSE_DATE + " ASC ";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            ArrayList dfctList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctList.Add(temp);
            }
            cn.disconnect();
            return dfctList;

        }
        public static ArrayList getAllSRDetailsforSupplierIdDBORDERBYCloseDate(String supId)
        {

            if (supId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty supplier Id sent to DefectDetails.getAllDefectDetailsforSupplierIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_SUPPLIER_ID + "='" + supId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'" + " order by " + DefectDetails.DEFECT_COL_CLOSE_DATE + " ASC ";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            ArrayList dfctList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctList.Add(temp);
            }
            cn.disconnect();
            return dfctList;

        }
        /// <summary>
        /// for a given supplier id and defect id returns the respective defect object from the database
        /// </summary>
        /// <param name="supId"></param>
        /// <param name="dfctId"></param>
        /// <returns></returns>
        public static DefectDetails getDefectDetailsforSupplierIdandDefectIdDB(String supId, String dfctId)
        {
            if (dfctId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty defect Id sent to DefectDetails.getDefectDetailsforSupplierIdandDefectIdDB"));

            if (supId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Supplier Id sent to DefectDetails.getDefectDetailsforSupplierIdandDefectIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                 " where " + DefectDetails.DEFECT_COL_DEFECT_ID + "='" + dfctId.Trim() + "'" +
                " and " + DefectDetails.DEFECT_COL_SUPPLIER_ID + "='" + supId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            DefectDetails temp = new DefectDetails();

            foreach (DataRow dr in dt.Rows)
            {
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByComp(dr[13].ToString());
                temp.setCreatedByUser(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());
            }
            cn.disconnect();
            return temp;

        }
        public static DefectDetails getSRDetailsforSupplierIdandSRIdDB(String supId, String dfctId)
        {
            if (dfctId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty defect Id sent to DefectDetails.getDefectDetailsforSupplierIdandDefectIdDB"));

            if (supId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Supplier Id sent to DefectDetails.getDefectDetailsforSupplierIdandDefectIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                 " where " + DefectDetails.DEFECT_COL_DEFECT_ID + "='" + dfctId.Trim() + "'" +
                " and " + DefectDetails.DEFECT_COL_SUPPLIER_ID + "='" + supId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            DefectDetails temp = new DefectDetails();

            foreach (DataRow dr in dt.Rows)
            {
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByComp(dr[13].ToString());
                temp.setCreatedByUser(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());
            }
            cn.disconnect();
            return temp;

        }
        /// <summary>
        /// for a given RFQ id returns all the associated defect objects from the database
        /// the 'key' of the returned dictionary is the defect id and the 'value' is respective defect details object
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static Dictionary<String, DefectDetails> getAllDefectDetailsforRFQIdDB(String rfId)
        {

            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to DefectDetails.getAllDefectDetailsforRFQIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_RFQ_ID + "='" + rfId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            Dictionary<String, DefectDetails> dfctDict = new Dictionary<String, DefectDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctDict.Add(dr[0].ToString(), temp);
            }
            cn.disconnect();
            return dfctDict;

        }
        public static Dictionary<String, DefectDetails> getAllSRDetailsforRFQIdDB(String rfId)
        {

            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to DefectDetails.getAllDefectDetailsforRFQIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_RFQ_ID + "='" + rfId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            Dictionary<String, DefectDetails> dfctDict = new Dictionary<String, DefectDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByUser(dr[13].ToString());
                temp.setCreatedByComp(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctDict.Add(dr[0].ToString(), temp);
            }
            cn.disconnect();
            return dfctDict;

        }
        /// <summary>
        /// for a given invoice id returns all the associated defect objects from the database
        /// the 'key' of the returned dictionary is the defect id and the 'value' is respective defect details object
        /// </summary>
        /// <param name="invId"></param>
        /// <returns></returns>
        public static Dictionary<String, DefectDetails> getAllDefectDetailsforInvoiceIdDB(String invId)
        {
            if (invId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty invoice Id sent to DefectDetails.getAllDefectDetailsforInvoiceIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_INVOICE_ID + "='" + invId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "defect" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            Dictionary<String, DefectDetails> dfctDict = new Dictionary<String, DefectDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByComp(dr[13].ToString());
                temp.setCreatedByUser(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctDict.Add(dr[0].ToString(), temp);
            }
            cn.disconnect();
            return dfctDict;


        }
        public static Dictionary<String, DefectDetails> getAllSRDetailsforInvoiceIdDB(String invId)
        {
            if (invId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty invoice Id sent to DefectDetails.getAllDefectDetailsforInvoiceIdDB"));

            Connections cn = new Connections();
            String query = "select " + DefectDetails.DEFECT_COL_DEFECT_ID +
                "," + DefectDetails.DEFECT_COL_ASSGND_TO +
                "," + DefectDetails.DEFECT_COL_CUSTOMER_ID +
                "," + DefectDetails.DEFECT_COL_DATE_CREATED +
                "," + DefectDetails.DEFECT_COL_DEFECT_STAT +
                "," + DefectDetails.DEFECT_COL_INVOICE_ID +
                "," + DefectDetails.DEFECT_COL_RESOL_STAT +
                "," + DefectDetails.DEFECT_COL_RFQ_ID +
                "," + DefectDetails.DEFECT_COL_STAT_REASON +
                "," + DefectDetails.DEFECT_COL_SUPPLIER_ID +
                "," + DefectDetails.DEFECT_COL_DESCR +
                "," + DefectDetails.DEFECT_COL_SEVERITY +
                "," + DefectDetails.DEFECT_COL_CREATION_MODE +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_CMP +
                "," + DefectDetails.DEFECT_COL_CREATED_BY_USR +
                "," + DefectDetails.DEFECT_COL_TOTAL_AMNT +
                "," + DefectDetails.DEFECT_COL_DOC_PATH + "," + DefectDetails.DEFECT_COL_CLOSE_DATE +
                  "," + DefectDetails.DEFECT_COL_CURRENCY + "," + DefectDetails.DEFECT_COL_DEFECTORSR +
                " from " + DefectDetails.DEFECT_TABLE +
                " where " + DefectDetails.DEFECT_COL_INVOICE_ID + "='" + invId.Trim() + "'" + " and " + DefectDetails.DEFECT_COL_DEFECTORSR + "=" + "'" + "sr" + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            Dictionary<String, DefectDetails> dfctDict = new Dictionary<String, DefectDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                DefectDetails temp = new DefectDetails();
                temp.setDefectId(dr[0].ToString());
                temp.setAssignedToUser(dr[1].ToString());
                temp.setCustomerId(dr[2].ToString());
                temp.setDateCreated(dr[3].ToString());
                temp.setDefectStat(dr[4].ToString());
                temp.setInvoiceId(dr[5].ToString());
                temp.setResolStat(dr[6].ToString());
                temp.setRFQId(dr[7].ToString());
                temp.setStatReason(dr[8].ToString());
                temp.setSupplierId(dr[9].ToString());
                temp.setDescription(dr[10].ToString());
                temp.setSeverity(dr[11].ToString());
                temp.setCreationMode(dr[12].ToString());
                temp.setCreatedByComp(dr[13].ToString());
                temp.setCreatedByUser(dr[14].ToString());
                temp.setTotalAmount(float.Parse(dr[15].ToString()));
                temp.setDocPath(dr[16].ToString()); temp.setCloseDate(dr[17].ToString());
                temp.setCurrency(dr[18].ToString());
                temp.setDefectorsr(dr[19].ToString());

                dfctDict.Add(dr[0].ToString(), temp);
            }
            cn.disconnect();
            return dfctDict;


        }
        /// <summary>
        /// inserts the passed defect object into the database
        /// </summary>
        /// <param name="dfct"></param>
        /// <returns></returns>
        public static int insertDefectDetails(DefectDetails dfct)
        {
            if (dfct.getDefectId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty defect id value sent to DefectDetails.insertDefectDetails"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + DefectDetails.DEFECT_TABLE
                + " ("
                + DefectDetails.DEFECT_COL_ASSGND_TO + ","
                + DefectDetails.DEFECT_COL_CUSTOMER_ID + ","
                + DefectDetails.DEFECT_COL_DATE_CREATED + ","
                + DefectDetails.DEFECT_COL_DEFECT_ID + ","
                + DefectDetails.DEFECT_COL_DEFECT_STAT + ","
                + DefectDetails.DEFECT_COL_INVOICE_ID + ","
                + DefectDetails.DEFECT_COL_RESOL_STAT + ","
                + DefectDetails.DEFECT_COL_RFQ_ID + ","
                + DefectDetails.DEFECT_COL_STAT_REASON + ","
                + DefectDetails.DEFECT_COL_DESCR + ","
                + DefectDetails.DEFECT_COL_SEVERITY + ","
                + DefectDetails.DEFECT_COL_CREATION_MODE + ","
                + DefectDetails.DEFECT_COL_CREATED_BY_USR + ","
                + DefectDetails.DEFECT_COL_CREATED_BY_CMP + ","
                + DefectDetails.DEFECT_COL_TOTAL_AMNT + ","
                + DefectDetails.DEFECT_COL_DOC_PATH + ","
                + DefectDetails.DEFECT_COL_CLOSE_DATE + ","
                + DefectDetails.DEFECT_COL_CURRENCY + ","
                                + DefectDetails.DEFECT_COL_DEFECTORSR + ","
                + DefectDetails.DEFECT_COL_SUPPLIER_ID + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " '" + dfct.getAssignedToUser() + "'," + "'" +
            dfct.getCustomerId() + "'," + "'" +
            dfct.getDateCreated() + "'," + "'" +
            dfct.getDefectId() + "'," + "'" +
            dfct.getDefectStat() + "'," + "'" +
            dfct.getInvoiceId() + "'," + "'" +
            dfct.getResolStat() + "'," + "'" +
            dfct.getRFQId() + "'," + "'" +
            dfct.getStatReason() + "'," + "'" +
            dfct.getDescription() + "'," + "'" +
            dfct.getSeverity() + "'," + "'" +
            dfct.getCreationMode() + "'," + "'" +
            dfct.getCreatedByUser() + "'," + "'" +
            dfct.getCreatedByComp() + "'," +
            dfct.getTotalAmount() + "," + "'" +
            dfct.getDocPath() + "'," + (dfct.getCloseDate() == null || dfct.getCloseDate().Equals("") ? "null" : "'" + dfct.getCloseDate() + "'") + ",'" +
            dfct.getCurrency() + "'," + "'" +
             dfct.getDefectorsr() + "'," + "'" +
            dfct.getSupplierId() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            FileUpload fileControl = dfct.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(dfct.getDocPath());


            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the defect database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the defect id 
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any other tables
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateDefectDetails(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* update or delete values in the defect database table
             * the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the defect id 
             * the third parameter contains the type of operation
             * a delete operation will  have no  cascading effect on any other tables
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(DefectDetails.DEFECT_COL_DEFECT_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - DefectDetails.updateDefectDetails"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to DefectDetails.updateDefectDetails is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to DefectDetails.updateDefectDetails is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + DefectDetails.DEFECT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + DefectDetails.DEFECT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(DefectDetails.DEFECT_COL_SUPPLIER_ID, DefectDetails.DEFECT_COL_SUPPLIER_ID_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_STAT_REASON, DefectDetails.DEFECT_COL_STAT_REASON_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_RFQ_ID, DefectDetails.DEFECT_COL_RFQ_ID_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_RESOL_STAT, DefectDetails.DEFECT_COL_RESOL_STAT_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_INVOICE_ID, DefectDetails.DEFECT_COL_INVOICE_ID_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_DEFECT_STAT, DefectDetails.DEFECT_COL_DEFECT_STAT_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_DEFECT_ID, DefectDetails.DEFECT_COL_DEFECT_ID_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_DATE_CREATED, DefectDetails.DEFECT_COL_DATE_CREATED_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_CUSTOMER_ID, DefectDetails.DEFECT_COL_CUSTOMER_ID_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_ASSGND_TO, DefectDetails.DEFECT_COL_ASSGND_TO_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_DESCR, DefectDetails.DEFECT_COL_DESCR_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_SEVERITY, DefectDetails.DEFECT_COL_SEVERITY_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_CREATION_MODE, DefectDetails.DEFECT_COL_CREATION_MODE_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_CREATED_BY_CMP, DefectDetails.DEFECT_COL_CREATED_BY_CMP_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_CREATED_BY_USR, DefectDetails.DEFECT_COL_CREATED_BY_USR_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_TOTAL_AMNT, DefectDetails.DEFECT_COL_TOTAL_AMNT_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_DOC_PATH, DefectDetails.DEFECT_COL_DOC_PATH_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_CLOSE_DATE, DefectDetails.DEFECT_COL_CLOSE_DATE_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_CURRENCY, DefectDetails.DEFECT_COL_CURRENCY_TYPE);
            chkDataType.Add(DefectDetails.DEFECT_COL_DEFECTORSR, DefectDetails.DEFECT_COL_DEFECTORSR_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DefectDetails.updateDefectDetails" + kvp.Key));
                    else
                        quote = (outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE)) && kvp.Value != null ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DefectDetails.updateDefectDetails" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }
        /// <summary>
        /// This method was introduced to handle scenario when it is required to update the  document .
        /// If a new file needs to be uploaded/inserted that must be attached to the passed object as a FileUpload
        /// This method will remove the image at the existing server path; If no image alreadt exists it will create the path and put the image/document in server path
        /// </summary>
        /// <returns></returns>
        public static int updateorInsertDefectDocDB(DefectDetails defObj)
        {
            int rowsAffected = 0;
            String pathToUpload = defObj.getDocPath();

            if (pathToUpload != null && !pathToUpload.Equals(""))
            {
                if (File.Exists(pathToUpload))
                    File.Delete(pathToUpload);
            }
            defObj.setDocPathInFileStore(defObj.getSupplierId());
            pathToUpload = defObj.getDocPath();

            String cmd = "update " + DefectDetails.DEFECT_TABLE + " set " + DefectDetails.DEFECT_COL_DOC_PATH + "=" +
                "'" + pathToUpload + "'" + " where " +
                DefectDetails.DEFECT_COL_DEFECT_ID + "=" + "'" + defObj.getDefectId() + "'";

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();
            FileUpload fileControl = defObj.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(pathToUpload);

            return rowsAffected;
        }
        public String getDefectorsr()
        {
            return defectorsr;
        }
        public void setDefectorsr(String defectorsr)
        {
            this.defectorsr = defectorsr;
        }
    }
    /// <summary>
    /// Tis cass is representative of the backend object 'Defects_SLA'
    /// </summary>
    public class DefectSLA
    {
        private String entId;
        private String Severity;
        private String SLA;
        private String Alert_Before;
        private String Context_Type;


        private static String sessionUser = "";

        public const String DEFECT_TYPE_DEFECT = "defect";
        public const String DEFECT_TYPE_SERVICE_REQUEST = "sr";

        public const String DEFECT_SLA_TABLE = "Defects_SLA";

        public const String DEFECT_SLA_COL_ENT_ID = "Cmp_Usr_Shop_id";
        public const String DEFECT_SLA_COL_SEV = "Severity";
        public const String DEFECT_SLA_COL_SLA = "SLA";
        public const String DEFECT_SLA_COL_ALERT_BEFORE = "Alert_Before";
        public const String DEFECT_SLA_COL_CONTXT_TYPE = "Context_Type";


        public const String DEFECT_SLA_COL_ENT_ID_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_SLA_COL_SEV_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_SLA_COL_SLA_TYPE = Connections.STRING_TYPE;
        public const String DEFECT_SLA_COL_ALERT_BEFORE_TYPE = Connections.DATE_TIME_TYPE;
        public const String DEFECT_SLA_COL_CONTXT_TYPE_TYPE = Connections.DATE_TIME_TYPE;

        public String getEntId()
        {
            return entId;
        }
        public void setEntId(String entId)
        {
            this.entId = entId;
        }
        public String getSeverity()
        {
            return Severity;
        }
        public void setSeverity(String severity)
        {
            Severity = severity;
        }
        public String getSLA()
        {
            return SLA;
        }
        public void setSLA(String sLA)
        {
            SLA = sLA;
        }
        public String getAlert_Before()
        {
            return Alert_Before;
        }
        public void setAlert_Before(String alert_Before)
        {
            Alert_Before = alert_Before;
        }
        public String getContext_Type()
        {
            return Context_Type;
        }
        public void setContext_Type(String context_Type)
        {
            Context_Type = context_Type;
        }

        /// <summary>
        /// The first parameter is the entity id.
        /// The second parameter denotes whether its a defect or service request.
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public static ArrayList getDefectSLADetailsbyentIdDB(String entId, String type)
        {

            Connections cn = new Connections();
            String query = "select " + DefectSLA.DEFECT_SLA_COL_ENT_ID +
                "," + DefectSLA.DEFECT_SLA_COL_SEV +
                "," + DefectSLA.DEFECT_SLA_COL_SLA +
                "," + DefectSLA.DEFECT_SLA_COL_ALERT_BEFORE +
                "," + DefectSLA.DEFECT_SLA_COL_CONTXT_TYPE +
                " from " + DefectSLA.DEFECT_SLA_TABLE +
                " where " + DefectSLA.DEFECT_SLA_COL_ENT_ID + "='" + entId.Trim() + "'" +
                " and " + DefectSLA.DEFECT_SLA_COL_CONTXT_TYPE + "='" + type.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList slaList = new ArrayList();
            

            foreach (DataRow dr in dt.Rows)
            {
                DefectSLA temp = new DefectSLA();
                temp.setEntId(dr[0].ToString());
                temp.setSeverity(dr[1].ToString());
                temp.setSLA(dr[2].ToString());
                temp.setAlert_Before(dr[3].ToString());
                temp.setContext_Type(dr[4].ToString());
                slaList.Add(temp);
            }
            cn.disconnect();
            return slaList;
        }

        public static int insertDefectSLADetails(DefectSLA dfctSLA)
        {


            int rowsAffected = 0;
            String insertCmd = "insert into " + DefectSLA.DEFECT_SLA_TABLE
                + " ("
                + DefectSLA.DEFECT_SLA_COL_SLA + ","
                + DefectSLA.DEFECT_SLA_COL_SEV + ","
                + DefectSLA.DEFECT_SLA_COL_ENT_ID + ","
                + DefectSLA.DEFECT_SLA_COL_ALERT_BEFORE + ","
                + DefectSLA.DEFECT_SLA_COL_CONTXT_TYPE + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " '" + dfctSLA.getSLA() + "'," + "'" +
            dfctSLA.getSeverity() + "'," + "'" +
            dfctSLA.getEntId() + "'," + "'" +
            dfctSLA.getAlert_Before() + "'," + "'" +
            dfctSLA.getContext_Type() + "'";
            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();


            return rowsAffected;

        }

        public static int updateDefectDetails(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {

            String whereClauseCheck = "";

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + DefectSLA.DEFECT_SLA_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + DefectSLA.DEFECT_SLA_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(DefectSLA.DEFECT_SLA_COL_ALERT_BEFORE, DefectSLA.DEFECT_SLA_COL_ALERT_BEFORE_TYPE);
            chkDataType.Add(DefectSLA.DEFECT_SLA_COL_CONTXT_TYPE, DefectSLA.DEFECT_SLA_COL_CONTXT_TYPE_TYPE);
            chkDataType.Add(DefectSLA.DEFECT_SLA_COL_ENT_ID, DefectSLA.DEFECT_SLA_COL_ENT_ID_TYPE);
            chkDataType.Add(DefectSLA.DEFECT_SLA_COL_SLA, DefectSLA.DEFECT_SLA_COL_SLA_TYPE);
            chkDataType.Add(DefectSLA.DEFECT_SLA_COL_SEV, DefectSLA.DEFECT_SLA_COL_SEV_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DefectSLA.updateDefectDetails" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DefectSLA.updateDefectDetails" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }
    }
    /// <summary>
    /// this class is representative of the database object 'RFQ_Product_Service_Qnty'
    /// </summary>
    public class RFQProdServQnty
    {
        private String rfqId;
        private String prodCatId;
        private float fromQnty;
        private float toQnty;
        private String fromPrice;
        private String toPrice;
        private String mrsmntUnit;

        public String getRFQId()
        {
            return this.rfqId;
        }
        public void setRFQId(String rfId)
        {
            this.rfqId = rfId;
        }
        public String getProdCatId()
        {
            return this.prodCatId;
        }
        public void setProdCatId(String pcId)
        {
            this.prodCatId = pcId;
        }
        public float getFromQnty()
        {
            return this.fromQnty;
        }
        public void setFromQnty(float FQ)
        {
            this.fromQnty = FQ;
        }
        public float getToQnty()
        {
            return this.toQnty;
        }
        public void setToQnty(float TQ)
        {
            this.toQnty = TQ;
        }
        public String getFromPrice()
        {
            return this.fromPrice;
        }
        public void setFromPrice(String fp)
        {
            this.fromPrice = fp;
        }
        public String getToPrice()
        {
            return this.toPrice;
        }
        public void setToPrice(String tp)
        {
            this.toPrice = tp;
        }
        public String getMsrmntUnit()
        {
            return this.mrsmntUnit;
        }
        public void setMsrmntUnit(String mUnit)
        {
            this.mrsmntUnit = mUnit;
        }

        private static String sessionUser = "";

        public const String RFQ_PROD_SRV_QNTY_TABLE = "RFQ_Product_Service_Qnty";

        public const String RFQ_PROD_SRV_COL_RFQ_ID = "RFQ_id";
        public const String RFQ_PROD_SRV_COL_PROD_SRV_ID = "Product_Service_Category";
        public const String RFQ_PROD_SRV_COL_FROM_QNTY = "From_Quantity";
        public const String RFQ_PROD_SRV_COL_TO_QNTY = "To_Quantity";
        public const String RFQ_PROD_SRV_COL_FROM_PRICE = "From_Price";
        public const String RFQ_PROD_SRV_COL_TO_PRICE = "To_Price";
        public const String RFQ_PROD_SRV_COL_MSRMNT_UNIT = "msrmnt_unit";


        public const String RFQ_PROD_SRV_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_SRV_COL_PROD_SRV_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_SRV_COL_FROM_QNTY_TYPE = Connections.NUMBER_TYPE;
        public const String RFQ_PROD_SRV_COL_TO_QNTY_TYPE = Connections.NUMBER_TYPE;
        public const String RFQ_PROD_SRV_COL_FROM_PRICE_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_SRV_COL_TO_PRICE_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_SRV_COL_MSRMNT_UNIT_TYPE = Connections.STRING_TYPE;
        
        /// <summary>
        /// This method inserts the passed 'RFQProdServQnty' object into database.
        /// The passed object must have the rfq id and prod category id attached to it.
        /// </summary>
        /// <param name="rfPrdSrvQntyObj"></param>
        /// <returns></returns>
        public static int insertRFQProductServiceQuantityDetailsDB(RFQProdServQnty rfPrdSrvQntyObj)
        {
            if(rfPrdSrvQntyObj.getRFQId()==null||rfPrdSrvQntyObj.getRFQId().Equals("")||rfPrdSrvQntyObj.getProdCatId()==null||rfPrdSrvQntyObj.getProdCatId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Primary Key missing field value sent to RFQProdServQnty.insertRFQProductServiceQuantityDetails"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + RFQProdServQnty.RFQ_PROD_SRV_QNTY_TABLE
                + " ("
                + RFQProdServQnty.RFQ_PROD_SRV_COL_RFQ_ID + ","
                + RFQProdServQnty.RFQ_PROD_SRV_COL_FROM_PRICE + ","
                + RFQProdServQnty.RFQ_PROD_SRV_COL_FROM_QNTY + ","
                //+ RFQProductServiceDetails.RFQ_PROD_COL_ENTITY_ID + ","
                + RFQProdServQnty.RFQ_PROD_SRV_COL_MSRMNT_UNIT + ","
                + RFQProdServQnty.RFQ_PROD_SRV_COL_PROD_SRV_ID + ","
                + RFQProdServQnty.RFQ_PROD_SRV_COL_TO_PRICE + ","
                + RFQProdServQnty.RFQ_PROD_SRV_COL_TO_QNTY + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " '" + rfPrdSrvQntyObj.getRFQId() + "'," + "'" +
            rfPrdSrvQntyObj.getFromPrice() + "'," + 
            rfPrdSrvQntyObj.getFromQnty() + "," + "'" +
                //rfPrdDet.getEntityId() + "'," + "'" +
            rfPrdSrvQntyObj.getMsrmntUnit() + "'," + "'" +
            rfPrdSrvQntyObj.getProdCatId() + "'," + "'" +
            rfPrdSrvQntyObj.getToPrice() + "'," +
            rfPrdSrvQntyObj.getToQnty() ;

            insertCmd += ")";

            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            cn.disconnect();


            return rowsAffected;

        }
        /// <summary>
        /// For a given RFQ id this method returns an arraylist of 'RFQProdServQnty' objects.
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static ArrayList getRFQProductServiceQuantityforRFIdDB(String rfId)
        {
            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQProdServQnty.getRFQProductServiceQuantityforRFIdDB"));

            Connections cn = new Connections();
            String query = "select " + RFQProdServQnty.RFQ_PROD_SRV_COL_RFQ_ID +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_FROM_PRICE +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_FROM_QNTY +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_MSRMNT_UNIT +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_PROD_SRV_ID +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_TO_PRICE +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_TO_QNTY +
                " from " + RFQProdServQnty.RFQ_PROD_SRV_QNTY_TABLE +
                " where " + RFQProdServQnty.RFQ_PROD_SRV_COL_RFQ_ID + "='" + rfId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList qntyList = new ArrayList();
                        
            foreach (DataRow dr in dt.Rows)
            {
                RFQProdServQnty temp = new RFQProdServQnty();

                temp.setRFQId(dr[0].ToString());
                temp.setFromPrice(dr[1].ToString());
                temp.setFromQnty(float.Parse(dr[2].ToString()));
                temp.setMsrmntUnit(dr[3].ToString());
                temp.setProdCatId(dr[4].ToString());
                temp.setToPrice(dr[5].ToString());
                temp.setToQnty(float.Parse(dr[6].ToString()));

                qntyList.Add(temp);
            }
            cn.disconnect();
            return qntyList;
        }
        /// <summary>
        /// For a given RFQ id and Product category id this method returns a 'RFQProdServQnty' object.
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static RFQProdServQnty getRFQProductServiceQuantityforRFIdandCatIdDB(String rfId, String catId)
        {
            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQProdServQnty.getRFQProductServiceQuantityforRFIdDB"));

            Connections cn = new Connections();
            String query = "select " + RFQProdServQnty.RFQ_PROD_SRV_COL_RFQ_ID +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_FROM_PRICE +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_FROM_QNTY +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_MSRMNT_UNIT +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_PROD_SRV_ID +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_TO_PRICE +
                "," + RFQProdServQnty.RFQ_PROD_SRV_COL_TO_QNTY +
                " from " + RFQProdServQnty.RFQ_PROD_SRV_QNTY_TABLE +
                " where " + RFQProdServQnty.RFQ_PROD_SRV_COL_RFQ_ID + "='" + rfId.Trim() + "'" +
                " and " + RFQProdServQnty.RFQ_PROD_SRV_COL_PROD_SRV_ID + "='" + catId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
                      

            RFQProdServQnty temp = new RFQProdServQnty();

            foreach (DataRow dr in dt.Rows)
            {               

                temp.setRFQId(dr[0].ToString());
                temp.setFromPrice(dr[1].ToString());
                temp.setFromQnty(float.Parse(dr[2].ToString()));
                temp.setMsrmntUnit(dr[3].ToString());
                temp.setProdCatId(dr[4].ToString());
                temp.setToPrice(dr[5].ToString());
                temp.setToQnty(float.Parse(dr[6].ToString()));
                
            }
            cn.disconnect();
            return temp;
        }
        /// <summary>
        /// update or delete values in the RFQProdServQnty  database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the RFQ id
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any other tables
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateRFQProductServiceQuantityDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(RFQProdServQnty.RFQ_PROD_SRV_COL_RFQ_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - RFQProdServQnty.updateRFQProductServiceQuantityDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to RFQProdServQnty.updateRFQProductServiceQuantityDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to RFQProdServQnty.updateRFQProductServiceQuantityDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + RFQProdServQnty.RFQ_PROD_SRV_QNTY_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + RFQProdServQnty.RFQ_PROD_SRV_QNTY_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(RFQProdServQnty.RFQ_PROD_SRV_COL_RFQ_ID, RFQProdServQnty.RFQ_PROD_SRV_COL_RFQ_ID_TYPE);
            chkDataType.Add(RFQProdServQnty.RFQ_PROD_SRV_COL_FROM_PRICE, RFQProdServQnty.RFQ_PROD_SRV_COL_FROM_PRICE_TYPE);
            chkDataType.Add(RFQProdServQnty.RFQ_PROD_SRV_COL_FROM_QNTY, RFQProdServQnty.RFQ_PROD_SRV_COL_FROM_QNTY_TYPE);
            chkDataType.Add(RFQProdServQnty.RFQ_PROD_SRV_COL_MSRMNT_UNIT, RFQProdServQnty.RFQ_PROD_SRV_COL_MSRMNT_UNIT_TYPE);
            chkDataType.Add(RFQProdServQnty.RFQ_PROD_SRV_COL_PROD_SRV_ID, RFQProdServQnty.RFQ_PROD_SRV_COL_PROD_SRV_ID_TYPE);
            chkDataType.Add(RFQProdServQnty.RFQ_PROD_SRV_COL_TO_PRICE, RFQProdServQnty.RFQ_PROD_SRV_COL_TO_PRICE_TYPE);
            chkDataType.Add(RFQProdServQnty.RFQ_PROD_SRV_COL_TO_QNTY, RFQProdServQnty.RFQ_PROD_SRV_COL_TO_QNTY);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQProdServQnty.updateRFQProductServiceQuantityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQProdServQnty.updateRFQProductServiceQuantityDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }

            if (operation.Equals(Connections.OPERATION_DELETE))
                cmd += " ";

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }
    }
    /// <summary>
    /// this class is representative of the database object 'RFQ_Product_Service_Map'
    /// All associated product/service details for a RFQ is represented through this class
    /// </summary>
    public class RFQProductServiceDetails
    {
        private String RFQId;
        private String PrdCatId;
        private float  quantity;
        private String msrmntUnit;
        private String featId;
        private String fromSpecId;
        private String toSpecId;
        private String specText;
        private String createdUsr;
        //private String entityId;
        private String createdDate;
        //private byte[] pic;
        private String imgPath;
        private FileUpload fileStream;

        private static String sessionUser = "";

        public const String RFQ_PROD_TABLE = "RFQ_Product_Service_Map";

        public const String RFQ_PROD_COL_RFQ_ID = "RFQ_id";
        public const String RFQ_PROD_COL_PROD_ID = "Product_Service_Category";
        public const String RFQ_PROD_COL_QUANTITY = "Quantity";
        public const String RFQ_PROD_COL_MSRMNT_UNIT = "msrmnt_unit";
        public const String RFQ_PROD_COL_FEAT_ID = "Feature_id";
        public const String RFQ_PROD_COL_FROM_SPEC_ID = "From_Spec_id";
        public const String RFQ_PROD_COL_TO_SPEC_ID = "To_Spec_id";
        public const String RFQ_PROD_COL_SPEC_TEXT = "Specification_Text";
        public const String RFQ_PROD_COL_CREATED_USR = "Created_By";
        //public const String RFQ_PROD_COL_ENTITY_ID = "Cmp_Usr_Shop_id";
        public const String RFQ_PROD_COL_CREATED_DATE = "Date_Created";
        public const String RFQ_PROD_COL_IMAGE_PATH = "Pic_Path";

        public const String RFQ_PROD_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_COL_PROD_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_COL_QUANTITY_TYPE = Connections.NUMBER_TYPE;
        public const String RFQ_PROD_COL_MSRMNT_UNIT_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_COL_FEAT_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_COL_FROM_SPEC_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_COL_TO_SPEC_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_COL_SPEC_TEXT_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_COL_CREATED_USR_TYPE = Connections.STRING_TYPE;
        //public const String RFQ_PROD_COL_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_PROD_COL_CREATED_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String RFQ_PROD_COL_IMAGE_PATH_TYPE = Connections.BLOB_TYPE;



        public String getRFQId()
        {
            return RFQId;
        }
        public void setRFQId(String rId)
        {
            RFQId = rId;
        }
        public String getPrdCatId()
        {
            return PrdCatId;
        }
        public void setPrdCatId(String catId)
        {
            PrdCatId = catId;
        }
        /// <summary>
        /// The quantity property is not used on this object because RFQ Prod service qnty class provides to and from qunty
        /// </summary>
        /// <returns></returns>
        public float  getQuantity()
        {
            return quantity;
        }
        /// <summary>
        /// The quantity property is not used on this object because RFQ Prod service qnty class provides to and from qunty
        /// </summary>
        /// <param name="qunty"></param>
        public void setQuantity(float qunty)
        {
            quantity = qunty;
        }
        public String getMsrmntUnit()
        {
            return msrmntUnit;
        }
        public void setMsrmntUnit(String mUnit)
        {
            msrmntUnit = mUnit;
        }
        public String getFeatId()
        {
            return featId;
        }
        public void setFeatId(String fId)
        {
            featId = fId;
        }
        public String getFromSpecId()
        {
            return fromSpecId;
        }
        public void setFromSpecId(String fSpecId)
        {
            fromSpecId = fSpecId;
        }
        public String getToSpecId()
        {
            return toSpecId;
        }
        public void setToSpecId(String tSpecId)
        {
            toSpecId = tSpecId;
        }
        public String getSpecText()
        {
            return specText;
        }
        public void setSpecText(String sText)
        {
            specText = sText;
        }
        public String getCreatedUsr()
        {
            return createdUsr;
        }
        public void setCreatedUsr(String cUsr)
        {
            createdUsr = cUsr;
        }
        /*public String getEntityId()
        {
            return entityId;
        }*/
        /*public void setEntityId(String eId)
        {
            entityId = eId;
        }*/
        public String getCreatedDate()
        {
            return createdDate;
        }
        public void setCreatedDate(String crDate)
        {
            createdDate = crDate;
        }
        //public byte[] getPic()
        //{
            //return pic;
        //}
        //public void setPic(byte[] img)
        //{
            //pic = img;
        //}
        public FileUpload getFileStream()
        {
            return this.fileStream;
        }
        public void setFileStream(FileUpload fU)
        {
            this.fileStream = fU;
        }
        public String getImgPath()
        {
            return this.imgPath;
        }
        public void setImgPath(String imgPath)
        {
            this.imgPath = imgPath;
        }
        /// <summary>
        /// This method needs to be passed the main business entity id. This method will create a folder structure using that entity id and this objects
        /// requirement id.
        /// RFQ id must be set to this object before this method is called.
        /// Also, this method will generate a image id for the image and prepond the image name (as stored with the filestream property) with the id
        /// </summary>
        /// <param name="entId"></param>
        public void setImgPathInFileStore(String entId)
        {
            if (entId == null || entId.Equals("") || this.getRFQId() == null || this.getRFQId().Equals(""))
                throw new CustomExceptions.businessRuleViolationException("RFQ id and/or entity id not set");
            else
                imgPath = this.generateImagePath(entId + "\\" + this.getRFQId()) + "\\" + new Id().getNewId(Id.ID_TYPE_IMAGE_ID_STRING) + "_" + this.getFileStream().FileName;

        }
        /// <summary>
        /// Provided a folder path (can have multi-level path also separated by "\\" this method will create the entire
        /// folder structure.
        /// </summary>
        /// <param name="folderName"></param>
        /// <returns></returns>
        public String generateImagePath(String folderName)
        {
            String fileStoreRoot = App.Default.FileStoreRoot;
            String[] delimList = { "\\" };
            String[] subFolders = folderName.Split(delimList, StringSplitOptions.RemoveEmptyEntries);

            String returnPath = "";
            try
            {
                for (int i = 0; i < subFolders.Length; i++)
                    if (!Directory.Exists(fileStoreRoot + "\\" + subFolders[i]))
                    {
                        Directory.CreateDirectory(fileStoreRoot + "\\" + subFolders[i]);
                        fileStoreRoot += "\\" + subFolders[i];
                    }
                    else
                        fileStoreRoot += "\\" + subFolders[i];

                returnPath = fileStoreRoot;
            }
            catch (Exception ex)
            {
                returnPath = "";

            }
            return returnPath;
        }

        /// <summary>
        /// for a given RFQ Id returns all objects from the database
        /// Each element of the arraylist is  'RFQProductServiceDetails' object
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllProductServiceDetailsbyRFQIdDB(String rfId)
        {

            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQProductServiceDetails.getAllProductServiceDetailsbyRFQIdDB"));

            Connections cn = new Connections();
            String query = "select " + RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_CREATED_DATE +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_CREATED_USR +
                //"," + RFQProductServiceDetails.RFQ_PROD_COL_ENTITY_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_FEAT_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_FROM_SPEC_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_IMAGE_PATH +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_MSRMNT_UNIT +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_QUANTITY +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_SPEC_TEXT +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_TO_SPEC_ID +
                " from " + RFQProductServiceDetails.RFQ_PROD_TABLE +
                " where " + RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID + "='" + rfId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            
            //Dictionary<String, RFQProductServiceDetails> rfPrdDict = new Dictionary<string, RFQProductServiceDetails>();

            ArrayList rfqPrdList = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                RFQProductServiceDetails temp = new RFQProductServiceDetails();
                temp.setRFQId(dr[0].ToString());
                temp.setCreatedDate(dr[1].ToString());
                temp.setCreatedUsr(dr[2].ToString());
                //temp.setEntityId(dr[3].ToString());
                temp.setFeatId(dr[3].ToString());
                temp.setFromSpecId(dr[4].ToString());
                temp.setImgPath(dr[5].ToString());
                temp.setMsrmntUnit(dr[6].ToString());
                 temp.setPrdCatId(dr[7].ToString());
                temp.setQuantity(float.Parse(dr[8].ToString()));
                temp.setSpecText(dr[9].ToString());
                temp.setToSpecId(dr[10].ToString());

                rfqPrdList.Add(temp);
            }
            cn.disconnect();
            return rfqPrdList;
        
        }
        /// <summary>
        /// for a given RFQ Id and Product/Service category id returns all objects from the database
        /// the 'key' of the returned dictionary is the 'Feature Id'  - the 'value' is the respective 'RFQProductServiceDetails' object
        /// </summary>
        /// <returns></returns>
        public static Dictionary<String, RFQProductServiceDetails> getAllProductServiceDetailsbyRFQandProductIdDB(String rfId,String prdId)
        {

            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQProductServiceDetails.getAllProductServiceDetailsbyRFQandProductIdDB"));

            if (prdId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty product Id sent to RFQProductServiceDetails.getAllProductServiceDetailsbyRFQandProductIdDB"));

            Connections cn = new Connections();
            String query = "select " +RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_CREATED_DATE +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_CREATED_USR +
                //"," + RFQProductServiceDetails.RFQ_PROD_COL_ENTITY_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_FEAT_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_FROM_SPEC_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_IMAGE_PATH +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_MSRMNT_UNIT +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_QUANTITY +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_SPEC_TEXT +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_TO_SPEC_ID +
                " from " + RFQProductServiceDetails.RFQ_PROD_TABLE +
                " where " + RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID + "='" + rfId.Trim() + "'" +
                " and " + RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID + "='" + prdId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            
            Dictionary<String, RFQProductServiceDetails> rfPrdDict = new Dictionary<string, RFQProductServiceDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                RFQProductServiceDetails temp = new RFQProductServiceDetails();
                temp.setRFQId(dr[0].ToString());
                temp.setCreatedDate(dr[1].ToString());
                temp.setCreatedUsr(dr[2].ToString());
                //temp.setEntityId(dr[3].ToString());
                temp.setFeatId(dr[3].ToString());
                temp.setFromSpecId(dr[4].ToString());
                temp.setImgPath(dr[5].ToString());
                temp.setMsrmntUnit(dr[6].ToString());
                temp.setPrdCatId(dr[7].ToString());
                temp.setQuantity(float.Parse(dr[8].ToString()));
                temp.setSpecText(dr[9].ToString());
                temp.setToSpecId(dr[10].ToString());

                rfPrdDict.Add(temp.getFeatId(), temp);
            }
            cn.disconnect();
            return rfPrdDict;
        
        }
        /// <summary>
        /// for a given RFQ Id, Product/Service category id and Feature id returns the respective 'RFQProductServiceDetails' object from database
        /// </summary>
        /// <returns></returns>
        public static RFQProductServiceDetails getProductServiceDetailsbyRFQandProductandFeatureIdDB(String rfId,String prdId,String featId)
        {

            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQProductServiceDetails.getProductServiceDetailsbyRFQandProductandFeatureIdDB"));

            if (prdId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty product Id sent to RFQProductServiceDetails.getProductServiceDetailsbyRFQandProductandFeatureIdDB"));

            if (featId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty feature Id sent to RFQProductServiceDetails.getProductServiceDetailsbyRFQandProductandFeatureIdDB"));

            Connections cn = new Connections();
            String query = "select " + RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_CREATED_DATE +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_CREATED_USR +
                //"," + RFQProductServiceDetails.RFQ_PROD_COL_ENTITY_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_FEAT_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_FROM_SPEC_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_IMAGE_PATH +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_MSRMNT_UNIT +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_QUANTITY +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_SPEC_TEXT +
                "," + RFQProductServiceDetails.RFQ_PROD_COL_TO_SPEC_ID +
                " from " + RFQProductServiceDetails.RFQ_PROD_TABLE +
                " where " + RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID + "='" + rfId.Trim() + "'" +
                " and " + RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID + "='" + prdId.Trim() + "'" +
                " and " + RFQProductServiceDetails.RFQ_PROD_COL_FEAT_ID + "='" + featId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            RFQProductServiceDetails temp = new RFQProductServiceDetails();
           
            foreach (DataRow dr in dt.Rows)
            {
                temp.setRFQId(dr[0].ToString());
                temp.setCreatedDate(dr[1].ToString());
                temp.setCreatedUsr(dr[2].ToString());
                //temp.setEntityId(dr[3].ToString());
                temp.setFeatId(dr[3].ToString());
                temp.setFromSpecId(dr[4].ToString());
                temp.setImgPath(dr[5].ToString());
                temp.setMsrmntUnit(dr[6].ToString());
                temp.setPrdCatId(dr[7].ToString());
                temp.setQuantity(float.Parse(dr[8].ToString()));
                temp.setSpecText(dr[9].ToString());
                temp.setToSpecId(dr[10].ToString());

                
            }
            cn.disconnect();
            return temp;
    
        }
        /// <summary>
        /// inserts the passed 'RFQProductServiceDetails' into the database 
        /// </summary>
        /// <param name="rfPrdDet"></param>
        /// <returns></returns>
        public static int insertRFQProductServiceDetails(RFQProductServiceDetails rfPrdDet)
        {
            if (rfPrdDet.getRFQId().Equals("") || rfPrdDet.getPrdCatId().Equals("") || rfPrdDet.getFeatId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Primary Key missing field value sent to RFQProductServiceDetails.insertRFQProductServiceDetails"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + RFQProductServiceDetails.RFQ_PROD_TABLE
                + " ("
                + RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_CREATED_DATE + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_CREATED_USR + ","
                //+ RFQProductServiceDetails.RFQ_PROD_COL_ENTITY_ID + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_FEAT_ID + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_FROM_SPEC_ID + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_IMAGE_PATH + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_MSRMNT_UNIT + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_QUANTITY + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_SPEC_TEXT + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_TO_SPEC_ID + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " '" + rfPrdDet.getRFQId() + "'," + "'" +
            rfPrdDet.getCreatedDate() + "'," + "'" +
            rfPrdDet.getCreatedUsr() + "'," + "'" +
            //rfPrdDet.getEntityId() + "'," + "'" +
            rfPrdDet.getFeatId() + "'," + "'" +
            rfPrdDet.getFromSpecId() + "'," + "'" +
            rfPrdDet.getImgPath() + "'," + "'" +
            rfPrdDet.getMsrmntUnit() + "'," + "'" +
            rfPrdDet.getPrdCatId() + "'," + "'" +
            rfPrdDet.getQuantity() + "'," + "'" +
            rfPrdDet.getSpecText() + "'," + "'" +
            rfPrdDet.getToSpecId() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            cn.disconnect();

            FileUpload fileControl = rfPrdDet.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(rfPrdDet.getImgPath());

            return rowsAffected;

        }

        public static int insertRFQProductServiceDetails(ArrayList rfqProdList)
        {
 
            int rowsAffected = 0;
            String insertCmd = "insert into " + RFQProductServiceDetails.RFQ_PROD_TABLE
                + " ("
                + RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_CREATED_DATE + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_CREATED_USR + ","
                //+ RFQProductServiceDetails.RFQ_PROD_COL_ENTITY_ID + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_FEAT_ID + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_FROM_SPEC_ID + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_IMAGE_PATH + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_MSRMNT_UNIT + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_QUANTITY + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_SPEC_TEXT + ","
                + RFQProductServiceDetails.RFQ_PROD_COL_TO_SPEC_ID + ")"
                + "values (";

            Connections cn = new Connections();

            for(int i=0;i<rfqProdList.Count;i++)
            {
                RFQProductServiceDetails rfPrdDet=(RFQProductServiceDetails)rfqProdList[i];

            String insertCmdFinal = insertCmd + " '" + rfPrdDet.getRFQId() + "'," + "'" +
            rfPrdDet.getCreatedDate() + "'," + "'" +
            rfPrdDet.getCreatedUsr() + "'," + "'" +
                //rfPrdDet.getEntityId() + "'," + "'" +
            rfPrdDet.getFeatId() + "'," + "'" +
            rfPrdDet.getFromSpecId() + "'," + "'" +
            rfPrdDet.getImgPath() + "'," + "'" +
            rfPrdDet.getMsrmntUnit() + "'," + "'" +
            rfPrdDet.getPrdCatId() + "'," + "'" +
            rfPrdDet.getQuantity() + "'," + "'" +
            rfPrdDet.getSpecText() + "'," + "'" +
            rfPrdDet.getToSpecId() + "'";

            insertCmdFinal += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmdFinal, sessionUser);

            FileUpload fileControl = rfPrdDet.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(rfPrdDet.getImgPath());
            }
            cn.disconnect();   

            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the RFQ specification database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the RFQ id,Product Category id and Feature id 
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any other tables
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateRFQProductServiceDetails(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /*the second parameter contains column name - target value as where clause - note that this where clause must contain the RFQ id,Product Category id and Feature id 
             * a delete operation will  have no  cascading effect on any other tables
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID, out whereClauseCheck) && !whereClause.TryGetValue(RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID, out whereClauseCheck) && !whereClause.TryGetValue(RFQProductServiceDetails.RFQ_PROD_COL_FEAT_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - RFQProductServiceDetails.updateRFQProductServiceDetails"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to RFQProductServiceDetails.updateRFQProductServiceDetails is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to RFQProductServiceDetails.updateRFQProductServiceDetails is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + RFQProductServiceDetails.RFQ_PROD_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + RFQProductServiceDetails.RFQ_PROD_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_TO_SPEC_ID, RFQProductServiceDetails.RFQ_PROD_COL_TO_SPEC_ID_TYPE);
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_SPEC_TEXT, RFQProductServiceDetails.RFQ_PROD_COL_SPEC_TEXT_TYPE);
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID, RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID_TYPE);
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_QUANTITY, RFQProductServiceDetails.RFQ_PROD_COL_QUANTITY_TYPE);
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID, RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID_TYPE);
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_MSRMNT_UNIT, RFQProductServiceDetails.RFQ_PROD_COL_MSRMNT_UNIT_TYPE);
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_IMAGE_PATH, RFQProductServiceDetails.RFQ_PROD_COL_IMAGE_PATH_TYPE);
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_FROM_SPEC_ID, RFQProductServiceDetails.RFQ_PROD_COL_FROM_SPEC_ID_TYPE);
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_FEAT_ID, RFQProductServiceDetails.RFQ_PROD_COL_FEAT_ID_TYPE);
            //chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_ENTITY_ID, RFQProductServiceDetails.RFQ_PROD_COL_ENTITY_ID_TYPE);
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_CREATED_USR, RFQProductServiceDetails.RFQ_PROD_COL_CREATED_USR_TYPE);
            chkDataType.Add(RFQProductServiceDetails.RFQ_PROD_COL_CREATED_DATE, RFQProductServiceDetails.RFQ_PROD_COL_CREATED_DATE_TYPE);
            
            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQProductServiceDetails.updateRFQProductServiceDetails" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQProductServiceDetails.updateRFQProductServiceDetails" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            if (operation.Equals(Connections.OPERATION_DELETE))
            {
                String docPath = "";
                DataSet ds = cn.execQuery("select " + RFQProductServiceDetails.RFQ_PROD_COL_IMAGE_PATH + " from "
                    + RFQProductServiceDetails.RFQ_PROD_TABLE + " where " + RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID +
                    "='" + whereClause[RFQ_PROD_COL_RFQ_ID] + "'" + " and "
                    + RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID + "='" + whereClause[RFQ_PROD_COL_PROD_ID] + "'", "");

                DataTable dt = ds.Tables[0];

                foreach (DataRow dr in dt.Rows)
                {
                    docPath = dr[0].ToString();
                }

                if (File.Exists(docPath))
                    File.Delete(docPath);

            }


            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);


            cn.disconnect();

            return rowsAffected;
       
        }


    }
    /// <summary>
    /// this class is representative of the database object 'RFQ_Details'
    /// </summary>
    public class RFQDetails
    {
        private String RFQId;
        private String localityId;
        private String submitDate;
        private String dueDate;
        private String approvalStat;
        private String entityId;
        private String activeStat;
        private String createdUsr;
        private String createdEntity;
        private String termsandConds;
        private String ndaDocPath;
        private String createMode;
        private String RFQName;
        private String approvalLevel;
        private String currency;
        /// <summary>
        /// this is the requirement id which which this RFQ is associated
        /// </summary>
        private String reqId;
        /// <summary>
        /// This is the list of 'RFQProductServiceDetails' objects associated with the RFQ.
        /// </summary>
        private ArrayList RFQProdServList;
        private ArrayList RFQProdServQntyList;
        private FileUpload fileStream;

        private static String sessionUser = "";
        /// <summary>
        /// Whenver a user tries to create a Lead manually fro the sales screen, creation mode should be 'Manual'; and 
        /// whenever  a user creates an RFQ from purchase screen, this should become 'Auto'.
        /// </summary>
        public const String CREATION_MODE_MANUAL = "Manual";
        /// <summary>
        /// This creation mode defines that this RFQ is automatically converted to a Lead by the system, and thus specify that the Lead is not
        /// a manually creatd one. Whenver a user tries to create a Lead manually fro the sales screen, creation mode should be 'Manual'; and whenever
        /// a user creates an RFQ from purchase screen, this should become 'Auto'.
        /// </summary>
        public const String CREATION_MODE_AUTO = "Auto";

        public const String RFQ_ACTIVE_STAT_NONE = "_";
        public const String RFQ_ACTIVE_STAT_ACTIVE = "Active";
        public const String RFQ_ACTIVE_STAT_NOT_OPEN = "Not Open";
        public const String RFQ_ACTIVE_STAT_DEAL_CLOSED = "Deal Closed";

        public const String RFQ_APPROVAL_STAT_APPROVED = "Approved";
        public const String RFQ_APPROVAL_STAT_REJECTED = "Rejected";

        public const String RFQ_TABLE = "RFQ_Details";

        public const String RFQ_COL_RFQ_ID = "RFQ_id";
        public const String RFQ_COL_LOCAL_ID = "Locality_id";
        public const String RFQ_COL_SUBMIT_DATE = "Date_Submitted";
        public const String RFQ_COL_DUE_DATE = "Due_Date";
        public const String RFQ_COL_APPROVAL_STAT = "Approval_Status";
        public const String RFQ_COL_APPROVAL_LEVEL = "Approval_Level";
        public const String RFQ_COL_ENTITY_ID = "Cmp_Usr_Shop_id";
        public const String RFQ_COL_ACTIVE_STAT = "Active_Status";
        public const String RFQ_COL_CREATED_USR = "Created_By";
        public const String RFQ_COL_CREATED_ENTITY = "Created_By_Cmp";
        public const String RFQ_COL_T_AND_C = "T_AND_C";
        public const String RFQ_COL_NDA_PATH = "NDA_Path";
        public const String RFQ_COL_CREATE_MODE = "Creation_Mode";
        public const String RFQ_COL_RELATED_REQ = "related_requirement_id";
        public const String RFQ_COL_RFQ_NAME = "RFQ_Name";
        public const String RFQ_COL_CURRENCY = "Currency_Id";

        public const String RFQ_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_LOCAL_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_SUBMIT_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String RFQ_COL_DUE_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String RFQ_COL_APPROVAL_STAT_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_APPROVAL_LEVEL_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_ACTIVE_STAT_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_CREATED_USR_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_CREATED_ENTITY_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_T_AND_C_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_NDA_PATH_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_CREATE_MODE_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_RELATED_REQ_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_RFQ_NAME_TYPE = Connections.STRING_TYPE;
        public const String RFQ_COL_CURRENCY_TYPE = Connections.STRING_TYPE;

        public String getCurrency()
        {
            return currency;
        }
        public void setCurrency(String currency)
        {
            this.currency = currency;
        }

        public String getRFQId()
        {
            return RFQId;
        }
        /// <summary>
        /// This method along with setting the RFQId to this RFQDetails object also sets the same RFQId to all the associated 'RFQProductServiceDetails' objects
        /// </summary>
        /// <param name="rfId"></param>
        public void setRFQId(String rfId)
        {
            RFQId = rfId;
            //If the attached RFQProdServList arraylist does not contain the same requirement id, update that with this one
            int count = 0;
            if (this.RFQProdServList != null)
                for (count = 0; count < this.RFQProdServList.Count; count++)
                {
                    RFQProductServiceDetails assocSpec = (RFQProductServiceDetails)this.RFQProdServList[count];
                    assocSpec.setRFQId(rfId);
                }
        }
        public String getLocalityId()
        {
            return localityId;
        }
        public void setLocalityId(String lcId)
        {
            localityId = lcId;
        }
        public String getSubmitDate()
        {
            return submitDate;
        }
        public void setSubmitDate(String subDt)
        {
            submitDate = subDt;
        }
        public String getDueDate()
        {
            return dueDate;
        }
        public void setDueDate(String dueDt)
        {
            dueDate = dueDt;
        }
        public String getApprovalStat()
        {
            return approvalStat;
        }
        public void setApprovalStat(String apStat)
        {
            approvalStat = apStat;
        }
        public String getApprovalLevel()
        {
            return approvalLevel;
        }
        public void setApprovalLevel(String appLevel)
        {
            approvalLevel = appLevel;
        }
        public String getEntityId()
        {
            return entityId;
        }
        public void setEntityId(String eId)
        {
            entityId = eId;
        }
        public String getActiveStat()
        {
            return activeStat;
        }
        public void setActiveStat(String aStat)
        {
            activeStat = aStat;
        }
        public String getCreatedUsr()
        {
            return createdUsr;
        }
        public void setCreatedUsr(String cUsr)
        {
            createdUsr = cUsr;
        }
        public String getRFQName()
        {
            return this.RFQName;
        }
        public void setRFQName(String rfName)
        {
            this.RFQName = rfName;
        }
        /// <summary>
        /// This is the entity id which created this RFQDetails/Lead record.
        /// For automatically created Lead entry/RFQDetails records, this value is same as getEntityId().
        /// For Manually created lead entry/RFQDetails records, this value is different than getEntity() - in this case, this is entity/organization
        /// id who manually created the lead entry.
        /// </summary>
        /// <returns></returns>
        public String getCreatedEntity()
        {
            return this.createdEntity;
        }
        /// <summary>
        /// This is the entity id which created this RFQDetails/Lead record.
        /// For automatically created Lead entry/RFQDetails records, this value is same as getEntityId().
        /// For Manually created lead entry/RFQDetails records, this value is different than getEntity() - in this case, this is entity/organization
        /// id who manually created the lead entry.
        /// </summary>
        /// <param name="entId"></param>
        public void setCreatedEntity(String entId)
        {
            this.createdEntity = entId;
        }
        public String getTermsandConds()
        {
            return termsandConds;
        }
        public void setTermsandConds(String tandc)
        {
            termsandConds = tandc;
        }
        public String getNDADocPath()
        {
            return ndaDocPath;
        }
        public void setNDADocPath(String nPath)
        {
            ndaDocPath = nPath;
        }
        public FileUpload getFileStream()
        {
            return this.fileStream;
        }
        public void setFileStream(FileUpload fU)
        {
            this.fileStream = fU;
        }

        /// <summary>
        /// This method needs to be passed the main business entity id. This method will create a folder structure using that entity id and this objects
        /// RFQ id.
        /// RFQ id must be set to this object before this method is called.
        /// Also, this method will generate a image id for the image and prepond the image name (as stored with the filestream property) with the id
        /// </summary>
        /// <param name="entId"></param>
        public void setNDADocPathInFileStore(String entId)
        {
            if (entId == null || entId.Equals("") || this.getRFQId() == null || this.getRFQId().Equals(""))
                throw new CustomExceptions.businessRuleViolationException("RFQ id and/or entity id not set");
            else
                ndaDocPath = this.generateImagePath(entId + "\\" + this.getRFQId()) + "\\" + new Id().getNewId(Id.ID_TYPE_IMAGE_ID_STRING) + "_" + this.getFileStream().FileName;

        }
        /// <summary>
        /// Provided a folder path (can have multi-level path also separated by "\\" this method will create the entire
        /// folder structure.
        /// </summary>
        /// <param name="folderName"></param>
        /// <returns></returns>
        public String generateImagePath(String folderName)
        {
            String fileStoreRoot = App.Default.FileStoreRoot;
            String[] delimList = { "\\" };
            String[] subFolders = folderName.Split(delimList, StringSplitOptions.RemoveEmptyEntries);

            String returnPath = "";
            try
            {
                for (int i = 0; i < subFolders.Length; i++)
                    if (!Directory.Exists(fileStoreRoot + "\\" + subFolders[i]))
                    {
                        Directory.CreateDirectory(fileStoreRoot + "\\" + subFolders[i]);
                        fileStoreRoot += "\\" + subFolders[i];
                    }
                    else
                        fileStoreRoot += "\\" + subFolders[i];

                returnPath = fileStoreRoot;
            }
            catch (Exception ex)
            {
                returnPath = "";

            }
            return returnPath;
        }

        /* /// <summary>
         /// This method generates the approval status of a given RFQDetils object based on business rules
         /// </summary>
         /// <param name="rfObj"></param>
         /// <returns></returns>
         public static RFQDetails calculateApprovalStatus(RFQDetails rfObj)
         {
             rfObj.setApprovalStat(RFQDetails.RFQ_APPROVAL_STAT_APPROVED);
             return rfObj;
         }*/

        public String getCreateMode()
        {
            return createMode;
        }
        public void setCreateMode(String cMd)
        {
            if (!cMd.Equals(RFQDetails.CREATION_MODE_AUTO) && !cMd.Equals(RFQDetails.CREATION_MODE_MANUAL))
                throw (new CustomExceptions.businessRuleViolationException("Creation mode must be Auto/Manual .. use properties defiend in 'RFQDetails' class to set the value"));


            createMode = cMd;
        }
        public String getReqId()
        {
            return reqId;
        }
        public void setReqId(String rqId)
        {
            reqId = rqId;
        }
        public ArrayList getRFQProdServList()
        {
            return RFQProdServList;
        }
        public void setRFQProdServList(ArrayList prodServ)
        {
            RFQProdServList = prodServ;
        }
        /// <summary>
        /// Returns an arrayList of 'RFQProdServQnty' objects associated to this object.
        /// </summary>
        /// <returns></returns>
        public ArrayList getRFQProdServQntyList()
        {
            return this.RFQProdServQntyList;
        }

        public void setRFQProdServQntyList(ArrayList psQList)
        {
            this.RFQProdServQntyList = psQList;
        }
        /// <summary>
        /// for a given RFQ id returns the RFQ details object from the database. It does not return the related specification objects list and Product service quantity list.
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static RFQDetails getRFQDetailsbyIdDB(String rfId)
        {
            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQDetails.getRFQDetailsbyIdDB"));

            Connections cn = new Connections();
            String query = "select " + RFQDetails.RFQ_COL_RFQ_ID +
                "," + RFQDetails.RFQ_COL_ACTIVE_STAT +
                "," + RFQDetails.RFQ_COL_APPROVAL_STAT +
                "," + RFQDetails.RFQ_COL_CREATE_MODE +
                "," + RFQDetails.RFQ_COL_CREATED_USR +
                "," + RFQDetails.RFQ_COL_CREATED_ENTITY +
                "," + RFQDetails.RFQ_COL_DUE_DATE +
                "," + RFQDetails.RFQ_COL_ENTITY_ID +
                "," + RFQDetails.RFQ_COL_LOCAL_ID +
                "," + RFQDetails.RFQ_COL_NDA_PATH +
                "," + RFQDetails.RFQ_COL_RELATED_REQ +
                "," + RFQDetails.RFQ_COL_SUBMIT_DATE +
                "," + RFQDetails.RFQ_COL_T_AND_C +
                "," + RFQDetails.RFQ_COL_RFQ_NAME +
                "," + RFQDetails.RFQ_COL_APPROVAL_LEVEL +
                "," + RFQDetails.RFQ_COL_CURRENCY +
                " from " + RFQDetails.RFQ_TABLE +
                " where " + RFQDetails.RFQ_COL_RFQ_ID + "='" + rfId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            RFQDetails temp = new RFQDetails();

            foreach (DataRow dr in dt.Rows)
            {
                temp.setRFQId(dr[0].ToString());
                temp.setActiveStat(dr[1].ToString());
                temp.setApprovalStat(dr[2].ToString());
                temp.setCreateMode(dr[3].ToString());
                temp.setCreatedUsr(dr[4].ToString());
                temp.setCreatedEntity(dr[5].ToString());
                temp.setDueDate(dr[6].ToString());
                temp.setEntityId(dr[7].ToString());
                temp.setLocalityId(dr[8].ToString());
                temp.setNDADocPath(dr[9].ToString());
                temp.setReqId(dr[10].ToString());
                temp.setSubmitDate(dr[11].ToString());
                temp.setTermsandConds(dr[12].ToString());
                temp.setRFQName(dr[13].ToString());
                temp.setApprovalLevel(dr[14].ToString());
                temp.setCurrency(dr[15].ToString());
            }
            cn.disconnect();
            return temp;

        }
        /// <summary>
        /// for a given entity id, it returns an ArrayList containing objects of 'RFQDetails'. Note that the associated Prod/Serv specifications are not sent.
        /// The second parameter signals whether or not to consider only the RFQ records which are created by the passed entity id
        /// </summary>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static ArrayList getAllRFQbyEntityIdDB(String entId, bool onlyWhenCreator)
        {
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity Id sent to RFQDetails.getAllRFQbyEntityIdDB"));
            //Return all the RFQs which are created by this entity itself
            //This filters out RFQ created in this entity's name by other entity (e.g Manually created lead and potential).
            Connections cn = new Connections();

            String onlyCreator = (onlyWhenCreator ? " and " + RFQDetails.RFQ_COL_CREATED_ENTITY + "='" + entId.Trim() + "'" + 
                " and " + RFQDetails.RFQ_COL_RFQ_ID+" NOT LIKE "+"'rfq_dummy%'" : "");

            String query = "select " + RFQDetails.RFQ_COL_RFQ_ID +
                 "," + RFQDetails.RFQ_COL_ACTIVE_STAT +
                 "," + RFQDetails.RFQ_COL_APPROVAL_STAT +
                 "," + RFQDetails.RFQ_COL_CREATE_MODE +
                 "," + RFQDetails.RFQ_COL_CREATED_USR +
                 "," + RFQDetails.RFQ_COL_DUE_DATE +
                 "," + RFQDetails.RFQ_COL_ENTITY_ID +
                 "," + RFQDetails.RFQ_COL_LOCAL_ID +
                 "," + RFQDetails.RFQ_COL_NDA_PATH +
                 "," + RFQDetails.RFQ_COL_RELATED_REQ +
                 "," + RFQDetails.RFQ_COL_SUBMIT_DATE +
                 "," + RFQDetails.RFQ_COL_T_AND_C +
                 "," + RFQDetails.RFQ_COL_CREATED_ENTITY +
                 "," + RFQDetails.RFQ_COL_RFQ_NAME +
                 "," + RFQDetails.RFQ_COL_APPROVAL_LEVEL +
                 "," + RFQDetails.RFQ_COL_CURRENCY +
                 " from " + RFQDetails.RFQ_TABLE +
                 " where " + RFQDetails.RFQ_COL_ENTITY_ID + "='" + entId.Trim() + "'" + onlyCreator;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            ArrayList RFQList = new ArrayList();


            foreach (DataRow dr in dt.Rows)
            {
                RFQDetails temp = new RFQDetails();

                temp.setRFQId(dr[0].ToString());
                temp.setActiveStat(dr[1].ToString());
                temp.setApprovalStat(dr[2].ToString());
                temp.setCreateMode(dr[3].ToString());
                temp.setCreatedUsr(dr[4].ToString());
                temp.setDueDate(dr[5].ToString());
                temp.setEntityId(dr[6].ToString());
                temp.setLocalityId(dr[7].ToString());
                temp.setNDADocPath(dr[8].ToString());
                temp.setReqId(dr[9].ToString());
                temp.setSubmitDate(dr[10].ToString());
                temp.setTermsandConds(dr[11].ToString());
                temp.setCreatedEntity(dr[12].ToString());
                temp.setRFQName(dr[13].ToString());
                temp.setApprovalLevel(dr[14].ToString());
                temp.setCurrency(dr[15].ToString());
                // tempReq.setReqSpecs(new ArrayList());
                RFQList.Add(temp);

            }
            cn.disconnect();
            return RFQList;
        }
        /// <summary>
        /// This returns all RFQ ids (only ids) including the dummy ones created for PO
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="onlyWhenCreator"></param>
        /// <returns></returns>
        public static ArrayList getAllRFQIncludingDummybyEntityIdDB(String entId, bool onlyWhenCreator)
        {
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity Id sent to RFQDetails.getAllRFQbyEntityIdDB"));
            //Return all the RFQs which are created by this entity itself
            //This filters out RFQ created in this entity's name by other entity (e.g Manually created lead and potential).
            Connections cn = new Connections();

            String onlyCreator = (onlyWhenCreator ? " and " + RFQDetails.RFQ_COL_CREATED_ENTITY + "='" + entId.Trim() + "'" : "");

            String query = "select " + RFQDetails.RFQ_COL_RFQ_ID +
                /* "," + RFQDetails.RFQ_COL_ACTIVE_STAT +
                 "," + RFQDetails.RFQ_COL_APPROVAL_STAT +
                 "," + RFQDetails.RFQ_COL_CREATE_MODE +
                 "," + RFQDetails.RFQ_COL_CREATED_USR +
                 "," + RFQDetails.RFQ_COL_DUE_DATE +
                 "," + RFQDetails.RFQ_COL_ENTITY_ID +
                 "," + RFQDetails.RFQ_COL_LOCAL_ID +
                 "," + RFQDetails.RFQ_COL_NDA_PATH +
                 "," + RFQDetails.RFQ_COL_RELATED_REQ +
                 "," + RFQDetails.RFQ_COL_SUBMIT_DATE +
                 "," + RFQDetails.RFQ_COL_T_AND_C +
                 "," + RFQDetails.RFQ_COL_CREATED_ENTITY +
                 "," + RFQDetails.RFQ_COL_RFQ_NAME +
                 "," + RFQDetails.RFQ_COL_APPROVAL_LEVEL +
                 "," + RFQDetails.RFQ_COL_CURRENCY +*/
                 " from " + RFQDetails.RFQ_TABLE +
                 " where " + RFQDetails.RFQ_COL_ENTITY_ID + "='" + entId.Trim() + "'" + onlyCreator;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            ArrayList RFQList = new ArrayList();


            foreach (DataRow dr in dt.Rows)
            {
                //RFQDetails temp = new RFQDetails();

                //temp.setRFQId(dr[0].ToString());
               /* temp.setActiveStat(dr[1].ToString());
                temp.setApprovalStat(dr[2].ToString());
                temp.setCreateMode(dr[3].ToString());
                temp.setCreatedUsr(dr[4].ToString());
                temp.setDueDate(dr[5].ToString());
                temp.setEntityId(dr[6].ToString());
                temp.setLocalityId(dr[7].ToString());
                temp.setNDADocPath(dr[8].ToString());
                temp.setReqId(dr[9].ToString());
                temp.setSubmitDate(dr[10].ToString());
                temp.setTermsandConds(dr[11].ToString());
                temp.setCreatedEntity(dr[12].ToString());
                temp.setRFQName(dr[13].ToString());
                temp.setApprovalLevel(dr[14].ToString());
                temp.setCurrency(dr[15].ToString());*/
                // tempReq.setReqSpecs(new ArrayList());
                RFQList.Add(dr[0].ToString());

            }
            cn.disconnect();
            return RFQList;
        }

        /// <summary>
        /// This method was introduced to handle scenario when it is required to update the NDA document .
        /// If a new file needs to be uploaded/inserted that must be attached to the passed object as a FileUpload
        /// This method will remove the image at the existing server path; If no image alreadt exists it will create the path and put the image/document in server path
        /// </summary>
        /// <returns></returns>
        public static int updateorInsertRFQNDADB(RFQDetails rfqObj)
        {
            int rowsAffected = 0;
            String pathToUpload = rfqObj.getNDADocPath();

            if (pathToUpload != null && !pathToUpload.Equals(""))
            {
                if (File.Exists(pathToUpload))
                    File.Delete(pathToUpload);
            }
            rfqObj.setNDADocPathInFileStore(rfqObj.getEntityId());
            pathToUpload = rfqObj.getNDADocPath();

            String cmd = "update " + RFQDetails.RFQ_TABLE + " set " + RFQDetails.RFQ_COL_NDA_PATH + "=" +
                "'" + pathToUpload + "'" + " where " +
                RFQDetails.RFQ_COL_RFQ_ID + "=" + "'" + rfqObj.getRFQId() + "'";

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();
            FileUpload fileControl = rfqObj.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(pathToUpload);

            return rowsAffected;
        }


        /// <summary>
        /// inserts the passed RFQDetails object into the database.If there is attached 'RFQProductServiceDetails' list, that will also be inserted.
        /// If there are attached RFQ product service quantity objects those objects will also be inserted into database
        /// </summary>
        /// <param name="rfqDet"></param>
        /// <returns></returns>
        public static int insertRFQDetailsDB(RFQDetails rfqDet)
        {
            if (rfqDet.getRFQId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ id value sent to RFQDetails.insertRFQDetailsDB"));

            //rfqDet = RFQDetails.calculateApprovalStatus(rfqDet);
            int rowsAffected = 0;
            String insertCmd = "insert into " + RFQDetails.RFQ_TABLE
                + " ("
                + RFQDetails.RFQ_COL_RFQ_ID + ","
                + RFQDetails.RFQ_COL_ACTIVE_STAT + ","
                + RFQDetails.RFQ_COL_APPROVAL_STAT + ","
                + RFQDetails.RFQ_COL_CREATE_MODE + ","
                + RFQDetails.RFQ_COL_CREATED_USR + ","
                + RFQDetails.RFQ_COL_CREATED_ENTITY + ","
                + RFQDetails.RFQ_COL_DUE_DATE + ","
                + RFQDetails.RFQ_COL_ENTITY_ID + ","
                + RFQDetails.RFQ_COL_LOCAL_ID + ","
                + RFQDetails.RFQ_COL_NDA_PATH + ","
                + RFQDetails.RFQ_COL_RELATED_REQ + ","
                + RFQDetails.RFQ_COL_SUBMIT_DATE + ","
                + RFQDetails.RFQ_COL_RFQ_NAME + ","
                + RFQDetails.RFQ_COL_APPROVAL_LEVEL + ","
                + RFQDetails.RFQ_COL_CURRENCY + ","
                + RFQDetails.RFQ_COL_T_AND_C + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " '" + rfqDet.getRFQId() + "'," + "'" +
            rfqDet.getActiveStat() + "'," + "'" +
            rfqDet.getApprovalStat() + "'," + "'" +
            rfqDet.getCreateMode() + "'," + "'" +
            rfqDet.getCreatedUsr() + "'," + "'" +
            rfqDet.getCreatedEntity() + "'," + "'" +
            rfqDet.getDueDate() + "'," + "'" +
            rfqDet.getEntityId() + "'," + "'" +
            rfqDet.getLocalityId() + "'," + "'" +
            rfqDet.getNDADocPath() + "'," + "'" +
            rfqDet.getReqId() + "'," + "'" +
            rfqDet.getSubmitDate() + "'," + "'" +
            rfqDet.getRFQName() + "'," + "'" +
            rfqDet.getApprovalLevel() + "'," + "'" +
            rfqDet.getCurrency() + "'," + "'" +
            rfqDet.getTermsandConds() + "'";

            insertCmd += ")";


            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            if (rfqDet.getRFQProdServList() != null && rfqDet.getRFQProdServList().Count > 0) //Insert the related specification objects as well
            {
                ArrayList RFQProdList = rfqDet.getRFQProdServList();
                for (int count = 0; count < RFQProdList.Count; count++)
                {
                    rowsAffected += RFQProductServiceDetails.insertRFQProductServiceDetails((RFQProductServiceDetails)RFQProdList[count]);
                }
            }

            if (rfqDet.getRFQProdServQntyList() != null && rfqDet.getRFQProdServQntyList().Count > 0) //Insert the related quantity objects as well
            {
                ArrayList RFQProdQntyList = rfqDet.getRFQProdServQntyList();
                for (int count = 0; count < RFQProdQntyList.Count; count++)
                {
                    rowsAffected += RFQProdServQnty.insertRFQProductServiceQuantityDetailsDB((RFQProdServQnty)RFQProdQntyList[count]);
                }
            }
            cn.disconnect();

            FileUpload fileControl = rfqDet.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(rfqDet.getNDADocPath());

            return rowsAffected;


        }
        /// <summary>
        /// update or delete values in the 'RFQ_Details' database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the RFQ id
        /// the third parameter contains the type of operation
        /// a delete operation will  have a  cascading effect on all the dependent tables.
        /// If the Active status  is changed, a cascading operation will be done for RFQShortlisted entries for the same RFQ.
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateRFQDetailsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* update or delete values in the 'RFQ_Details' database table
             * the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the RFQ id 
             * the third parameter contains the type of operation
             * a delete operation will  have a  cascading effect on all the dependent tables
             * 
             * @Author: shibasis sengupta
             */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(RFQDetails.RFQ_COL_RFQ_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - RFQDetails.updateRFQDetailsDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to RFQDetails.updateRFQDetailsDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to RFQDetails.updateRFQDetailsDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + RFQDetails.RFQ_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + RFQDetails.RFQ_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(RFQDetails.RFQ_COL_T_AND_C, RFQDetails.RFQ_COL_T_AND_C_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_SUBMIT_DATE, RFQDetails.RFQ_COL_SUBMIT_DATE_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_RFQ_ID, RFQDetails.RFQ_COL_RFQ_ID_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_RELATED_REQ, RFQDetails.RFQ_COL_RELATED_REQ_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_NDA_PATH, RFQDetails.RFQ_COL_NDA_PATH_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_LOCAL_ID, RFQDetails.RFQ_COL_LOCAL_ID_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_ENTITY_ID, RFQDetails.RFQ_COL_ENTITY_ID_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_DUE_DATE, RFQDetails.RFQ_COL_DUE_DATE_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_CREATED_USR, RFQDetails.RFQ_COL_CREATED_USR_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_CREATED_ENTITY, RFQDetails.RFQ_COL_CREATED_ENTITY_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_CREATE_MODE, RFQDetails.RFQ_COL_CREATE_MODE_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_APPROVAL_STAT, RFQDetails.RFQ_COL_APPROVAL_STAT_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_ACTIVE_STAT, RFQDetails.RFQ_COL_ACTIVE_STAT_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_RFQ_NAME, RFQDetails.RFQ_COL_RFQ_NAME_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_APPROVAL_LEVEL, RFQDetails.RFQ_COL_APPROVAL_LEVEL_TYPE);
            chkDataType.Add(RFQDetails.RFQ_COL_CURRENCY, RFQDetails.RFQ_COL_CURRENCY_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQDetails.updateRFQDetailsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQDetails.updateRFQDetailsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }

            if (operation.Equals(Connections.OPERATION_DELETE))
                cmd += " ";

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            if (targetValue.ContainsKey(RFQDetails.RFQ_COL_ACTIVE_STAT))
            {
                String rfqId = whereClause[RFQDetails.RFQ_COL_RFQ_ID];
                String newActiveStat = targetValue[RFQ_COL_ACTIVE_STAT].Equals(RFQDetails.RFQ_ACTIVE_STAT_ACTIVE) ?
                    RFQShortlisted.POTENTIAL_ACTIVE_STAT_ACTIVE : RFQShortlisted.POTENTIAL_ACTIVE_STAT_NOT_OPEN;

                whereClause.Clear();
                whereClause.Add(RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID, rfqId);

                targetValue.Clear();
                targetValue.Add(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT, newActiveStat);

                rowsAffected += RFQShortlisted.updateRFQShortListedEntryDB(targetValue, whereClause, Connections.OPERATION_UPDATE);
            }

            return rowsAffected;

        }
        /// <summary>
        /// for a given requirement id returns all the RFQs from database which are associated with that requirement.
        /// Associate Product/service list is not returned.
        /// </summary>
        /// <param name="reqId"></param>
        /// <returns></returns>
        public static ArrayList getAllRFQbyRequirementIdDB(String reqId)
        {
            if (reqId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty requirement Id sent to RFQDetails.getAllRFQbyRequirementIdDB"));

            ArrayList allRFQList = new ArrayList();

            Connections cn = new Connections();
            String query = "select " + RFQDetails.RFQ_COL_RFQ_ID +
                "," + RFQDetails.RFQ_COL_ACTIVE_STAT +
                "," + RFQDetails.RFQ_COL_APPROVAL_STAT +
                "," + RFQDetails.RFQ_COL_CREATE_MODE +
                "," + RFQDetails.RFQ_COL_CREATED_USR +
                "," + RFQDetails.RFQ_COL_DUE_DATE +
                "," + RFQDetails.RFQ_COL_ENTITY_ID +
                "," + RFQDetails.RFQ_COL_LOCAL_ID +
                "," + RFQDetails.RFQ_COL_NDA_PATH +
                "," + RFQDetails.RFQ_COL_RELATED_REQ +
                "," + RFQDetails.RFQ_COL_SUBMIT_DATE +
                "," + RFQDetails.RFQ_COL_T_AND_C +
                "," + RFQDetails.RFQ_COL_CREATED_ENTITY +
                "," + RFQDetails.RFQ_COL_RFQ_NAME +
                "," + RFQDetails.RFQ_COL_APPROVAL_LEVEL +
                "," + RFQDetails.RFQ_COL_CURRENCY +
                " from " + RFQDetails.RFQ_TABLE +
                " where " + RFQDetails.RFQ_COL_RELATED_REQ + "='" + reqId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            foreach (DataRow dr in dt.Rows)
            {
                RFQDetails temp = new RFQDetails();

                temp.setRFQId(dr[0].ToString());
                temp.setActiveStat(dr[1].ToString());
                temp.setApprovalStat(dr[2].ToString());
                temp.setCreateMode(dr[3].ToString());
                temp.setCreatedUsr(dr[4].ToString());
                temp.setDueDate(dr[5].ToString());
                temp.setEntityId(dr[6].ToString());
                temp.setLocalityId(dr[7].ToString());
                temp.setNDADocPath(dr[8].ToString());
                temp.setReqId(dr[9].ToString());
                temp.setSubmitDate(dr[10].ToString());
                temp.setTermsandConds(dr[11].ToString());
                temp.setCreatedEntity(dr[12].ToString());
                temp.setRFQName(dr[13].ToString());
                temp.setApprovalLevel(dr[14].ToString());
                temp.setCurrency(dr[15].ToString());
                allRFQList.Add(temp);
            }

            cn.disconnect();
            return allRFQList;
        }
        /// <summary>
        /// For a given approver id and entity id this method returns all RFQ records which are pending approval from this user
        /// </summary>
        /// <param name="uId"></param>
        /// <returns></returns>
        public static ArrayList getAllRFQbyApproverIdDB(String uId, String entId)
        {
            if (uId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty user Id sent to RFQDetails.getAllRFQbyApproverIdDB"));

            ArrayList allRFQList = new ArrayList();

            Connections cn = new Connections();
            String query = "select " + RFQDetails.RFQ_COL_RFQ_ID +
                "," + RFQDetails.RFQ_COL_ACTIVE_STAT +
                "," + RFQDetails.RFQ_COL_APPROVAL_STAT +
                "," + RFQDetails.RFQ_COL_CREATE_MODE +
                "," + RFQDetails.RFQ_COL_CREATED_USR +
                "," + RFQDetails.RFQ_COL_DUE_DATE +
                "," + RFQDetails.RFQ_COL_ENTITY_ID +
                "," + RFQDetails.RFQ_COL_LOCAL_ID +
                "," + RFQDetails.RFQ_COL_NDA_PATH +
                "," + RFQDetails.RFQ_COL_RELATED_REQ +
                "," + RFQDetails.RFQ_COL_SUBMIT_DATE +
                "," + RFQDetails.RFQ_COL_T_AND_C +
                "," + RFQDetails.RFQ_COL_CREATED_ENTITY +
                "," + RFQDetails.RFQ_COL_RFQ_NAME +
                "," + RFQDetails.RFQ_COL_APPROVAL_LEVEL +
                "," + RFQDetails.RFQ_COL_CURRENCY +
                " from " + RFQDetails.RFQ_TABLE +
                " where " + RFQDetails.RFQ_COL_APPROVAL_STAT + "='" + uId.Trim() + "'" +
            " and " + RFQDetails.RFQ_COL_ENTITY_ID + "='" + entId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            foreach (DataRow dr in dt.Rows)
            {
                RFQDetails temp = new RFQDetails();

                temp.setRFQId(dr[0].ToString());
                temp.setActiveStat(dr[1].ToString());
                temp.setApprovalStat(dr[2].ToString());
                temp.setCreateMode(dr[3].ToString());
                temp.setCreatedUsr(dr[4].ToString());
                temp.setDueDate(dr[5].ToString());
                temp.setEntityId(dr[6].ToString());
                temp.setLocalityId(dr[7].ToString());
                temp.setNDADocPath(dr[8].ToString());
                temp.setReqId(dr[9].ToString());
                temp.setSubmitDate(dr[10].ToString());
                temp.setTermsandConds(dr[11].ToString());
                temp.setCreatedEntity(dr[12].ToString());
                temp.setRFQName(dr[13].ToString());
                temp.setApprovalLevel(dr[14].ToString());
                temp.setCurrency(dr[15].ToString());
                allRFQList.Add(temp);
            }

            cn.disconnect();
            return allRFQList;

        }
        /// <summary>
        /// for particular entity id, this method returns all the 'RFQDetails' object from database.
        /// Note that, it does not return the respective product specification objects.
        /// For any lead entry for which there is a respective potential entry exists, that record will not be retrieved.
        /// </summary>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static ArrayList getAllLeadsforEntityIdDB(String entId)
        {
            /* for a given entity anything is a lead if -
             * 1. The RFQ creation mdoe is   ' RFQDetails.CREATION_MODE_MANUAL' and the entity id is this entity id
             * OR
             * 2. The RFQ creation mode is  'RFQDetails.CREATION_MODE_AUTO' , and
             * 3.  The RFQ approval status is 'RFQApprovalStat.RFQ_APPROVAL_STAT_APPROVED', and
             * 4. RFQ is broadcasted to either 'RFQBroadcastList.RFQ_BROADCAST_TO_ALL', this entity id or if 'RFQBroadcastList.RFQ_BROADCAST_TO_ALL_INTERESTED' - then
             * the RFQ prod category is the same as the main product category of this business
             */
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity Id sent to RFQDetails.getAllLeadsforEntityIdDB"));

            Connections cn = new Connections();
            ArrayList RFQList = new ArrayList();

            //First auto created Leads, for which RFQs are approved and the RFQ is broadcasted to either 'ALL' /to this entity.
            String queryAuto1 = "select rfD." + RFQDetails.RFQ_COL_RFQ_ID +
                 ",rfD." + RFQDetails.RFQ_COL_ACTIVE_STAT +
                 ",rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT +
                 ",rfD." + RFQDetails.RFQ_COL_APPROVAL_LEVEL +
                 ",rfD." + RFQDetails.RFQ_COL_CREATE_MODE +
                 ",rfD." + RFQDetails.RFQ_COL_CREATED_USR +
                 ",rfD." + RFQDetails.RFQ_COL_DUE_DATE +
                 ",rfD." + RFQDetails.RFQ_COL_ENTITY_ID +
                 ",rfD." + RFQDetails.RFQ_COL_LOCAL_ID +
                 ",rfD." + RFQDetails.RFQ_COL_NDA_PATH +
                 ",rfD." + RFQDetails.RFQ_COL_RELATED_REQ +
                 ",rfD." + RFQDetails.RFQ_COL_SUBMIT_DATE +
                 ",rfD." + RFQDetails.RFQ_COL_T_AND_C +
                 ",rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY +
                 ",rfD." + RFQDetails.RFQ_COL_RFQ_NAME +
                 ",rfD." + RFQDetails.RFQ_COL_CURRENCY +
                 " from " + RFQDetails.RFQ_TABLE + " rfD," + RFQBroadcastList.RFQ_BROADCAST_LIST_TABLE + " rfB" +
                 " where rfD." + RFQDetails.RFQ_COL_ENTITY_ID + "<>" + "'" + entId.Trim() + "'" +
                 " and rfD." + RFQDetails.RFQ_COL_RFQ_ID + "=" + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID +
                     " and " + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_BROADCAST_TO + " in " + "(" + "'" + RFQBroadcastList.RFQ_BROADCAST_TO_ALL + "'" + "," +
                         "'" + entId.Trim() + "'" + ")" +
                         " and " + "rfD." + RFQDetails.RFQ_COL_CREATE_MODE + "=" + "'" + RFQDetails.CREATION_MODE_AUTO + "'" +
                         " and " + "rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT + "=" + "'" + RFQApprovalStat.RFQ_APPROVAL_STAT_APPROVED + "'" +
                         " and " + "'" + entId.Trim() + "'" + " not in " + "(select " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE +
                         " where " + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + " and " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "=" +
                         "'" + entId.Trim() + "'" + ")";



            String queryAuto2 = "select rfD." + RFQDetails.RFQ_COL_RFQ_ID +
     ",rfD." + RFQDetails.RFQ_COL_ACTIVE_STAT +
     ",rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT +
     ",rfD." + RFQDetails.RFQ_COL_APPROVAL_LEVEL +
     ",rfD." + RFQDetails.RFQ_COL_CREATE_MODE +
     ",rfD." + RFQDetails.RFQ_COL_CREATED_USR +
     ",rfD." + RFQDetails.RFQ_COL_DUE_DATE +
     ",rfD." + RFQDetails.RFQ_COL_ENTITY_ID +
     ",rfD." + RFQDetails.RFQ_COL_LOCAL_ID +
     ",rfD." + RFQDetails.RFQ_COL_NDA_PATH +
     ",rfD." + RFQDetails.RFQ_COL_RELATED_REQ +
     ",rfD." + RFQDetails.RFQ_COL_SUBMIT_DATE +
     ",rfD." + RFQDetails.RFQ_COL_T_AND_C +
     ",rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY +
     ",rfD." + RFQDetails.RFQ_COL_RFQ_NAME +
     ",rfD." + RFQDetails.RFQ_COL_CURRENCY +
     " from " + RFQDetails.RFQ_TABLE + " rfD," + RFQBroadcastList.RFQ_BROADCAST_LIST_TABLE + " rfB" +
     " where rfD." + RFQDetails.RFQ_COL_ENTITY_ID + "<>" + "'" + entId.Trim() + "'" +
     " and rfD." + RFQDetails.RFQ_COL_RFQ_ID + "=" + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID +
         " and " + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_BROADCAST_TO + "=" + "'" + RFQBroadcastList.RFQ_BROADCAST_TO_ALL_INTERESTED + "'" +
              " and " + "rfD." + RFQDetails.RFQ_COL_CREATE_MODE + "=" + "'" + RFQDetails.CREATION_MODE_AUTO + "'" +
             " and " + "rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT + "=" + "'" + RFQApprovalStat.RFQ_APPROVAL_STAT_APPROVED + "'" +
             " and " + "'" + entId.Trim() + "'" + " not in " + "(select " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE +
             " where " + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + " and " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "=" +
             "'" + entId.Trim() + "'" + ")";

            Dictionary<String, ProductCategory> mainProdDict = MainBusinessEntity.getProductDetailsforMainEntitybyIdDB(entId);

            DataSet dsAuto2 = cn.execQuery(queryAuto2, sessionUser);
            DataTable dtAuto2 = dsAuto2.Tables[0];

            foreach (DataRow dr in dtAuto2.Rows)
            {
                RFQDetails temp = new RFQDetails();

                //ArrayList rfqProdList=RFQProductServiceDetails.getAllProductServiceDetailsbyRFQIdDB(dr[0].ToString());
                ArrayList rfqProdList = RFQProdServQnty.getRFQProductServiceQuantityforRFIdDB(dr[0].ToString());
                Boolean matchFound = false;

                for (int i = 0; i < rfqProdList.Count; i++)
                {
                    RFQProdServQnty prodSrvObj = (RFQProdServQnty)rfqProdList[i];
                    if (mainProdDict.ContainsKey(prodSrvObj.getProdCatId()))
                    {
                        matchFound = true;
                        break;
                    }
                    else
                    {
                        Dictionary<String, ProductCategory> rootCatDict = ProductCategory.getRootLevelParentCategoryDB(prodSrvObj.getProdCatId());
                        foreach (KeyValuePair<String, ProductCategory> kvp in rootCatDict)
                        {
                            if (mainProdDict.ContainsKey(kvp.Key.ToString()))
                            {
                                matchFound = true;
                                break;
                            }
                        }
                    }
                }

                if (matchFound)
                {
                    temp.setRFQId(dr[0].ToString());
                    temp.setActiveStat(dr[1].ToString());
                    temp.setApprovalStat(dr[2].ToString());
                    temp.setApprovalLevel(dr[3].ToString());
                    temp.setCreateMode(dr[4].ToString());
                    temp.setCreatedUsr(dr[5].ToString());
                    temp.setDueDate(dr[6].ToString());
                    temp.setEntityId(dr[7].ToString());
                    temp.setLocalityId(dr[8].ToString());
                    temp.setNDADocPath(dr[9].ToString());
                    temp.setReqId(dr[10].ToString());
                    temp.setSubmitDate(dr[11].ToString());
                    temp.setTermsandConds(dr[12].ToString());
                    temp.setCreatedEntity(dr[13].ToString());
                    temp.setRFQName(dr[14].ToString());
                    temp.setCurrency(dr[15].ToString());
                    // tempReq.setReqSpecs(new ArrayList());
                    RFQList.Add(temp);
                }
            }

            //Then Auto created Leads, for which RFQs are approved and the RFQ is broadcasted to 'ALL_INTERESTED'
            /*  String queryAuto2 = "select rfD." + RFQDetails.RFQ_COL_RFQ_ID +
       ",rfD." + RFQDetails.RFQ_COL_ACTIVE_STAT +
       ",rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT +
       ",rfD." + RFQDetails.RFQ_COL_CREATE_MODE +
       ",rfD." + RFQDetails.RFQ_COL_CREATED_USR +
       ",rfD." + RFQDetails.RFQ_COL_DUE_DATE +
       ",rfD." + RFQDetails.RFQ_COL_ENTITY_ID +
       ",rfD." + RFQDetails.RFQ_COL_LOCAL_ID +
       ",rfD." + RFQDetails.RFQ_COL_NDA_PATH +
       ",rfD." + RFQDetails.RFQ_COL_RELATED_REQ +
       ",rfD." + RFQDetails.RFQ_COL_SUBMIT_DATE +
       ",rfD." + RFQDetails.RFQ_COL_T_AND_C +
       ",rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY +
       ",rfD." + RFQDetails.RFQ_COL_RFQ_NAME +
       " from " + RFQDetails.RFQ_TABLE + " rfD," + RFQBroadcastList.RFQ_BROADCAST_LIST_TABLE + " rfB," +
       MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_TABLE + " smP," + RFQProductServiceDetails.RFQ_PROD_TABLE + " rpS" +
       " where rfD." + RFQDetails.RFQ_COL_RFQ_ID + "=" + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID +
       " and " + "rfD." + RFQDetails.RFQ_COL_CREATE_MODE + "=" + "'" + RFQDetails.CREATION_MODE_AUTO + "'"+
       " and " + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_BROADCAST_TO + "=" + "'" + RFQBroadcastList.RFQ_BROADCAST_TO_ALL_INTERESTED + "'"+
       " and " + "rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT + "=" + "'" + RFQApprovalStat.RFQ_APPROVAL_STAT_APPROVED + "'"+
       " and " + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + "=" + "rpS." + RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID +
       " and " + "smP." + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_BUSINESS_ID + "=" + "'" + entId.Trim() + "'" +
       " and "+"rpS." + RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID + "="+"smP." + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_CATEGORY_ID +
       " and " + "'" + entId.Trim() + "'" + " not in " + "(select " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE +
                           " where " + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + " and " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "=" +
                           "'" + entId.Trim() + "'" + ")";*/

            //For manually created leads
            //Exclude those RFQs for which there is a potential entry or the RFQ is created because of Manually creating invoice

            String queryMan = "select rfD." + RFQDetails.RFQ_COL_RFQ_ID +
     ",rfD." + RFQDetails.RFQ_COL_ACTIVE_STAT +
     ",rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT +
     ",rfD." + RFQDetails.RFQ_COL_APPROVAL_LEVEL +
     ",rfD." + RFQDetails.RFQ_COL_CREATE_MODE +
     ",rfD." + RFQDetails.RFQ_COL_CREATED_USR +
     ",rfD." + RFQDetails.RFQ_COL_DUE_DATE +
     ",rfD." + RFQDetails.RFQ_COL_ENTITY_ID +
     ",rfD." + RFQDetails.RFQ_COL_LOCAL_ID +
     ",rfD." + RFQDetails.RFQ_COL_NDA_PATH +
     ",rfD." + RFQDetails.RFQ_COL_RELATED_REQ +
     ",rfD." + RFQDetails.RFQ_COL_SUBMIT_DATE +
     ",rfD." + RFQDetails.RFQ_COL_T_AND_C +
      ",rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY +
      ",rfD." + RFQDetails.RFQ_COL_RFQ_NAME +
      ",rfD." + RFQDetails.RFQ_COL_CURRENCY +
     " from " + RFQDetails.RFQ_TABLE + " rfD " +
     "where rfD." + RFQDetails.RFQ_COL_CREATE_MODE + "=" + "'" + RFQDetails.CREATION_MODE_MANUAL + "'" +
     " and " + "rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY + "=" + "'" + entId.Trim() + "'" +
     " and " + "'" + entId.Trim() + "'" + " not in " + "(select " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE +
                         " where " + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + " and " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "=" +
                         "'" + entId.Trim() + "'" + ")" +

                         " and " + "'" + entId.Trim() + "'" + " not in " + "(select " + Invoice.INVOICE_COL_ENTITY_ID + " from " + Invoice.INVOICE_TABLE +
                         " where " + Invoice.INVOICE_COL_RFQ_ID + "=" + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + " and " + Invoice.INVOICE_COL_ENTITY_ID + "=" +
                         "'" + entId.Trim() + "'" + " and " + Invoice.INVOICE_COL_CREATION_MODE + "=" + "'" + Invoice.INVOICE_CREATION_MODE_MANUAL + "'" + ")";



            ArrayList queries = new ArrayList();
            queries.Add(queryAuto1);
            //queries.Add(queryAuto2);
            queries.Add(queryMan);

            for (int count = 0; count < queries.Count; count++)
            {
                String query = (String)queries[count];

                DataSet ds = cn.execQuery(query, sessionUser);
                DataTable dt = ds.Tables[0];

                foreach (DataRow dr in dt.Rows)
                {
                    RFQDetails temp = new RFQDetails();

                    temp.setRFQId(dr[0].ToString());
                    temp.setActiveStat(dr[1].ToString());
                    temp.setApprovalStat(dr[2].ToString());
                    temp.setApprovalLevel(dr[3].ToString());
                    temp.setCreateMode(dr[4].ToString());
                    temp.setCreatedUsr(dr[5].ToString());
                    temp.setDueDate(dr[6].ToString());
                    temp.setEntityId(dr[7].ToString());
                    temp.setLocalityId(dr[8].ToString());
                    temp.setNDADocPath(dr[9].ToString());
                    temp.setReqId(dr[10].ToString());
                    temp.setSubmitDate(dr[11].ToString());
                    temp.setTermsandConds(dr[12].ToString());
                    temp.setCreatedEntity(dr[13].ToString());
                    temp.setRFQName(dr[14].ToString());
                    temp.setCurrency(dr[15].ToString());
                    // tempReq.setReqSpecs(new ArrayList());
                    RFQList.Add(temp);

                }
            }

            //Remove duplicate RFQs from the list
            Dictionary<String, RFQDetails> dupCheck = new Dictionary<string, RFQDetails>();
            ArrayList dupRemovedList = new ArrayList();
            for (int i = 0; i < RFQList.Count; i++)
            {
                try
                {
                    RFQDetails temp = (RFQDetails)RFQList[i];
                    dupCheck.Add(temp.getRFQId(), temp);
                    dupRemovedList.Add(temp);
                }
                catch (Exception e)
                {

                }
            }


            cn.disconnect();
            return dupRemovedList;

        }

        public static ArrayList getAllActiveAndAssignedToUserLeadsforEntityIdDB(String entId, String userId)
        {
            /* for a given entity anything is a lead if -
             * 1. The RFQ creation mdoe is   ' RFQDetails.CREATION_MODE_MANUAL' and the entity id is this entity id
             * OR
             * 2. The RFQ creation mode is  'RFQDetails.CREATION_MODE_AUTO' , and
             * 3.  The RFQ approval status is 'RFQApprovalStat.RFQ_APPROVAL_STAT_APPROVED', and
             * 4. RFQ is broadcasted to either 'RFQBroadcastList.RFQ_BROADCAST_TO_ALL', this entity id or if 'RFQBroadcastList.RFQ_BROADCAST_TO_ALL_INTERESTED' - then
             * the RFQ prod category is the same as the main product category of this business
             */
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity Id sent to RFQDetails.getAllLeadsforEntityIdDB"));

            Connections cn = new Connections();
            ArrayList RFQList = new ArrayList();

            //First auto created Leads, for which RFQs are approved and the RFQ is broadcasted to either 'ALL' /to this entity.
            String query1 = "select rfD." + RFQDetails.RFQ_COL_RFQ_ID +
                 ",rfD." + RFQDetails.RFQ_COL_ACTIVE_STAT +
                 ",rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT +
                 ",rfD." + RFQDetails.RFQ_COL_CREATE_MODE +
                 ",rfD." + RFQDetails.RFQ_COL_CREATED_USR +
                 ",rfD." + RFQDetails.RFQ_COL_DUE_DATE +
                 ",rfD." + RFQDetails.RFQ_COL_ENTITY_ID +
                 ",rfD." + RFQDetails.RFQ_COL_LOCAL_ID +
                 ",rfD." + RFQDetails.RFQ_COL_NDA_PATH +
                 ",rfD." + RFQDetails.RFQ_COL_RELATED_REQ +
                 ",rfD." + RFQDetails.RFQ_COL_SUBMIT_DATE +
                 ",rfD." + RFQDetails.RFQ_COL_T_AND_C +
                 ",rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY +
                 ",rfD." + RFQDetails.RFQ_COL_RFQ_NAME +
                 ",rfD." + RFQDetails.RFQ_COL_CURRENCY +
                 " from " + RFQDetails.RFQ_TABLE + " rfD," + RFQResponse.RFQ_RESP_TABLE + " rRs" +
                 " where rRs." + RFQResponse.RFQ_RES_COL_RESP_ENT_ID + "=" + "'" + entId.Trim() + "'" +
                                  " and rRs." + RFQResponse.RFQ_RES_COL_ASSGN_TO + "=" + "'" + userId.Trim() + "'" +
                 " and rRs." + RFQResponse.RFQ_RES_COL_RFQ_ID + "=" + "rfD." + RFQDetails.RFQ_COL_RFQ_ID +
                " and rfD." + RFQDetails.RFQ_COL_ENTITY_ID + "<>" + "'" + entId.Trim() + "'" +
                " and rfD." + RFQDetails.RFQ_COL_ACTIVE_STAT + "=" + "'" + RFQDetails.RFQ_ACTIVE_STAT_ACTIVE + "'" +
                        " and " + "'" + entId.Trim() + "'" + " not in " + "(select " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE +
                         " where " + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + " and " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "=" +
                         "'" + entId.Trim() + "'" + ")";



            ArrayList queries = new ArrayList();
            queries.Add(query1);
            //queries.Add(queryAuto2);

            for (int count = 0; count < queries.Count; count++)
            {
                String query = (String)queries[count];

                DataSet ds = cn.execQuery(query, sessionUser);
                DataTable dt = ds.Tables[0];

                foreach (DataRow dr in dt.Rows)
                {
                    RFQDetails temp = new RFQDetails();

                    temp.setRFQId(dr[0].ToString());
                    temp.setActiveStat(dr[1].ToString());
                    temp.setApprovalStat(dr[2].ToString());
                    temp.setCreateMode(dr[3].ToString());
                    temp.setCreatedUsr(dr[4].ToString());
                    temp.setDueDate(dr[5].ToString());
                    temp.setEntityId(dr[6].ToString());
                    temp.setLocalityId(dr[7].ToString());
                    temp.setNDADocPath(dr[8].ToString());
                    temp.setReqId(dr[9].ToString());
                    temp.setSubmitDate(dr[10].ToString());
                    temp.setTermsandConds(dr[11].ToString());
                    temp.setCreatedEntity(dr[12].ToString());
                    temp.setRFQName(dr[13].ToString());
                    temp.setCurrency(dr[14].ToString());
                    // tempReq.setReqSpecs(new ArrayList());
                    RFQList.Add(temp);

                }
            }

            //Remove duplicate RFQs from the list
            Dictionary<String, RFQDetails> dupCheck = new Dictionary<string, RFQDetails>();
            ArrayList dupRemovedList = new ArrayList();
            for (int i = 0; i < RFQList.Count; i++)
            {
                try
                {
                    RFQDetails temp = (RFQDetails)RFQList[i];
                    dupCheck.Add(temp.getRFQId(), temp);
                    dupRemovedList.Add(temp);
                }
                catch (Exception e)
                {

                }
            }


            cn.disconnect();
            return dupRemovedList;

        }
        public static ArrayList getAllLeadsIncludingConvertedtoPotentialforEntityIdDB(String entId)
        {
            /* for a given entity anything is a lead if -
             * 1. The RFQ creation mdoe is   ' RFQDetails.CREATION_MODE_MANUAL' and the entity id is this entity id
             * OR
             * 2. The RFQ creation mode is  'RFQDetails.CREATION_MODE_AUTO' , and
             * 3.  The RFQ approval status is 'RFQApprovalStat.RFQ_APPROVAL_STAT_APPROVED', and
             * 4. RFQ is broadcasted to either 'RFQBroadcastList.RFQ_BROADCAST_TO_ALL', this entity id or if 'RFQBroadcastList.RFQ_BROADCAST_TO_ALL_INTERESTED' - then
             * the RFQ prod category is the same as the main product category of this business
             */
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity Id sent to RFQDetails.getAllLeadsforEntityIdDB"));

            Connections cn = new Connections();
            ArrayList RFQList = new ArrayList();

            //First auto created Leads, for which RFQs are approved and the RFQ is broadcasted to either 'ALL' /to this entity.
            String queryAuto1 = "select rfD." + RFQDetails.RFQ_COL_RFQ_ID +
                 ",rfD." + RFQDetails.RFQ_COL_ACTIVE_STAT +
                 ",rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT +
                 ",rfD." + RFQDetails.RFQ_COL_CREATE_MODE +
                 ",rfD." + RFQDetails.RFQ_COL_CREATED_USR +
                 ",rfD." + RFQDetails.RFQ_COL_DUE_DATE +
                 ",rfD." + RFQDetails.RFQ_COL_ENTITY_ID +
                 ",rfD." + RFQDetails.RFQ_COL_LOCAL_ID +
                 ",rfD." + RFQDetails.RFQ_COL_NDA_PATH +
                 ",rfD." + RFQDetails.RFQ_COL_RELATED_REQ +
                 ",rfD." + RFQDetails.RFQ_COL_SUBMIT_DATE +
                 ",rfD." + RFQDetails.RFQ_COL_T_AND_C +
                 ",rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY +
                 ",rfD." + RFQDetails.RFQ_COL_RFQ_NAME +
                 ",rfD." + RFQDetails.RFQ_COL_CURRENCY +
                 " from " + RFQDetails.RFQ_TABLE + " rfD," + RFQBroadcastList.RFQ_BROADCAST_LIST_TABLE + " rfB" +
                 " where rfD." + RFQDetails.RFQ_COL_ENTITY_ID + "<>" + "'" + entId.Trim() + "'" +
                 " and rfD." + RFQDetails.RFQ_COL_RFQ_ID + "=" + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID +
                     " and " + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_BROADCAST_TO + " in " + "(" + "'" + RFQBroadcastList.RFQ_BROADCAST_TO_ALL + "'" + "," +
                         "'" + entId.Trim() + "'" + ")" +
                         " and " + "rfD." + RFQDetails.RFQ_COL_CREATE_MODE + "=" + "'" + RFQDetails.CREATION_MODE_AUTO + "'" +
                         " and " + "rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT + "=" + "'" + RFQApprovalStat.RFQ_APPROVAL_STAT_APPROVED + "'";


            String queryAuto2 = "select rfD." + RFQDetails.RFQ_COL_RFQ_ID +
     ",rfD." + RFQDetails.RFQ_COL_ACTIVE_STAT +
     ",rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT +
     ",rfD." + RFQDetails.RFQ_COL_CREATE_MODE +
     ",rfD." + RFQDetails.RFQ_COL_CREATED_USR +
     ",rfD." + RFQDetails.RFQ_COL_DUE_DATE +
     ",rfD." + RFQDetails.RFQ_COL_ENTITY_ID +
     ",rfD." + RFQDetails.RFQ_COL_LOCAL_ID +
     ",rfD." + RFQDetails.RFQ_COL_NDA_PATH +
     ",rfD." + RFQDetails.RFQ_COL_RELATED_REQ +
     ",rfD." + RFQDetails.RFQ_COL_SUBMIT_DATE +
     ",rfD." + RFQDetails.RFQ_COL_T_AND_C +
     ",rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY +
     ",rfD." + RFQDetails.RFQ_COL_RFQ_NAME +
     ",rfD." + RFQDetails.RFQ_COL_CURRENCY +
     " from " + RFQDetails.RFQ_TABLE + " rfD," + RFQBroadcastList.RFQ_BROADCAST_LIST_TABLE + " rfB" +
     " where rfD." + RFQDetails.RFQ_COL_ENTITY_ID + "<>" + "'" + entId.Trim() + "'" +
     " and rfD." + RFQDetails.RFQ_COL_RFQ_ID + "=" + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID +
         " and " + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_BROADCAST_TO + "=" + "'" + RFQBroadcastList.RFQ_BROADCAST_TO_ALL_INTERESTED + "'" +
              " and " + "rfD." + RFQDetails.RFQ_COL_CREATE_MODE + "=" + "'" + RFQDetails.CREATION_MODE_AUTO + "'" +
             " and " + "rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT + "=" + "'" + RFQApprovalStat.RFQ_APPROVAL_STAT_APPROVED + "'";

            Dictionary<String, ProductCategory> mainProdDict = MainBusinessEntity.getProductDetailsforMainEntitybyIdDB(entId);

            DataSet dsAuto2 = cn.execQuery(queryAuto2, sessionUser);
            DataTable dtAuto2 = dsAuto2.Tables[0];

            foreach (DataRow dr in dtAuto2.Rows)
            {
                RFQDetails temp = new RFQDetails();

                //ArrayList rfqProdList = RFQProductServiceDetails.getAllProductServiceDetailsbyRFQIdDB(dr[0].ToString());
                ArrayList rfqProdList = RFQProdServQnty.getRFQProductServiceQuantityforRFIdDB(dr[0].ToString());
                Boolean matchFound = false;

                for (int i = 0; i < rfqProdList.Count; i++)
                {
                    RFQProdServQnty prodSrvObj = (RFQProdServQnty)rfqProdList[i];
                    if (mainProdDict.ContainsKey(prodSrvObj.getProdCatId()))
                    {
                        matchFound = true;
                        break;
                    }
                    else
                    {
                        Dictionary<String, ProductCategory> rootCatDict = ProductCategory.getRootLevelParentCategoryDB(prodSrvObj.getProdCatId());
                        foreach (KeyValuePair<String, ProductCategory> kvp in rootCatDict)
                        {
                            if (mainProdDict.ContainsKey(kvp.Key.ToString()))
                            {
                                matchFound = true;
                                break;
                            }
                        }
                    }
                }

                if (matchFound)
                {
                    temp.setRFQId(dr[0].ToString());
                    temp.setActiveStat(dr[1].ToString());
                    temp.setApprovalStat(dr[2].ToString());
                    temp.setCreateMode(dr[3].ToString());
                    temp.setCreatedUsr(dr[4].ToString());
                    temp.setDueDate(dr[5].ToString());
                    temp.setEntityId(dr[6].ToString());
                    temp.setLocalityId(dr[7].ToString());
                    temp.setNDADocPath(dr[8].ToString());
                    temp.setReqId(dr[9].ToString());
                    temp.setSubmitDate(dr[10].ToString());
                    temp.setTermsandConds(dr[11].ToString());
                    temp.setCreatedEntity(dr[12].ToString());
                    temp.setRFQName(dr[13].ToString());
                    temp.setCurrency(dr[14].ToString());
                    // tempReq.setReqSpecs(new ArrayList());
                    RFQList.Add(temp);
                }
            }

            //Then Auto created Leads, for which RFQs are approved and the RFQ is broadcasted to 'ALL_INTERESTED'
            /*  String queryAuto2 = "select rfD." + RFQDetails.RFQ_COL_RFQ_ID +
       ",rfD." + RFQDetails.RFQ_COL_ACTIVE_STAT +
       ",rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT +
       ",rfD." + RFQDetails.RFQ_COL_CREATE_MODE +
       ",rfD." + RFQDetails.RFQ_COL_CREATED_USR +
       ",rfD." + RFQDetails.RFQ_COL_DUE_DATE +
       ",rfD." + RFQDetails.RFQ_COL_ENTITY_ID +
       ",rfD." + RFQDetails.RFQ_COL_LOCAL_ID +
       ",rfD." + RFQDetails.RFQ_COL_NDA_PATH +
       ",rfD." + RFQDetails.RFQ_COL_RELATED_REQ +
       ",rfD." + RFQDetails.RFQ_COL_SUBMIT_DATE +
       ",rfD." + RFQDetails.RFQ_COL_T_AND_C +
       ",rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY +
       ",rfD." + RFQDetails.RFQ_COL_RFQ_NAME +
       " from " + RFQDetails.RFQ_TABLE + " rfD," + RFQBroadcastList.RFQ_BROADCAST_LIST_TABLE + " rfB," +
       MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_TABLE + " smP," + RFQProductServiceDetails.RFQ_PROD_TABLE + " rpS" +
       " where rfD." + RFQDetails.RFQ_COL_RFQ_ID + "=" + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID +
       " and " + "rfD." + RFQDetails.RFQ_COL_CREATE_MODE + "=" + "'" + RFQDetails.CREATION_MODE_AUTO + "'"+
       " and " + "rfB." + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_BROADCAST_TO + "=" + "'" + RFQBroadcastList.RFQ_BROADCAST_TO_ALL_INTERESTED + "'"+
       " and " + "rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT + "=" + "'" + RFQApprovalStat.RFQ_APPROVAL_STAT_APPROVED + "'"+
       " and " + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + "=" + "rpS." + RFQProductServiceDetails.RFQ_PROD_COL_RFQ_ID +
       " and " + "smP." + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_BUSINESS_ID + "=" + "'" + entId.Trim() + "'" +
       " and "+"rpS." + RFQProductServiceDetails.RFQ_PROD_COL_PROD_ID + "="+"smP." + MainBusinessEntity.MAIN_BUSINESS_RELATED_PRODUCTS_COL_CATEGORY_ID +
       " and " + "'" + entId.Trim() + "'" + " not in " + "(select " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE +
                           " where " + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + " and " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "=" +
                           "'" + entId.Trim() + "'" + ")";*/


            String queryMan = "select rfD." + RFQDetails.RFQ_COL_RFQ_ID +
     ",rfD." + RFQDetails.RFQ_COL_ACTIVE_STAT +
     ",rfD." + RFQDetails.RFQ_COL_APPROVAL_STAT +
     ",rfD." + RFQDetails.RFQ_COL_CREATE_MODE +
     ",rfD." + RFQDetails.RFQ_COL_CREATED_USR +
     ",rfD." + RFQDetails.RFQ_COL_DUE_DATE +
     ",rfD." + RFQDetails.RFQ_COL_ENTITY_ID +
     ",rfD." + RFQDetails.RFQ_COL_LOCAL_ID +
     ",rfD." + RFQDetails.RFQ_COL_NDA_PATH +
     ",rfD." + RFQDetails.RFQ_COL_RELATED_REQ +
     ",rfD." + RFQDetails.RFQ_COL_SUBMIT_DATE +
     ",rfD." + RFQDetails.RFQ_COL_T_AND_C +
      ",rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY +
      ",rfD." + RFQDetails.RFQ_COL_RFQ_NAME +
      ",rfD." + RFQDetails.RFQ_COL_CURRENCY +
     " from " + RFQDetails.RFQ_TABLE + " rfD " +
     "where rfD." + RFQDetails.RFQ_COL_CREATE_MODE + "=" + "'" + RFQDetails.CREATION_MODE_MANUAL + "'" +
     " and " + "rfD." + RFQDetails.RFQ_COL_CREATED_ENTITY + "=" + "'" + entId.Trim() + "'" +
     " and " + "'" + entId.Trim() + "'" + " not in " + "(select " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE +
                         " where " + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + " and " + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "=" +
                         "'" + entId.Trim() + "'" + ")" +

                         " and " + "'" + entId.Trim() + "'" + " not in " + "(select " + Invoice.INVOICE_COL_ENTITY_ID + " from " + Invoice.INVOICE_TABLE +
                         " where " + Invoice.INVOICE_COL_RFQ_ID + "=" + "rfD." + RFQDetails.RFQ_COL_RFQ_ID + " and " + Invoice.INVOICE_COL_ENTITY_ID + "=" +
                         "'" + entId.Trim() + "'" + " and " + Invoice.INVOICE_COL_CREATION_MODE + "=" + "'" + Invoice.INVOICE_CREATION_MODE_MANUAL + "'" + ")";



            ArrayList queries = new ArrayList();
            queries.Add(queryAuto1);
            //queries.Add(queryAuto2);
            queries.Add(queryMan);

            for (int count = 0; count < queries.Count; count++)
            {
                String query = (String)queries[count];

                DataSet ds = cn.execQuery(query, sessionUser);
                DataTable dt = ds.Tables[0];

                foreach (DataRow dr in dt.Rows)
                {
                    RFQDetails temp = new RFQDetails();

                    temp.setRFQId(dr[0].ToString());
                    temp.setActiveStat(dr[1].ToString());
                    temp.setApprovalStat(dr[2].ToString());
                    temp.setCreateMode(dr[3].ToString());
                    temp.setCreatedUsr(dr[4].ToString());
                    temp.setDueDate(dr[5].ToString());
                    temp.setEntityId(dr[6].ToString());
                    temp.setLocalityId(dr[7].ToString());
                    temp.setNDADocPath(dr[8].ToString());
                    temp.setReqId(dr[9].ToString());
                    temp.setSubmitDate(dr[10].ToString());
                    temp.setTermsandConds(dr[11].ToString());
                    temp.setCreatedEntity(dr[12].ToString());
                    temp.setRFQName(dr[13].ToString());
                    temp.setCurrency(dr[14].ToString());
                    // tempReq.setReqSpecs(new ArrayList());
                    RFQList.Add(temp);

                }
            }

            //Remove duplicate RFQs from the list
            Dictionary<String, RFQDetails> dupCheck = new Dictionary<string, RFQDetails>();
            ArrayList dupRemovedList = new ArrayList();
            for (int i = 0; i < RFQList.Count; i++)
            {
                try
                {
                    RFQDetails temp = (RFQDetails)RFQList[i];
                    dupCheck.Add(temp.getRFQId(), temp);
                    dupRemovedList.Add(temp);
                }
                catch (Exception e)
                {

                }
            }


            cn.disconnect();
            return dupRemovedList;

        }
    }

    /// <summary>
    /// this class represents the response objects to an RFQ;
    /// details related to the quotes of the response can be found using the object of the class 'RFQResponseQuotes';
    /// this class represents the backend database table 'RFQ_Response'
    /// </summary>
    public class RFQResponse
    {
        private String RFQId;
        private String respEntityId;
        private String ndaPath;
        private String respDate;
        private String nextFollowupDate;
        private String assignedTo;
        /// <summary>
        /// This variable stores an arraylist of 'RFQResponseQuotes' objects which are associated with this particular RFQReponse object.
        /// </summary>
        private ArrayList ResponseQuoteList;

        private FileUpload fileStream;

        private static String sessionUser = "";

        public const String RFQ_RESP_TABLE = "RFQ_Response";

        public const String RFQ_RES_COL_RFQ_ID = "RFQ_id";
        public const String RFQ_RES_COL_RESP_ENT_ID = "Response_Cmp_id";
        public const String RFQ_RES_COL_NDA = "NDA_Path";
        public const String RFQ_RES_COL_RESP_DATE = "Date_of_Response";
        public const String RFQ_RES_COL_NXT_FWUP_DATE = "Next_Followup_Date";
        public const String RFQ_RES_COL_ASSGN_TO = "Assigned_To";

        public const String RFQ_RES_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_RES_COL_RESP_ENT_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_RES_COL_NDA_TYPE = Connections.STRING_TYPE;
        public const String RFQ_RES_COL_RESP_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String RFQ_RES_COL_NXT_FWUP_DATE_TYPE = Connections.DATE_TIME_TYPE;
        public const String RFQ_RES_COL_ASSGN_TO_TYPE = Connections.STRING_TYPE;


        public String getRFQId()
        {
            return RFQId;
        }
        public void setRFQId(String rfId)
        {
            RFQId = rfId;
        }
        public String getRespEntityId()
        {
            return respEntityId;
        }
        public void setRespEntityId(String rEnt)
        {
            respEntityId = rEnt;
        }
        public String getNdaPath()
        {
            return ndaPath;
        }
        public void setNdaPath(String nd)
        {
            ndaPath = nd;
        }
        public String getRespDate()
        {
            return respDate;
        }
        public void setRespDate(String rDate)
        {
            respDate = rDate;
        }
        /// <summary>
        /// Returns all associated responsequote objects in an arraylist which are associated with this reponse object.
        /// </summary>
        /// <returns></returns>
        public ArrayList getResponseQuoteList()
        {
            return this.ResponseQuoteList;
        }
        public void setResponseQuoteList(ArrayList rQList)
        {
            this.ResponseQuoteList = rQList;
        }
        public FileUpload getFileStream()
        {
            return this.fileStream;
        }
        public void setFileStream(FileUpload fS)
        {
            this.fileStream = fS;
        }

        /// <summary>
        /// This method needs to be passed the main business entity id of the reponse entity id. This method will create a folder structure using that entity id and this objects
        /// RFQ id.
        /// RFQ id must be set to this object before this method is called.
        /// Also, this method will generate a image/doc  id for the image/doc and prepond the image name (as stored with the filestream property) with the id
        /// </summary>
        /// <param name="RespentId"></param>
        public void setNDADocPathInFileStore(String RespentId)
        {
            if (RespentId == null || RespentId.Equals("") || this.getRFQId() == null || this.getRFQId().Equals(""))
                throw new CustomExceptions.businessRuleViolationException("RFQ id and/or entity id not set");
            else
                ndaPath = this.generateImagePath(RespentId + "\\" + this.getRFQId()) + "\\" + new Id().getNewId(Id.ID_TYPE_IMAGE_ID_STRING) + "_" + this.getFileStream().FileName;

        }
        /// <summary>
        /// Provided a folder path (can have multi-level path also separated by "\\" this method will create the entire
        /// folder structure.
        /// </summary>
        /// <param name="folderName"></param>
        /// <returns></returns>
        public String generateImagePath(String folderName)
        {
            String fileStoreRoot = App.Default.FileStoreRoot;
            String[] delimList = { "\\" };
            String[] subFolders = folderName.Split(delimList, StringSplitOptions.RemoveEmptyEntries);

            String returnPath = "";
            try
            {
                for (int i = 0; i < subFolders.Length; i++)
                    if (!Directory.Exists(fileStoreRoot + "\\" + subFolders[i]))
                    {
                        Directory.CreateDirectory(fileStoreRoot + "\\" + subFolders[i]);
                        fileStoreRoot += "\\" + subFolders[i];
                    }
                    else
                        fileStoreRoot += "\\" + subFolders[i];

                returnPath = fileStoreRoot;
            }
            catch (Exception ex)
            {
                returnPath = "";

            }
            return returnPath;
        }

        /// <summary>
        /// for any given rfq id returns all the associated 'RFQResponse' objects from the database
        /// the returned dictionary contains response entity id as the 'key' and the respective 'RFQResponse' object as the 'value'.
        /// It Returns all associated ResponseQuote objects associated with each of the response.
        /// </summary>
        /// <param name="rfId"></param>
        public static Dictionary<String, RFQResponse> getAllRFQResponseforRFQIdDB(String rfId)
        {
            /* for any given rfq id returns all the associated 'RFQResponse' objects from the database
             * the returned dictionary contains response entity id as the 'key' and the respective 'RFQResponse' object as the 'value'
             * 
             * @Author: shibasis sengupta
            */

            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQResponse.getAllRFQResponseforRFQIdDB"));


            Connections cn = new Connections();
            String query = "select " + RFQResponse.RFQ_RES_COL_RFQ_ID +
               "," + RFQResponse.RFQ_RES_COL_RESP_DATE +
               "," + RFQResponse.RFQ_RES_COL_RESP_ENT_ID +
               "," + RFQResponse.RFQ_RES_COL_NDA +
               "," + RFQResponse.RFQ_RES_COL_ASSGN_TO +
               "," + RFQResponse.RFQ_RES_COL_NXT_FWUP_DATE +
               " from " + RFQResponse.RFQ_RESP_TABLE +
                " where " + RFQResponse.RFQ_RES_COL_RFQ_ID + "='" + rfId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, RFQResponse> rfRespDict = new Dictionary<String, RFQResponse>();

            foreach (DataRow dr in dt.Rows)
            {
                RFQResponse temp = new RFQResponse();

                temp.setRFQId(dr[0].ToString());
                temp.setRespDate(dr[1].ToString());
                temp.setRespEntityId(dr[2].ToString());
                temp.setNdaPath(dr[3].ToString());
                temp.setAssignedTo(dr[4].ToString());
                temp.setNextFollowupDate(dr[5].ToString());

                Dictionary<String, RFQResponseQuotes> allRespforRespEntDict = RFQResponseQuotes.getAllResponseQuotesforRFQandResponseEntityDB(temp.getRFQId(), temp.getRespEntityId());
                ArrayList respList = new ArrayList();

                foreach (KeyValuePair<String, RFQResponseQuotes> kvp in allRespforRespEntDict)
                    respList.Add(kvp.Value);

                temp.setResponseQuoteList(respList);

                rfRespDict.Add(temp.getRespEntityId(), temp);
            }
            cn.disconnect();
            return rfRespDict;

        }
        /// <summary>
        /// for a given 'RFQ id' and 'response entity id' returns the respective 'RFQResponse' object from database.
        /// This method also returns the associated response quote objects.
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static RFQResponse getRFQResponseforRFQIdandResponseEntityIdDB(String rfId, String respEnt)
        {
            /*for a given 'RFQ id' and 'response entity id' returns the respective 'RFQResponse' object from database
             * 
             * @Author: shibasis sengupta
            */

            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQResponse.getRFQResponseforRFQIdandResponseEntityIdDB"));

            if (respEnt.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Response entity Id sent to RFQResponse.getRFQResponseforRFQIdandResponseEntityIdDB"));


            Connections cn = new Connections();
            String query = "select " + RFQResponse.RFQ_RES_COL_RFQ_ID +
               "," + RFQResponse.RFQ_RES_COL_RESP_DATE +
               "," + RFQResponse.RFQ_RES_COL_RESP_ENT_ID +
               "," + RFQResponse.RFQ_RES_COL_NDA +
               "," + RFQResponse.RFQ_RES_COL_ASSGN_TO +
               "," + RFQResponse.RFQ_RES_COL_NXT_FWUP_DATE +
               " from " + RFQResponse.RFQ_RESP_TABLE +
                " where " + RFQResponse.RFQ_RES_COL_RFQ_ID + "='" + rfId.Trim() + "'" +
                " and " + RFQResponse.RFQ_RES_COL_RESP_ENT_ID + "='" + respEnt.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            RFQResponse temp = new RFQResponse();

            foreach (DataRow dr in dt.Rows)
            {

                temp.setRFQId(dr[0].ToString());
                temp.setRespDate(dr[1].ToString());
                temp.setRespEntityId(dr[2].ToString());
                temp.setNdaPath(dr[3].ToString());
                temp.setAssignedTo(dr[4].ToString());
                temp.setNextFollowupDate(dr[5].ToString());

                Dictionary<String, RFQResponseQuotes> allRespforRespEntDict = RFQResponseQuotes.getAllResponseQuotesforRFQandResponseEntityDB(temp.getRFQId(), temp.getRespEntityId());
                ArrayList respList = new ArrayList();

                foreach (KeyValuePair<String, RFQResponseQuotes> kvp in allRespforRespEntDict)
                    respList.Add(kvp.Value);

                temp.setResponseQuoteList(respList);

            }
            cn.disconnect();
            return temp;

        }

        /// <summary>
        /// for a given 'RFQ id' list and 'response entity id' returns the dictionary of 'rfq-id' 'RFQResponse' object from database.
        /// The key of the returned dictionary is 'rfq id'
        /// This method DOES NOT return the associated response quote objects.
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static Dictionary<String, RFQResponse> getRFQResponseDictWOQuotesForRFQIdListandResponseEntityIdDB(ArrayList rfqList, String respEnt)
        {
            Dictionary<String, RFQResponse> returnDict = new Dictionary<string, RFQResponse>();
            String rfqArray = "";

            for (int i = 0; i < rfqList.Count; i++)
            {
                returnDict.Add(rfqList[i].ToString(), null);
                rfqArray += rfqArray.Equals("") ? "'" + rfqList[i].ToString() + "'" : ",'" + rfqList[i].ToString() + "'";
            }

            Connections cn = new Connections();
            String query = "select " + RFQResponse.RFQ_RES_COL_RFQ_ID +
               "," + RFQResponse.RFQ_RES_COL_RESP_DATE +
               "," + RFQResponse.RFQ_RES_COL_RESP_ENT_ID +
               "," + RFQResponse.RFQ_RES_COL_NDA +
               "," + RFQResponse.RFQ_RES_COL_ASSGN_TO +
               "," + RFQResponse.RFQ_RES_COL_NXT_FWUP_DATE +
               " from " + RFQResponse.RFQ_RESP_TABLE +
                " where " + RFQResponse.RFQ_RES_COL_RFQ_ID + " IN (" + rfqArray + ")" +
                " and " + RFQResponse.RFQ_RES_COL_RESP_ENT_ID + "='" + respEnt.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];



            foreach (DataRow dr in dt.Rows)
            {
                RFQResponse temp = new RFQResponse();

                temp.setRFQId(dr[0].ToString());
                temp.setRespDate(dr[1].ToString());
                temp.setRespEntityId(dr[2].ToString());
                temp.setNdaPath(dr[3].ToString());
                temp.setAssignedTo(dr[4].ToString());
                temp.setNextFollowupDate(dr[5].ToString());

                /*Dictionary<String, RFQResponseQuotes> allRespforRespEntDict = RFQResponseQuotes.getAllResponseQuotesforRFQandResponseEntityDB(temp.getRFQId(), temp.getRespEntityId());
                ArrayList respList = new ArrayList();

                foreach (KeyValuePair<String, RFQResponseQuotes> kvp in allRespforRespEntDict)
                    respList.Add(kvp.Value);

                temp.setResponseQuoteList(respList);*/
                if (returnDict.ContainsKey(dr[0].ToString()))
                    returnDict[dr[0].ToString()] = temp;

            }
            cn.disconnect();
            return returnDict;

        }

        /// <summary>
        /// for a given 'RFQ id' and 'response entity id' returns the respective 'RFQResponse' object from database.
        /// This method DOES NOT return the associated response quote objects.
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static RFQResponse getRFQResponseWOQuotesForRFQIdandResponseEntityIdDB(String rfId, String respEnt)
        {
            /*for a given 'RFQ id' and 'response entity id' returns the respective 'RFQResponse' object from database
             * 
             * @Author: shibasis sengupta
            */

            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQResponse.getRFQResponseforRFQIdandResponseEntityIdDB"));

            if (respEnt.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Response entity Id sent to RFQResponse.getRFQResponseforRFQIdandResponseEntityIdDB"));


            Connections cn = new Connections();
            String query = "select " + RFQResponse.RFQ_RES_COL_RFQ_ID +
               "," + RFQResponse.RFQ_RES_COL_RESP_DATE +
               "," + RFQResponse.RFQ_RES_COL_RESP_ENT_ID +
               "," + RFQResponse.RFQ_RES_COL_NDA +
               "," + RFQResponse.RFQ_RES_COL_ASSGN_TO +
               "," + RFQResponse.RFQ_RES_COL_NXT_FWUP_DATE +
               " from " + RFQResponse.RFQ_RESP_TABLE +
                " where " + RFQResponse.RFQ_RES_COL_RFQ_ID + "='" + rfId.Trim() + "'" +
                " and " + RFQResponse.RFQ_RES_COL_RESP_ENT_ID + "='" + respEnt.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            RFQResponse temp = new RFQResponse();

            foreach (DataRow dr in dt.Rows)
            {

                temp.setRFQId(dr[0].ToString());
                temp.setRespDate(dr[1].ToString());
                temp.setRespEntityId(dr[2].ToString());
                temp.setNdaPath(dr[3].ToString());
                temp.setAssignedTo(dr[4].ToString());
                temp.setNextFollowupDate(dr[5].ToString());

                /*Dictionary<String, RFQResponseQuotes> allRespforRespEntDict = RFQResponseQuotes.getAllResponseQuotesforRFQandResponseEntityDB(temp.getRFQId(), temp.getRespEntityId());
                ArrayList respList = new ArrayList();

                foreach (KeyValuePair<String, RFQResponseQuotes> kvp in allRespforRespEntDict)
                    respList.Add(kvp.Value);

                temp.setResponseQuoteList(respList);*/

            }
            cn.disconnect();
            return temp;

        }
        /// <summary>
        /// for a given response entity id, this method returns all the associated responses generated from that entity 
        /// the 'key' is the 'RFQ Id' and the 'value' is 'RFQResponse' object.
        /// This method also returns the associated RFQ Reponse Quote objects.
        /// </summary>
        /// <param name="respEnt"></param>
        /// <returns></returns>
        public static Dictionary<String, RFQResponse> getAllRFQResponseforResponseEntityIdDB(String respEnt)
        {
            if (respEnt.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty response entity Id sent to RFQResponse.getAllRFQResponseforResponseEntityIdDB"));


            Connections cn = new Connections();
            String query = "select " + RFQResponse.RFQ_RES_COL_RFQ_ID +
               "," + RFQResponse.RFQ_RES_COL_RESP_DATE +
               "," + RFQResponse.RFQ_RES_COL_RESP_ENT_ID +
               "," + RFQResponse.RFQ_RES_COL_NDA +
               "," + RFQResponse.RFQ_RES_COL_ASSGN_TO +
               "," + RFQResponse.RFQ_RES_COL_NXT_FWUP_DATE +
               " from " + RFQResponse.RFQ_RESP_TABLE +
                " where " + RFQResponse.RFQ_RES_COL_RESP_ENT_ID + "='" + respEnt.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, RFQResponse> rfRespDict = new Dictionary<String, RFQResponse>();

            foreach (DataRow dr in dt.Rows)
            {
                RFQResponse temp = new RFQResponse();

                temp.setRFQId(dr[0].ToString());
                temp.setRespDate(dr[1].ToString());
                temp.setRespEntityId(dr[2].ToString());
                temp.setNdaPath(dr[3].ToString());
                temp.setAssignedTo(dr[4].ToString());
                temp.setNextFollowupDate(dr[5].ToString());

                Dictionary<String, RFQResponseQuotes> allRespforRespEntDict = RFQResponseQuotes.getAllResponseQuotesforRFQandResponseEntityDB(temp.getRFQId(), temp.getRespEntityId());
                ArrayList respList = new ArrayList();

                foreach (KeyValuePair<String, RFQResponseQuotes> kvp in allRespforRespEntDict)
                    respList.Add(kvp.Value);

                temp.setResponseQuoteList(respList);

                rfRespDict.Add(temp.getRespEntityId(), temp);
            }
            cn.disconnect();
            return rfRespDict;

        }
        /// <summary>
        /// inserts the passed 'RFQResponse' object into database.
        /// If there are associated Response quote objects those will also be inserted.
        /// </summary>
        /// <param name="rfResp"></param>
        /// <returns></returns>
        public static int insertRFQResponseDB(RFQResponse rfResp)
        {
            if (rfResp.getRFQId().Equals("") && rfResp.getRespEntityId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Primary Key missing field value sent to RFQResponse.insertRFQResponse"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + RFQResponse.RFQ_RESP_TABLE
                + " ("
                + RFQResponse.RFQ_RES_COL_RFQ_ID + ","
                + RFQResponse.RFQ_RES_COL_RESP_ENT_ID + ","
                + RFQResponse.RFQ_RES_COL_RESP_DATE + ","
                + RFQResponse.RFQ_RES_COL_ASSGN_TO + ","
                + RFQResponse.RFQ_RES_COL_NXT_FWUP_DATE + ","
                + RFQResponse.RFQ_RES_COL_NDA + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " '" + rfResp.getRFQId() + "'," + "'" +
            rfResp.getRespEntityId() + "'," + "'" +
            rfResp.getRespDate() + "'," + "'" +
            rfResp.getAssignedTo() + "'," + "'" +
            rfResp.getNextFollowupDate() + "'," + "'" +
            rfResp.getNdaPath() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            if (rfResp.getResponseQuoteList() != null && rfResp.getResponseQuoteList().Count > 0)
            {
                ArrayList tempList = rfResp.getResponseQuoteList();
                for (int i = 0; i < tempList.Count; i++)
                    rowsAffected += RFQResponseQuotes.insertRFQResponseQuotesDB((RFQResponseQuotes)tempList[i]);
            }
            cn.disconnect();

            FileUpload fileControl = rfResp.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(rfResp.getNdaPath());

            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the 'RFQ_Response' database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the RFQ id/Response company id 
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateRFQResponseDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* update or delete values in the 'RFQ_Response' database table
             * the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the RFQ id/Response company id 
             * the third parameter contains the type of operation
             * a delete operation will  have no  cascading effect on any table
             * 
             * @Author: shibasis sengupta
             */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(RFQResponse.RFQ_RES_COL_RFQ_ID, out whereClauseCheck) && !whereClause.TryGetValue(RFQResponse.RFQ_RES_COL_RESP_ENT_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - RFQResponse.updateRFQResponseDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to RFQResponse.updateRFQResponseDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to RFQResponse.updateRFQResponseDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + RFQResponse.RFQ_RESP_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + RFQResponse.RFQ_RESP_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(RFQResponse.RFQ_RES_COL_RFQ_ID, RFQResponse.RFQ_RES_COL_RFQ_ID_TYPE);
            chkDataType.Add(RFQResponse.RFQ_RES_COL_RESP_ENT_ID, RFQResponse.RFQ_RES_COL_RESP_ENT_ID_TYPE);
            chkDataType.Add(RFQResponse.RFQ_RES_COL_RESP_DATE, RFQResponse.RFQ_RES_COL_RESP_DATE_TYPE);
            chkDataType.Add(RFQResponse.RFQ_RES_COL_NDA, RFQResponse.RFQ_RES_COL_NDA_TYPE);
            chkDataType.Add(RFQResponse.RFQ_RES_COL_ASSGN_TO, RFQResponse.RFQ_RES_COL_ASSGN_TO_TYPE);
            chkDataType.Add(RFQResponse.RFQ_RES_COL_NXT_FWUP_DATE, RFQResponse.RFQ_RES_COL_NXT_FWUP_DATE_TYPE);



            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQResponse.updateRFQResponseDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQResponse.updateRFQResponseDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }
        /// <summary>
        /// This method was introduced to handle scenario when it is required to update the NDA document .
        /// If a new file needs to be uploaded/inserted that must be attached to the passed object as a FileUpload
        /// This method will remove the image at the existing server path; If no image alreadt exists it will create the path and put the image/document in server path
        /// </summary>
        /// <returns></returns>
        public static int updateorInsertRFQResponseNDADB(RFQResponse respObj)
        {
            int rowsAffected = 0;
            String pathToUpload = respObj.getNdaPath();

            if (pathToUpload != null && !pathToUpload.Equals(""))
            {
                if (File.Exists(pathToUpload))
                    File.Delete(pathToUpload);
            }
            respObj.setNDADocPathInFileStore(respObj.getRespEntityId());
            pathToUpload = respObj.getNdaPath();

            String cmd = "update " + RFQResponse.RFQ_RESP_TABLE + " set " + RFQResponse.RFQ_RES_COL_NDA + "=" +
                "'" + pathToUpload + "'" + " where " +
                RFQResponse.RFQ_RES_COL_RFQ_ID + "=" + "'" + respObj.getRFQId() + "'" +
                " and " +
                RFQResponse.RFQ_RES_COL_RESP_ENT_ID + "=" + "'" + respObj.getRespEntityId() + "'";

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            FileUpload fileControl = respObj.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(pathToUpload);

            return rowsAffected;
        }
        public String getNextFollowupDate()
        {
            return nextFollowupDate;
        }
        public void setNextFollowupDate(String nextFollowupDate)
        {
            this.nextFollowupDate = nextFollowupDate;
        }
        public String getAssignedTo()
        {
            return assignedTo;
        }
        public void setAssignedTo(String assignedTo)
        {
            this.assignedTo = assignedTo;
        }
    }
    /// <summary>
    /// for any particular RFQ's response object , stores  the respective quote details
    /// this is representative of the database table 'RFQ_Response_Quote_Details'
    /// </summary>
    public class RFQResponseQuotes
    {

        private String RFQId;
        private String responseEntityId;
        private String responseUsrId;
        private String prdCatId;    
        private String quote;
        private String unitName;
        private String productName;

        private static String sessionUser = "";

        public const String RFQ_RES_QUOTE_TABLE = "RFQ_Response_Quote_Details";

        public const String RFQ_RES_QUOTE_COL_RFQ_ID = "RFQ_id";
        public const String RFQ_RES_QUOTE_COL_RESP_COMP_ID = "Response_Cmp_id";
        public const String RFQ_RES_QUOTE_COL_RESP_COMP_USR = "Response_Cmp_Usr_id";
        public const String RFQ_RES_QUOTE_COL_PROD_CAT = "Product_Service_Category";
        public const String RFQ_RES_QUOTE_COL_QUOTE = "Quote";
        public const String RFQ_RES_QUOTE_COL_UNIT_NAME = "unit_name";
        public const String RFQ_RES_QUOTE_COL_PRODUCT_NAME = "product_name";

        public const String RFQ_RES_QUOTE_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_RES_QUOTE_COL_RESP_COMP_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_RES_QUOTE_COL_RESP_COMP_USR_TYPE = Connections.STRING_TYPE;
        public const String RFQ_RES_QUOTE_COL_PROD_CAT_TYPE = Connections.STRING_TYPE;
        public const String RFQ_RES_QUOTE_COL_QUOTE_TYPE = Connections.STRING_TYPE;
        public const String RFQ_RES_QUOTE_COL_UNIT_NAME_TYPE = Connections.STRING_TYPE;
        public const String RFQ_RES_QUOTE_COL_PRODUCT_NAME_TYPE = Connections.STRING_TYPE;

            
        public String getRFQId()
        {
            return RFQId;
        }
        public void setRFQId(String rfId)
        {
            RFQId = rfId;
        }
        public String getResponseEntityId()
        {
            return responseEntityId;
        }
        public void setResponseEntityId(String resEnt)
        {
            responseEntityId = resEnt;
        }
        public String getResponseUsrId()
        {
            return responseUsrId;
        }
        public void setResponseUsrId(String resUsr)
        {
            responseUsrId = resUsr;
        }
        public String getPrdCatId()
        {
            return prdCatId;
        }
        public void setPrdCatId(String prdCat)
        {
            prdCatId = prdCat;
        }
        public String getQuote()
        {
            return quote;
        }
        public void setQuote(String qt)
        {
            quote = qt;
        }
        public String getUnitName()
        {
            return unitName;
        }
        public void setUnitName(String uName)
        {
            unitName = uName;
        }

        public String getProductName()
        {
            return this.productName;
        }

        public void setProductName(String prdNm)
        {
            this.productName = prdNm;
        }

        /// <summary>
        /// for a given response entity id returns all related respone quote objects for RFQs from database
        /// </summary>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static ArrayList getAllResponseQuotesforResponseEntityIdDB(String entId)
        {
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty response entity Id sent to RFQResponseQuotes.getAllResponseQuotesforResponseEntityIdDB"));

            Connections cn = new Connections();
            String query = "select " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID +
                "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PROD_CAT +
                "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_QUOTE +
                "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_USR +
                "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID +
                "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_UNIT_NAME +
                "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PRODUCT_NAME +
                " from " + RFQResponseQuotes.RFQ_RES_QUOTE_TABLE +
                 " where " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID + "='" + entId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempResp = new ArrayList();
            

            foreach (DataRow dr in dt.Rows)
            {
                RFQResponseQuotes temp = new RFQResponseQuotes();

                temp.setResponseEntityId(dr[0].ToString());
                temp.setPrdCatId(dr[1].ToString());
                temp.setQuote(dr[2].ToString());
                temp.setResponseUsrId(dr[3].ToString());
                temp.setRFQId(dr[4].ToString());
                temp.setUnitName(dr[5].ToString());
                temp.setProductName(dr[6].ToString());

                tempResp.Add(temp);

            }
            cn.disconnect();
            return tempResp;
      
        }
        /// <summary>
        /// The key of the returned dictionary is the RFQ id for which there is a response quote record made by the given response entity id
        /// </summary>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static Dictionary<String,bool> getAllRFQWithNonEmptyResponseQuotesforResponseEntityIdDB(String entId)
        {
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty response entity Id sent to RFQResponseQuotes.getAllResponseQuotesforResponseEntityIdDB"));

            Connections cn = new Connections();
            String query = "select " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID + "," +
                RFQResponseQuotes.RFQ_RES_QUOTE_COL_QUOTE +
                " from " + RFQResponseQuotes.RFQ_RES_QUOTE_TABLE +
                 " where " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID + "='" + entId.Trim() + "'" +
                 " and " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_QUOTE + "<>" + "'0'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, bool> tempResp = new Dictionary<String, bool>();


            foreach (DataRow dr in dt.Rows)
            {
                if(!tempResp.ContainsKey(dr[0].ToString()) && dr[1]!=null && !dr[1].ToString().Equals(""))
                tempResp.Add(dr[0].ToString(), true);

            }
            cn.disconnect();
            return tempResp;

        }
        /// <summary>
        /// returns all objects from database for a given RFQ id and the 'response company id'
        /// each record of the returned dictionary contains the 'Product/Service Category Id' as the 'key' and the respective 'RFQResponseQuotes' object as 'value'
        /// </summary>
        /// <param name="rfId"></param>
        /// <param name="entId"></param>
        public static Dictionary<String,RFQResponseQuotes> getAllResponseQuotesforRFQandResponseEntityDB(String rfId,String entId)
        {

            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQResponseQuotes.getAllResponseQuotesforRFQandResponseEntityDB"));
            
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty business entity Id sent to RFQResponseQuotes.getAllResponseQuotesforRFQandResponseEntityDB"));

            Connections cn = new Connections();
            String query = "select " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PROD_CAT +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_QUOTE +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_USR +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_UNIT_NAME +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PRODUCT_NAME +
               " from " + RFQResponseQuotes.RFQ_RES_QUOTE_TABLE +
                " where " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID + "='" + entId.Trim() + "'" +
                " and " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID + "='" + rfId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, RFQResponseQuotes> respQuoteDict = new Dictionary<string, RFQResponseQuotes>();


            foreach (DataRow dr in dt.Rows)
            {
                RFQResponseQuotes tempResp = new RFQResponseQuotes();

                tempResp.setResponseEntityId(dr[0].ToString());
                tempResp.setPrdCatId(dr[1].ToString());
                tempResp.setQuote(dr[2].ToString());
                tempResp.setResponseUsrId(dr[3].ToString());
                tempResp.setRFQId(dr[4].ToString());
                tempResp.setUnitName(dr[5].ToString());
                tempResp.setProductName(dr[6].ToString());

                respQuoteDict.Add(tempResp.getPrdCatId(), tempResp);

            }
            cn.disconnect();
            return respQuoteDict;

        }
        public static Dictionary<String, RFQResponseQuotes> getAllResponseQuotesforRFQandResponseEntityandProdCatIdDB(String rfId, String entId,String catId)
        {

            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQResponseQuotes.getAllResponseQuotesforRFQandResponseEntityDB"));

            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty business entity Id sent to RFQResponseQuotes.getAllResponseQuotesforRFQandResponseEntityDB"));

            Connections cn = new Connections();
            String query = "select " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PROD_CAT +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_QUOTE +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_USR +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_UNIT_NAME +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PRODUCT_NAME +
               " from " + RFQResponseQuotes.RFQ_RES_QUOTE_TABLE +
                " where " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID + "='" + entId.Trim() + "'" +
                " and " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID + "='" + rfId.Trim() + "'"+
                " and " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PROD_CAT + "='" + catId.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, RFQResponseQuotes> respQuoteDict = new Dictionary<string, RFQResponseQuotes>();


            foreach (DataRow dr in dt.Rows)
            {
                RFQResponseQuotes tempResp = new RFQResponseQuotes();

                tempResp.setResponseEntityId(dr[0].ToString());
                tempResp.setPrdCatId(dr[1].ToString());
                tempResp.setQuote(dr[2].ToString());
                tempResp.setResponseUsrId(dr[3].ToString());
                tempResp.setRFQId(dr[4].ToString());
                tempResp.setUnitName(dr[5].ToString());
                tempResp.setProductName(dr[6].ToString());

                respQuoteDict.Add(tempResp.getPrdCatId(), tempResp);

            }
            cn.disconnect();
            return respQuoteDict;

        }
        /// <summary>
        /// for a given RFQ id returns all RFQReponseQuote objects from database.
        /// The 'key' of the returned dictionary is the 'product category id' of the respective RFQ.
        /// </summary>
        /// <param name="rfqId"></param>
        /// <returns></returns>
        public static Dictionary<String, RFQResponseQuotes> getAllResponseQuotesforRFQIdDB(string rfqId)
        {

            if (rfqId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQResponseQuotes.getAllResponseQuotesforRFQIdDB"));

   
            Connections cn = new Connections();
            String query = "select " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PROD_CAT +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_QUOTE +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_USR +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_UNIT_NAME +
               "," + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PRODUCT_NAME +
               " from " + RFQResponseQuotes.RFQ_RES_QUOTE_TABLE +
                " where " + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID + "='" + rfqId.Trim() + "'" ;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, RFQResponseQuotes> respQuoteDict = new Dictionary<string, RFQResponseQuotes>();


            foreach (DataRow dr in dt.Rows)
            {
                RFQResponseQuotes tempResp = new RFQResponseQuotes();

                tempResp.setResponseEntityId(dr[0].ToString());
                tempResp.setPrdCatId(dr[1].ToString());
                tempResp.setQuote(dr[2].ToString());
                tempResp.setResponseUsrId(dr[3].ToString());
                tempResp.setRFQId(dr[4].ToString());
                tempResp.setUnitName(dr[5].ToString());
                tempResp.setProductName(dr[6].ToString());

                respQuoteDict.Add(tempResp.getPrdCatId(), tempResp);

            }
            cn.disconnect();
            return respQuoteDict;

        }
        /// <summary>
        /// inserts the passed 'RFQResponseQuotes' object into the database
        /// </summary>
        /// <param name="rfResp"></param>
        /// <returns></returns>
        public static int insertRFQResponseQuotesDB(RFQResponseQuotes rfResp)
        {
            /* inserts the passed 'RFQResponseQuotes' object into the database
             * 
             * @Author: shibasis sengupta
            */
            if (rfResp.getRFQId().Equals("") || rfResp.getResponseEntityId().Equals("") || rfResp.getPrdCatId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Primary Key missing field value sent to RFQResponseQuotes.insertResponseQuotesDB"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + RFQResponseQuotes.RFQ_RES_QUOTE_TABLE
                + " ("
                + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID + ","
                + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID + ","
                + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PROD_CAT + ","
                + RFQResponseQuotes.RFQ_RES_QUOTE_COL_QUOTE + ","
                + RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_USR + ","
                 + RFQResponseQuotes.RFQ_RES_QUOTE_COL_UNIT_NAME + ","
                + RFQResponseQuotes.RFQ_RES_QUOTE_COL_PRODUCT_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " '" + rfResp.getRFQId() + "'," + "'" +
            rfResp.getResponseEntityId() + "'," + "'" +
            rfResp.getPrdCatId() + "'," + "'" +
            rfResp.getQuote() + "'," + "'" +
            rfResp.getResponseUsrId() + "'," + "'" +
            rfResp.getUnitName() + "'," + "'" +
            rfResp.getProductName() + "'";

            insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the 'RFQ_Response_Quote_Details' database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the RFQ id/Response Company id 
        /// the third parameter contains the type of operation
        /// a delete operation will  not have any cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateRFQResponseQuotesDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* update or delete values in the 'RFQ_Response_Quote_Details' database table
             * the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the RFQ id/Response Company id 
             * the third parameter contains the type of operation
             * a delete operation will  not have any cascading effect on any table
             * 
             * @Author: shibasis sengupta
             */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID, out whereClauseCheck) && !whereClause.TryGetValue(RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - RFQResponseQuotes.updateRFQResponseQuotesDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to RFQResponseQuotes.updateRFQResponseQuotesDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to RFQResponseQuotes.updateRFQResponseQuotesDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + RFQResponseQuotes.RFQ_RES_QUOTE_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + RFQResponseQuotes.RFQ_RES_QUOTE_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(RFQResponseQuotes.RFQ_RES_QUOTE_COL_UNIT_NAME, RFQResponseQuotes.RFQ_RES_QUOTE_COL_UNIT_NAME_TYPE);
            chkDataType.Add(RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID, RFQResponseQuotes.RFQ_RES_QUOTE_COL_RFQ_ID_TYPE);
            chkDataType.Add(RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_USR, RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_USR_TYPE);
            chkDataType.Add(RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID, RFQResponseQuotes.RFQ_RES_QUOTE_COL_RESP_COMP_ID_TYPE);
            chkDataType.Add(RFQResponseQuotes.RFQ_RES_QUOTE_COL_QUOTE, RFQResponseQuotes.RFQ_RES_QUOTE_COL_QUOTE_TYPE);
            chkDataType.Add(RFQResponseQuotes.RFQ_RES_QUOTE_COL_PROD_CAT, RFQResponseQuotes.RFQ_RES_QUOTE_COL_PROD_CAT_TYPE);
            chkDataType.Add(RFQResponseQuotes.RFQ_RES_QUOTE_COL_PRODUCT_NAME, RFQResponseQuotes.RFQ_RES_QUOTE_COL_PRODUCT_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQResponseQuotes.updateRFQResponseQuotesDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQResponseQuotes.updateRFQResponseQuotesDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }

           
            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
       
        }
    }
    /// <summary>
    /// This class is representative of the database object 'RFQ_Broadcast_List'
    /// </summary>
    public class RFQBroadcastList
    {
        private String rfqid;
        /// <summary>
        /// This is the list of entities where the RFQ can be broadcasted.
        /// </summary>
        private ArrayList broadcastList;
        /// <summary>
        /// Setting this value to broadcastList means that this RFQ should be broadcasted to all listed vendors in the site.
        /// </summary>
        public const String RFQ_BROADCAST_TO_ALL = "All";
        /// <summary>
        /// Setting this value to broadcastList means that all interested parties (having business in the same product category) 
        /// will be notified about this RFQ.
        /// </summary>
        public const String RFQ_BROADCAST_TO_ALL_INTERESTED = "All Interested";

        private static String sessionUser = "";

        public const String RFQ_BROADCAST_LIST_TABLE = "RFQ_Broadcast_List";

        public const String RFQ_BROADCAST_LIST_COL_RFQ_ID = "RFQ_id";
        public const String RFQ_BROADCAST_LIST_COL_BROADCAST_TO = "Broadcast_to";

        public const String RFQ_BROADCAST_LIST_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_BROADCAST_LIST_COL_BROADCAST_TO_TYPE = Connections.STRING_TYPE;
        

        public String getRFQId()
        {
            return rfqid;
        }
        public void setRFQId(String rfid)
        {
            rfqid = rfid;
        }
        public ArrayList getBroadcastList()
        {
            return broadcastList;
        }
        public void setBroadcastList(ArrayList bList)
        {
            broadcastList = bList;
        }
        /// <summary>
        /// for a given RFQ id, it returns the respective 'RFQBroadcastList' object from the database.
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static RFQBroadcastList getRFQBroadcastListbyIdDB(String rfId)
        {
            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQBroadcastList.getRFQBroadcastListbyIdDB"));

            Connections cn = new Connections();
            String query = "select " + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID +
                "," + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_BROADCAST_TO +
                " from " + RFQBroadcastList.RFQ_BROADCAST_LIST_TABLE +
                " where " + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID + "='" + rfId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];


            RFQBroadcastList temp = new RFQBroadcastList();
            ArrayList broadList = new ArrayList();
            foreach (DataRow dr in dt.Rows)
            {
                temp.setRFQId(dr[0].ToString());
                broadList.Add(dr[1].ToString());
            }
            temp.setBroadcastList(broadList);

            cn.disconnect();
            return temp;
        
        }
        /// <summary>
        /// Inserts the 'RFQBroadcastList' object details into database
        /// </summary>
        /// <param name="rfqBL"></param>
        /// <returns></returns>
        public static int insertRFQBroadcastListDB(RFQBroadcastList rfqBL)
        {
            if (rfqBL.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQBroadcastList.insertRFQBroadcastListDB"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + RFQBroadcastList.RFQ_BROADCAST_LIST_TABLE
                + " ("
                + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID + ","
                + RFQBroadcastList.RFQ_BROADCAST_LIST_COL_BROADCAST_TO+ ")"
                + "values (";

            Connections cn = new Connections();
            ArrayList broadList = rfqBL.getBroadcastList();
   
            for (int count = 0; count < broadList.Count; count++)
            {
                insertCmd = insertCmd + " '" + rfqBL.getRFQId() + "'," + "'" +
                broadList[count].ToString() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }
            return rowsAffected;
        }
        /// <summary>
        /// update or delete values in the 'RFQ_Broadcast_List' database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the RFQ id
        /// the third parameter contains the type of operation
        /// a delete operation will  have a  cascading effect on all the dependent tables
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateRFQBroadcastListDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - RFQBroadcastList.updateRFQBroadcastListDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to RFQBroadcastList.updateRFQBroadcastListDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to RFQBroadcastList.updateRFQBroadcastListDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + RFQBroadcastList.RFQ_BROADCAST_LIST_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + RFQBroadcastList.RFQ_BROADCAST_LIST_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID, RFQBroadcastList.RFQ_BROADCAST_LIST_COL_RFQ_ID_TYPE);
            chkDataType.Add(RFQBroadcastList.RFQ_BROADCAST_LIST_COL_BROADCAST_TO, RFQBroadcastList.RFQ_BROADCAST_LIST_COL_BROADCAST_TO_TYPE);
           
            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQBroadcastList.updateRFQBroadcastListDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQBroadcastList.updateRFQBroadcastListDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }

            if (operation.Equals(Connections.OPERATION_DELETE))
                cmd += " ";

            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }
    }



    /// <summary>
    /// this class reprents potentials;
    /// all the shortlisted responsed for an RFQ can be represented through objects of this class;
    /// this class represents the backend table ''RFQ_Shortlisted'
    /// </summary>
    public class RFQShortlisted
    {
        private String RFQId;
        private String respEntityId;
        private String potentialId;
        private String createdDate;
        private String finlCustFlag;
        private String finlSupFlag;
        private String createMode;
        private float potenAmnt;
        private String confMat;
        private String potStat;
        private String potActStat;

        private FileUpload fileStream;

        public const String RFQ_SHORTLIST_TABLE = "RFQ_Shortlisted";

        public const String POTENTIAL_ACTIVE_STAT_CLOSED_LOST = "Closed! Lost";
        public const String POTENTIAL_ACTIVE_STAT_CLOSED_WON = "Closed! Won";
        public const String POTENTIAL_ACTIVE_STAT_ACTIVE = "Active";
        public const String POTENTIAL_ACTIVE_STAT_NOT_OPEN = "Not Open";

        public const String POTENTIAL_CREATION_MODE_MANUAL = "Manual";
        public const String POTENTIAL_CREATION_MODE_AUTO = "Auto";

        private static String sessionUser = "";

        public const String RFQ_SHORTLIST_COL_RFQ_ID = "RFQ_id";
        public const String RFQ_SHORTLIST_COL_RESP_ENT_ID = "Response_Cmp_id";
        public const String RFQ_SHORTLIST_COL_POTENTIAL_ID = "Potential_id";
        public const String RFQ_SHORTLIST_COL_DATE_CREATED = "Date_Created";
        public const String RFQ_SHORTLIST_COL_FINL_BY_CUST = "Finalized_By_Customer";
        public const String RFQ_SHORTLIST_COL_FINL_BY_SUPL = "Finalized_By_Supplier";
        public const String RFQ_SHORTLIST_COL_CREATION_MODE = "Creation_Mode";
        public const String RFQ_SHORTLIST_COL_POTENTIAL_AMNT = "Potential_Amount";
        public const String RFQ_SHORTLIST_COL_CONFRM_MATERIAL = "Confirmation_Of_Material_Path";
        public const String RFQ_SHORTLIST_COL_POTENTIAL_STAT = "Potential_Status";
        public const String RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT = "Potential_Active_Status";

        public const String RFQ_SHORTLIST_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_SHORTLIST_COL_RESP_ENT_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_SHORTLIST_COL_POTENTIAL_ID_TYPE = Connections.STRING_TYPE;
        public const String RFQ_SHORTLIST_COL_DATE_CREATED_TYPE = Connections.DATE_TIME_TYPE;
        public const String RFQ_SHORTLIST_COL_FINL_BY_CUST_TYPE = Connections.STRING_TYPE;
        public const String RFQ_SHORTLIST_COL_FINL_BY_SUPL_TYPE = Connections.STRING_TYPE;
        public const String RFQ_SHORTLIST_COL_CREATION_MODE_TYPE = Connections.STRING_TYPE;
        public const String RFQ_SHORTLIST_COL_POTENTIAL_AMNT_TYPE = Connections.NUMBER_TYPE;
        public const String RFQ_SHORTLIST_COL_CONFRM_MATERIAL_TYPE = Connections.STRING_TYPE;
        public const String RFQ_SHORTLIST_COL_POTENTIAL_STAT_TYPE = Connections.STRING_TYPE;
        public const String RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT_TYPE = Connections.STRING_TYPE;


        /// <summary>
        /// This method needs to be passed the main business entity id of the reponse entity id. This method will create a folder structure using that entity id and this objects
        /// RFQ id.
        /// RFQ id must be set to this object before this method is called.
        /// Also, this method will generate a image/doc  id for the image/doc and prepond the image name (as stored with the filestream property) with the id
        /// </summary>
        /// <param name="RespentId"></param>
        public void setConfMatPathInFileStore(String RespentId)
        {
            if (RespentId == null || RespentId.Equals("") || this.getRFQId() == null || this.getRFQId().Equals(""))
                throw new CustomExceptions.businessRuleViolationException("RFQ id and/or entity id not set");
            else
                confMat = this.generateImagePath(RespentId + "\\" + this.getRFQId()) + "\\" + new Id().getNewId(Id.ID_TYPE_IMAGE_ID_STRING) + "_" + this.getFileStream().FileName;

        }
        /// <summary>
        /// Provided a folder path (can have multi-level path also separated by "\\" this method will create the entire
        /// folder structure.
        /// </summary>
        /// <param name="folderName"></param>
        /// <returns></returns>
        public String generateImagePath(String folderName)
        {
            String fileStoreRoot = App.Default.FileStoreRoot;
            String[] delimList = { "\\" };
            String[] subFolders = folderName.Split(delimList, StringSplitOptions.RemoveEmptyEntries);

            String returnPath = "";
            try
            {
                for (int i = 0; i < subFolders.Length; i++)
                    if (!Directory.Exists(fileStoreRoot + "\\" + subFolders[i]))
                    {
                        Directory.CreateDirectory(fileStoreRoot + "\\" + subFolders[i]);
                        fileStoreRoot += "\\" + subFolders[i];
                    }
                    else
                        fileStoreRoot += "\\" + subFolders[i];

                returnPath = fileStoreRoot;
            }
            catch (Exception ex)
            {
                returnPath = "";

            }
            return returnPath;
        }

        public void setConfMatPath(String confPath)
        {
            this.confMat = confPath;
        }

        public String getConfMatPath()
        {
            return this.confMat;
        }

        public FileUpload getFileStream()
        {
            return this.fileStream;
        }

        public void setFileStream(FileUpload fs)
        {
            fileStream = fs;
        }

        public String getRFQId()
        {
            return RFQId;
        }
        public void setRFQId(String rfId)
        {
            RFQId = rfId;
        }
        public String getRespEntityId()
        {
            return respEntityId;
        }
        public void setRespEntityId(String respEnt)
        {
            respEntityId = respEnt;
        }
        public String getPotentialId()
        {
            return potentialId;
        }
        public void setPotentialId(String potId)
        {
            potentialId = potId;
        }
        public String getCreatedDate()
        {
            return createdDate;
        }
        public void setCreatedDate(String crDate)
        {
            createdDate = crDate;
        }
        public String getFinlCustFlag()
        {
            return finlCustFlag;
        }
        /// <summary>
        /// set either 'Y' /'N' for this field
        /// </summary>
        /// <param name="flg"></param>
        public void setFinlCustFlag(String flg)
        {
            if (!"Y".Equals(flg.Trim()) && !"N".Equals(flg.Trim()))
                throw (new CustomExceptions.businessRuleViolationException("Invalid flag value sent to RFQShortlisted.setFinlSupFlag()"));
            finlCustFlag = flg;
        }
        public String getFinlSupFlag()
        {
            return finlSupFlag;
        }
        /// <summary>
        /// set only 'Y'/'N' for this flag
        /// </summary>
        /// <param name="flg"></param>
        public void setFinlSupFlag(String flg)
        {
            if (!"Y".Equals(flg.Trim()) && !"N".Equals(flg.Trim()))
                throw (new CustomExceptions.businessRuleViolationException("Invalid flag value sent to RFQShortlisted.setFinlSupFlag()"));
            finlSupFlag = flg;
        }
        public String getCreateMode()
        {
            return createMode;
        }
        /// <summary>
        /// Creation mode values can only be set to the values as defined by the 'POTENTILA_CRATION_MODE_' values in this class.
        /// </summary>
        /// <param name="cMd"></param>
        public void setCreateMode(String cMd)
        {
            if (!RFQShortlisted.POTENTIAL_CREATION_MODE_AUTO.Equals(cMd.Trim()) && !RFQShortlisted.POTENTIAL_CREATION_MODE_MANUAL.Equals(cMd.Trim()))
                throw (new CustomExceptions.businessRuleViolationException("Invalid potential Creation Mode value sent -RFQShortlisted.setCreateMode()"));
            createMode = cMd;
        }
        public float getPotenAmnt()
        {
            return potenAmnt;
        }
        public void setPotenAmnt(float amnt)
        {
            potenAmnt = amnt;
        }
        /// <summary>
        /// Returns the stage of the potentials - e.g. Prelim/advanced etc.
        /// </summary>
        /// <returns></returns>
        public String getPotStat()
        {
            return potStat;
        }
        /// <summary>
        /// Potential status values can be set only to values as defined in class 'PotentialStatus'.
        /// </summary>
        /// <param name="pStat"></param>
        public void setPotStat(String pStat)
        {
            //if (!PotentialStatus.POTENTIAL_STAT_PRELIM.Equals(pStat) && !PotentialStatus.POTENTIAL_STAT_MEDIUM.Equals(pStat)
                //&& !PotentialStatus.POTENTIAL_STAT_ADVNCD.Equals(pStat))
                //throw (new CustomExceptions.businessRuleViolationException("Invals potential status name passed -RFQShortlisted.setPotStat()"));

            potStat = pStat;
        }
        /// <summary>
        /// Returns the active status of the potential -e.g. active/inactive
        /// </summary>
        /// <returns></returns>
        public String getPotActStat()
        {
            return potActStat;
        }
        /// <summary>
        /// Potential Active status value can only be taken from the list defined in this class
        /// </summary>
        /// <param name="stat"></param>
        public void setPotActStat(String stat)
        {
            if (!RFQShortlisted.POTENTIAL_ACTIVE_STAT_ACTIVE.Equals(stat.Trim()) && !RFQShortlisted.POTENTIAL_ACTIVE_STAT_CLOSED_LOST.Equals(stat.Trim())
                && !RFQShortlisted.POTENTIAL_ACTIVE_STAT_CLOSED_WON.Equals(stat.Trim()) && !RFQShortlisted.POTENTIAL_ACTIVE_STAT_NOT_OPEN.Equals(stat.Trim()))
                throw (new CustomExceptions.businessRuleViolationException("Invalid potential active status sent  - RFQShortlisted.setPotActStat()"));

            potActStat = stat;
        }

        /// <summary>
        /// Inserts one object of the 'RFQShortlisted' class into database
        /// </summary>
        /// <param name="rfShortLst"></param>
        /// <returns></returns>
        public static int insertRFQShorListedEntryDB(RFQShortlisted rfShortLst)
        {

            if (rfShortLst.getRFQId().Equals("") && rfShortLst.getRespEntityId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Primary Key missing field value sent to RFQShortlisted.insertRFQShorListedEntryDB"));


            int rowsAffected = 0;
            String insertCmd = "insert into " + RFQShortlisted.RFQ_SHORTLIST_TABLE
                + " ("
                + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + ","
                + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + ","
                + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT + ","
                + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID + ","
                + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_AMNT + ","
                + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT + ","
                + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL + ","
                + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST + ","
                + RFQShortlisted.RFQ_SHORTLIST_COL_DATE_CREATED + ","
                + RFQShortlisted.RFQ_SHORTLIST_COL_CREATION_MODE + ","
                + RFQShortlisted.RFQ_SHORTLIST_COL_CONFRM_MATERIAL + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd +
                " '" + rfShortLst.getRFQId() + "'," +
                "'" + rfShortLst.getRespEntityId() + "'," +
                "'" + rfShortLst.getPotStat() + "'," +
                "'" + rfShortLst.getPotentialId() + "'," +
                "'" + rfShortLst.getPotenAmnt() + "'," +
                "'" + rfShortLst.getPotActStat() + "'," +
                "'" + rfShortLst.getFinlSupFlag() + "'," +
                "'" + rfShortLst.getFinlCustFlag() + "'," +
                "'" + rfShortLst.getCreatedDate() + "'," +
                "'" + rfShortLst.getCreateMode() + "'," +
                "'" + rfShortLst.getConfMatPath() + "'";
                       insertCmd += ")";

            //execute the insert for each of the state object
            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            FileUpload fileControl = rfShortLst.getFileStream();
            if (fileControl != null && fileControl.HasFile && fileControl.PostedFile.ContentLength > 0)
                fileControl.SaveAs(rfShortLst.getConfMatPath());

            cn.disconnect();
            return rowsAffected;
                  
        }
        /// <summary>
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateRFQShortListedEntryDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";
            String rfId="",respEntId="";
            

            //if (!whereClause.TryGetValue(RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID, out whereClauseCheck) && !whereClause.TryGetValue(RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID, out whereClauseCheck))
                //throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - RFQShortlisted.updateRFQShortListedEntryDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to RFQShortlisted.updateRFQShortListedEntryDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to RFQShortlisted.updateRFQShortListedEntryDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + RFQShortlisted.RFQ_SHORTLIST_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID, RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID_TYPE);
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID, RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID_TYPE);
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT, RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT_TYPE);
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID, RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID_TYPE);
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_AMNT, RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_AMNT_TYPE);
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT, RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT_TYPE);
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL, RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL_TYPE);
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST, RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST_TYPE);
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_CREATION_MODE, RFQShortlisted.RFQ_SHORTLIST_COL_CREATION_MODE_TYPE);
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_CONFRM_MATERIAL, RFQShortlisted.RFQ_SHORTLIST_COL_CONFRM_MATERIAL_TYPE);
            chkDataType.Add(RFQShortlisted.RFQ_SHORTLIST_COL_DATE_CREATED, RFQShortlisted.RFQ_SHORTLIST_COL_DATE_CREATED_TYPE);
            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                
                //If the potential is finalized by customer also, then the deal is closed
                //Because the vendor have already finalized from his side before the customer
                if (targetValue.ContainsKey(RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST))
                {
                    if (!targetValue.ContainsKey(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT))                    
                        targetValue.Add(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT, RFQShortlisted.POTENTIAL_ACTIVE_STAT_CLOSED_WON);
                    if (!targetValue.ContainsKey(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT))
                        targetValue.Add(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT, RFQShortlisted.POTENTIAL_ACTIVE_STAT_CLOSED_WON); 
                   
                    //Because the current design of the update method does allow any other operator other than = , first update rfqshortlisted entries for all related potentials for this RFQ
                    //then again re-update the potential entry for the entity which won the deal
                    rfId = whereClause[RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID];
                    respEntId = whereClause[RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID];

                    Dictionary<String,String> whereClsAll=new Dictionary<String,String>();
                    whereClsAll.Add(RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID,rfId);

                    Dictionary<String,String> targetClsAll=new Dictionary<String,String>();
                    targetClsAll.Add(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT,RFQShortlisted.POTENTIAL_ACTIVE_STAT_CLOSED_LOST);
                    targetClsAll.Add(RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT,RFQShortlisted.POTENTIAL_ACTIVE_STAT_CLOSED_LOST);

                    RFQShortlisted.updateRFQShortListedEntryDB(targetClsAll,whereClsAll,DBConn.Connections.OPERATION_UPDATE);

                    //Update the active status of the RFQ
                    Dictionary<String,String> updateRFQwhereVal=new Dictionary<string,string>();
                    updateRFQwhereVal.Add(RFQDetails.RFQ_COL_RFQ_ID,rfId);
                    Dictionary<String,String> updateRFQtargetVal=new Dictionary<string,string>();
                    updateRFQtargetVal.Add(RFQDetails.RFQ_COL_ACTIVE_STAT,RFQDetails.RFQ_ACTIVE_STAT_DEAL_CLOSED);

                    RFQDetails.updateRFQDetailsDB(updateRFQtargetVal,updateRFQwhereVal,Connections.OPERATION_UPDATE);
                }

                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQShortlisted.updateRFQShortListedEntryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQShortlisted.updateRFQShortListedEntryDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();
                        

            return rowsAffected;
        }
        /// <summary>
        /// for a given response entity id, it return an arraylist of 'RFQShorlisted' (Potential) objects from the database
        /// </summary>
        /// <param name="RespentId"></param>
        /// <returns></returns>
        public static ArrayList getAllRFQShortListedbyEntityIdDB(String RespentId)
        {
            if (RespentId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity Id sent to RFQShortlisted.getAllRFQShortListedbyEntityIdDB"));

            Connections cn = new Connections();
            String query = "select " 
                +"rs."+ RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + ","
                + "rs."+RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + ","
                + "rs."+RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT + ","
                + "rs."+RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID + ","
                + "rs."+RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_AMNT + ","
                + "rs."+RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT + ","
                + "rs."+RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL + ","
                + "rs."+RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST + ","
                + "rs."+RFQShortlisted.RFQ_SHORTLIST_COL_DATE_CREATED + ","
                + "rs."+RFQShortlisted.RFQ_SHORTLIST_COL_CREATION_MODE + ","
                + "rs."+RFQShortlisted.RFQ_SHORTLIST_COL_CONFRM_MATERIAL+
                " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE + " rs "+
                 " where " +
                /*+ " rs,"+ RFQDetails.RFQ_TABLE+" rfq"+
                " where " 
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfq." + RFQDetails.RFQ_COL_RFQ_ID
                +" and "*/
                RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "='" + RespentId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            ArrayList potList = new ArrayList();


            foreach (DataRow dr in dt.Rows)
            {
                RFQShortlisted tempPot = new RFQShortlisted();

                tempPot.setRFQId(dr[0].ToString());
                tempPot.setRespEntityId(dr[1].ToString());
                tempPot.setPotStat(dr[2].ToString());
                tempPot.setPotentialId(dr[3].ToString());
                tempPot.setPotenAmnt(float.Parse(dr[4].ToString()));
                tempPot.setPotActStat(dr[5].ToString());
                tempPot.setFinlSupFlag(dr[6].ToString());
                tempPot.setFinlCustFlag(dr[7].ToString());
                tempPot.setCreatedDate(dr[8].ToString());
                tempPot.setCreateMode(dr[9].ToString());
                tempPot.setConfMatPath(dr[10].ToString());

                // tempReq.setReqSpecs(new ArrayList());
                potList.Add(tempPot);

            }
            cn.disconnect();
            return potList;
        }
        /// <summary>
        /// Returns the RFQ id list for all RFQs for whifch the given response entity id is shortlisted
        /// </summary>
        /// <param name="RespentId"></param>
        /// <returns></returns>
        public static ArrayList getAllRFQShortListedbyEntityIdOnlyRFQIdListDB(String RespentId)
        {
            if (RespentId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity Id sent to RFQShortlisted.getAllRFQShortListedbyEntityIdDB"));

            Connections cn = new Connections();
            String query = "select "
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID +
                " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE + " rs " +
                 " where " +
                /*+ " rs,"+ RFQDetails.RFQ_TABLE+" rfq"+
                " where " 
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfq." + RFQDetails.RFQ_COL_RFQ_ID
                +" and "*/
                RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "='" + RespentId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            ArrayList potList = new ArrayList();


            foreach (DataRow dr in dt.Rows)
            {
                //RFQShortlisted tempPot = new RFQShortlisted();

                //tempPot.setRFQId(dr[0].ToString());
                // tempReq.setReqSpecs(new ArrayList());
                potList.Add(dr[0].ToString());

            }
            cn.disconnect();
            return potList;
        }
        /// <summary>
        /// For a given reponse entity id and assigned to user this method returns all the entries which are assigned to this given user and belongs to this
        /// response entity id
        /// </summary>
        /// <param name="RespentId"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        public static ArrayList getAllRFQShortListedbyEntityIdAndAssignedToUser(String RespentId, String userId)
        {
            if (RespentId.Equals("")|| userId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Id sent to RFQShortlisted.getAllRFQShortListedbyEntityIdAndAssignedToUser"));

            Connections cn = new Connections();
            String query = "select "
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_AMNT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_DATE_CREATED + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CREATION_MODE + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CONFRM_MATERIAL +
                " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE + " rs, " + RFQResponse.RFQ_RESP_TABLE + " rsP" +
                 " where rs." +
                /*+ " rs,"+ RFQDetails.RFQ_TABLE+" rfq"+
                " where " 
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfq." + RFQDetails.RFQ_COL_RFQ_ID
                +" and "*/
                RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "='" + RespentId.Trim() + "'" +
                " and rs."+RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT+"='"+RFQShortlisted.POTENTIAL_ACTIVE_STAT_ACTIVE+"'"+
                " and rsP." + RFQResponse.RFQ_RES_COL_RFQ_ID + "=" + " rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID +
                " and rsP." + RFQResponse.RFQ_RES_COL_ASSGN_TO + "='" + userId.Trim() + "'";
                

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            ArrayList potList = new ArrayList();


            foreach (DataRow dr in dt.Rows)
            {
                RFQShortlisted tempPot = new RFQShortlisted();

                tempPot.setRFQId(dr[0].ToString());
                tempPot.setRespEntityId(dr[1].ToString());
                tempPot.setPotStat(dr[2].ToString());
                tempPot.setPotentialId(dr[3].ToString());
                tempPot.setPotenAmnt(float.Parse(dr[4].ToString()));
                tempPot.setPotActStat(dr[5].ToString());
                tempPot.setFinlSupFlag(dr[6].ToString());
                tempPot.setFinlCustFlag(dr[7].ToString());
                tempPot.setCreatedDate(dr[8].ToString());
                tempPot.setCreateMode(dr[9].ToString());
                tempPot.setConfMatPath(dr[10].ToString());

                // tempReq.setReqSpecs(new ArrayList());
                potList.Add(tempPot);

            }
            cn.disconnect();
            return potList;
        }

        /// <summary>
        /// For a given response entity id and a RFQ id this method returns the RFQShortlisted object from database
        /// </summary>
        /// <param name="RespentId"></param>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static RFQShortlisted getRFQShortlistedbyRespEntandRFQId(String RespentId,String rfId)
        {
            if (RespentId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Response entity Id sent to RFQShortlisted.getRFQShortlistedbyRespEntandRFQId"));
            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQShortlisted.getRFQShortlistedbyRespEntandRFQId"));

            Connections cn = new Connections();
            String query = "select "
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_AMNT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_DATE_CREATED + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CREATION_MODE + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CONFRM_MATERIAL +
                " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE + " rs" +
                " where "
                  + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "='" + RespentId.Trim() + "'" + " and "
                  + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "='" + rfId.Trim() + "'";
                  

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            RFQShortlisted tempPot = new RFQShortlisted();

            foreach (DataRow dr in dt.Rows)
            {
                tempPot.setRFQId(dr[0].ToString());
                tempPot.setRespEntityId(dr[1].ToString());
                tempPot.setPotStat(dr[2].ToString());
                tempPot.setPotentialId(dr[3].ToString());
                tempPot.setPotenAmnt(float.Parse(dr[4].ToString()));
                tempPot.setPotActStat(dr[5].ToString());
                tempPot.setFinlSupFlag(dr[6].ToString());
                tempPot.setFinlCustFlag(dr[7].ToString());
                tempPot.setCreatedDate(dr[8].ToString());
                tempPot.setCreateMode(dr[9].ToString());
                tempPot.setConfMatPath(dr[10].ToString());

            }
            cn.disconnect();
            return tempPot;
        }
        /// <summary>
        /// For a given potential id returns the respective 'RFQShortlisted' object from database
        /// </summary>
        /// <param name="potnId"></param>
        /// <returns></returns>
        public static RFQShortlisted getAllRFQShortListedbyPotentialIdDB(String potnId)
        {
            if (potnId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty Potential Id sent to RFQShortlisted.getAllRFQShortListedbyPotentialIdDB"));

            Connections cn = new Connections();
            String query = "select "
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_AMNT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CREATION_MODE + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_DATE_CREATED + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CONFRM_MATERIAL +
                " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE + " rs" + 
                " where "
                  + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID + "='" + potnId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            
            RFQShortlisted tempPot = new RFQShortlisted();

            foreach (DataRow dr in dt.Rows)
            {
                tempPot.setRFQId(dr[0].ToString());
                tempPot.setRespEntityId(dr[1].ToString());
                tempPot.setPotStat(dr[2].ToString());
                tempPot.setPotentialId(dr[3].ToString());
                tempPot.setPotenAmnt(float.Parse(dr[4].ToString()));
                tempPot.setPotActStat(dr[5].ToString());
                tempPot.setFinlSupFlag(dr[6].ToString());
                tempPot.setFinlCustFlag(dr[7].ToString());
                tempPot.setCreateMode(dr[8].ToString());
                tempPot.setCreatedDate(dr[9].ToString());
                tempPot.setConfMatPath(dr[10].ToString());

            }
            cn.disconnect();
            return tempPot;
        }
        /// <summary>
        /// for a given RFQ id, this method returns all the 'RFQShortlisted' entries from database.
        /// The return value is an Arraylist of 'RFQShortlisted' entries.
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static ArrayList getAllShortListedEntriesbyRFQId(String rfId)
        {
            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to RFQShortlisted.getAllShortListedEntriesbyRFQId"));

            Connections cn = new Connections();
            String query = "select "
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_AMNT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_DATE_CREATED + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CREATION_MODE + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CONFRM_MATERIAL +
                " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE +" rs "+
                 " where " +
                /*+ " rs,"+ RFQDetails.RFQ_TABLE+" rfq"+
                " where " 
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "=" + "rfq." + RFQDetails.RFQ_COL_RFQ_ID
                +" and "*/
                RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "='" + rfId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            ArrayList potList = new ArrayList();


            foreach (DataRow dr in dt.Rows)
            {
                RFQShortlisted tempPot = new RFQShortlisted();

                tempPot.setRFQId(dr[0].ToString());
                tempPot.setRespEntityId(dr[1].ToString());
                tempPot.setPotStat(dr[2].ToString());
                tempPot.setPotentialId(dr[3].ToString());
                tempPot.setPotenAmnt(float.Parse(dr[4].ToString()));
                tempPot.setPotActStat(dr[5].ToString());
                tempPot.setFinlSupFlag(dr[6].ToString());
                tempPot.setFinlCustFlag(dr[7].ToString());
                tempPot.setCreatedDate(dr[8].ToString());
                tempPot.setCreateMode(dr[9].ToString());
                tempPot.setConfMatPath(dr[10].ToString());

                // tempReq.setReqSpecs(new ArrayList());
                potList.Add(tempPot);

            }
            cn.disconnect();
            return potList;
        }
        /// <summary>
        /// For a given response entity id and RFQ id, this method returns the respective record from database for the finalized Potential entry.
        /// </summary>
        /// <param name="respEntId"></param>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static RFQShortlisted getRFQShortlistedEntryforFinalizedVendor(String rfId)
        {
            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty rfq Id sent to RFQShortlisted.getRFQShortlistedEntryforFinalizedVendor"));

            Connections cn = new Connections();
            String query = "select "
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_AMNT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_DATE_CREATED + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CREATION_MODE + ","
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CONFRM_MATERIAL +
                " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE + " rs" +
                " where "
                  + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + "='" + rfId.Trim() + "'"
                  + " and "
                  + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL + "='" + "Y"+"'"
                  + " and "
                  + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST + "='" + "Y" +"'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            RFQShortlisted tempPot = new RFQShortlisted();

            foreach (DataRow dr in dt.Rows)
            {
                tempPot.setRFQId(dr[0].ToString());
                tempPot.setRespEntityId(dr[1].ToString());
                tempPot.setPotStat(dr[2].ToString());
                tempPot.setPotentialId(dr[3].ToString());
                tempPot.setPotenAmnt(float.Parse(dr[4].ToString()));
                tempPot.setPotActStat(dr[5].ToString());
                tempPot.setFinlSupFlag(dr[6].ToString());
                tempPot.setFinlCustFlag(dr[7].ToString());
                tempPot.setCreateMode(dr[9].ToString());
                tempPot.setCreatedDate(dr[8].ToString());
                tempPot.setConfMatPath(dr[10].ToString());

            }
            cn.disconnect();
            return tempPot;
        }

        /// <summary>
        /// For a given response entity id this method returns a list of RFQShortlisted objects which this entity has won
        /// Key is the rfq id
        /// </summary>
        /// <param name="respEntId"></param>
        /// <returns></returns>
        public static Dictionary<String,RFQShortlisted> getAllRFQShortlistedEntriesforFinalizedVendor(String respEntId)
        {

            Connections cn = new Connections();
            String query = "select "
                + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RFQ_ID + ","
                 + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + ","
                 + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT + ","
                 + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ID + ","
                 + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_AMNT + ","
                 + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_ACTIVE_STAT + ","
                 + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL + ","
                 + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST + ","
                 + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_DATE_CREATED + ","
                 + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CREATION_MODE + ","
                 + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_CONFRM_MATERIAL +
                " from " + RFQShortlisted.RFQ_SHORTLIST_TABLE + " rs" +
                " where "
                  + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_RESP_ENT_ID + "='" + respEntId.Trim() + "'"
                  + " and "
                  + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_POTENTIAL_STAT + "='" + RFQShortlisted.POTENTIAL_ACTIVE_STAT_CLOSED_WON + "'";
                  /*+ "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_SUPL + "='" + "Y" + "'"
                  + " and "
                  + "rs." + RFQShortlisted.RFQ_SHORTLIST_COL_FINL_BY_CUST + "='" + "Y" + "'";*/

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, RFQShortlisted> returnList = new Dictionary<string, RFQShortlisted>();
            //RFQShortlisted tempPot = new RFQShortlisted();

            foreach (DataRow dr in dt.Rows)            {
                

                RFQShortlisted tempPot = new RFQShortlisted();
                tempPot.setRFQId(dr[0].ToString());
                tempPot.setRespEntityId(dr[1].ToString());
                tempPot.setPotStat(dr[2].ToString());
                tempPot.setPotentialId(dr[3].ToString());
                tempPot.setPotenAmnt(float.Parse(dr[4].ToString()));
                tempPot.setPotActStat(dr[5].ToString());
                tempPot.setFinlSupFlag(dr[6].ToString());
                tempPot.setFinlCustFlag(dr[7].ToString());
                tempPot.setCreateMode(dr[9].ToString());
                tempPot.setCreatedDate(dr[8].ToString());
                tempPot.setConfMatPath(dr[10].ToString());

                returnList.Add(dr[0].ToString(),tempPot);

            }
            cn.disconnect();
            return returnList;
        }
    }
    /// <summary>
    /// defines the RFQ Active Status list;
    /// this class represents the backend table 'RFQ_Active_Status'
    /// </summary>
    public class RFQActiveStat
    {
        private String activeStatName;

        public const String RFQ_ACTIVE_STAT_ACTIVE = "Active";
        public const String RFQ_ACTIVE_STAT_NOT_OPEN = "Not Open";
        public const String RFQ_ACTIVE_STAT_CLOSED = "Closed";

        private static String sessionUser = "";
        
        public const String RFQ_ACTIVE_STAT_TABLE = "RFQ_Active_Status";

        public const String RFQ_ACTIVE_STAT_COL_STAT_NAME = "active_status_name";

        public const String RFQ_ACTIVE_STAT_COL_STAT_NAME_TYPE = Connections.STRING_TYPE;

        public String getActiveStatName()
        {
            return activeStatName;
        }
        public void setActiveStatName(String aStat)
        {
            if (aStat == null)
                throw (new CustomExceptions.invalidParamException("null status name sent to method RFQActiveStat.setActiveStatName"));
            if (!aStat.Equals(RFQActiveStat.RFQ_ACTIVE_STAT_ACTIVE) && !aStat.Equals(RFQActiveStat.RFQ_ACTIVE_STAT_CLOSED) && !aStat.Equals(RFQActiveStat.RFQ_ACTIVE_STAT_NOT_OPEN))
                throw (new CustomExceptions.businessRuleViolationException("active status value invalid .. select from pre-dfined values in RFQActiveStat class"));

            activeStatName = aStat;
        }

        /// <summary>
        /// returns all the active status values from the database in an arraylist
        /// each element of the arraylist is an object of the class 'RFQActiveStat'
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllActiveStatNamesDB()
        {
            Connections cn = new Connections();
            String query = "select " + RFQActiveStat.RFQ_ACTIVE_STAT_COL_STAT_NAME +
                     " from " + RFQActiveStat.RFQ_ACTIVE_STAT_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();
            
            foreach (DataRow dr in dt.Rows)
            {
                RFQActiveStat temp = new RFQActiveStat();
                temp.setActiveStatName(dr[0].ToString());
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;
      
        }
        /// <summary>
        /// verifies from the database whether the passed parameter is a valid active status in the database
        /// if found it returns a 'true' else returns a 'false'
        /// </summary>
        /// <param name="stName"></param>
        /// <returns></returns>
        public static Boolean isActiveStatValidDB(String stName)
        {
            Connections cn = new Connections();
            String query = "select " + RFQActiveStat.RFQ_ACTIVE_STAT_COL_STAT_NAME +
                     " from " + RFQActiveStat.RFQ_ACTIVE_STAT_TABLE +
                     " where " + RFQActiveStat.RFQ_ACTIVE_STAT_COL_STAT_NAME + "=" + "'" + stName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;
      
        }
        /// <summary>
        /// the parameter is a list of 'RFQActiveStat' objects
        /// each of these object is inserted into the database
        /// </summary>
        /// <param name="stList"></param>
        /// <returns></returns>
        public static int insertActiveStatDB(ArrayList stList)
        {
            if (stList.Count==0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to RFQActiveStat.insertActiveStatDB"));

            ArrayList statList = stList;
            int counter=0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + RFQActiveStat.RFQ_ACTIVE_STAT_TABLE
                + " ("
                + RFQActiveStat.RFQ_ACTIVE_STAT_COL_STAT_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < stList.Count)
            {
                RFQActiveStat obj = (RFQActiveStat)stList[counter];
                insertCmd = insertCmd + " '" + obj.getActiveStatName() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the 'RFQ_Active_Status' database table
        /// the first paramter contains column name - taget value pair
        ///  the second parameter contains column name - target value as where clause - note that this where clause must contain the 'active_status_name'
        ///  the third parameter contains the type of operation
        ///  a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateActiveStatDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            /* update or delete values in the 'RFQ_Active_Status' database table
             * the first paramter contains column name - taget value pair
             * the second parameter contains column name - target value as where clause - note that this where clause must contain the 'active_status_name'
             * the third parameter contains the type of operation
             * a delete operation will  have no  cascading effect on any table
             * 
             * @Author: shibasis sengupta
            */

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(RFQActiveStat.RFQ_ACTIVE_STAT_COL_STAT_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - RFQActiveStat.updateActiveStatDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to RFQActiveStat.updateActiveStatDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to RFQActiveStat.updateActiveStatDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + RFQActiveStat.RFQ_ACTIVE_STAT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + RFQActiveStat.RFQ_ACTIVE_STAT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(RFQActiveStat.RFQ_ACTIVE_STAT_COL_STAT_NAME, RFQActiveStat.RFQ_ACTIVE_STAT_COL_STAT_NAME_TYPE);
            

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQActiveStat.updateActiveStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQActiveStat.updateActiveStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
       
        }
    }
    /// <summary>
    /// this class is representative of the database object 'RFQ_Approval_Status'
    /// </summary>
    public class RFQApprovalStat
    {
        private String apprStatName;

        /// <summary>
        /// Using this value for approval status means that the RFQ is approved.
        /// </summary>
        public const String RFQ_APPROVAL_STAT_APPROVED = "Approved";
        /// <summary>
        /// using this value for approval status means tha the RFQ is rejected by the approver
        /// </summary>
        public const String RFQ_APPROVAL_STAT_REJECTED = "Rejected by Approver";

        private static String sessionUser = "";

        public const String RFQ_APPRV_STAT_TABLE = "RFQ_Approval_Status";

        public const String RFQ_APPRV_STAT_COL_STAT_NAME = "approval_status_name";

        public const String RFQ_APPRV_STAT_COL_STAT_NAME_TYPE = Connections.STRING_TYPE;

        public String getApprStatName()
        {
            return apprStatName;
        }
        public void setApprStatName(String sName)
        {
            apprStatName = sName;
        }
        /// <summary>
        /// returns all data from the database object 'RFQApprovalStat' 
        /// each lelment of the arraylist is an object of type 'RFQApprovalStat'
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllApprovalStatDB()
        {
            Connections cn = new Connections();
            String query = "select " + RFQApprovalStat.RFQ_APPRV_STAT_COL_STAT_NAME +
                     " from " + RFQApprovalStat.RFQ_APPRV_STAT_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                RFQApprovalStat temp = new RFQApprovalStat();
                temp.setApprStatName(dr[0].ToString());
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;
      
        }
        /// <summary>
        /// returns true if the passed paramter is a valid approval status, else returns false
        /// </summary>
        /// <param name="stName"></param>
        /// <returns></returns>
        public static Boolean isApprovalStatValidDB(String stName)
        {
            Connections cn = new Connections();
            String query = "select " + RFQApprovalStat.RFQ_APPRV_STAT_COL_STAT_NAME +
                     " from " + RFQApprovalStat.RFQ_APPRV_STAT_TABLE +
                     " where " + RFQApprovalStat.RFQ_APPRV_STAT_COL_STAT_NAME + "=" + "'" + stName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;
      
        }
        /// <summary>
        /// inserts all the objects from the arraylist into the database
        /// </summary>
        /// <param name="stList"></param>
        /// <returns></returns>
        public static int InsertApprovalStatDB(ArrayList stList)
        {
            if (stList.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to RFQApprovalStat.InsertApprovalStatDB"));

            ArrayList statList = stList;
            int counter = 0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + RFQApprovalStat.RFQ_APPRV_STAT_TABLE
                + " ("
                + RFQApprovalStat.RFQ_APPRV_STAT_COL_STAT_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < stList.Count)
            {
                RFQApprovalStat obj = (RFQApprovalStat)stList[counter];
                insertCmd = insertCmd + " '" + obj.getApprStatName() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the 'RFQ_Approval_Status' database table
        /// the first paramter contains column name - taget value pair
        ///  the second parameter contains column name - target value as where clause - note that this where clause must contain the 'approval_status_name'
        ///  the third parameter contains the type of operation
        ///  a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateApprovalStatDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(RFQApprovalStat.RFQ_APPRV_STAT_COL_STAT_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - RFQApprovalStat.updateApprovalStatDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to RFQApprovalStat.updateApprovalStatDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to RFQApprovalStat.updateApprovalStatDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + RFQApprovalStat.RFQ_APPRV_STAT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + RFQApprovalStat.RFQ_APPRV_STAT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(RFQApprovalStat.RFQ_APPRV_STAT_COL_STAT_NAME, RFQApprovalStat.RFQ_APPRV_STAT_COL_STAT_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQApprovalStat.updateApprovalStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to RFQApprovalStat.updateApprovalStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
       
        }

    }
    /// <summary>
    /// this class is represtative of the database object 'Delivery_Status'
    /// </summary>
    public class DeliveryStat
    {
        private String deliveryStatName;

        private static String sessionUser = "";

        public const String DELIV_STAT_TABLE = "Delivery_Status";

        public const String DELIV_STAT_COL_STAT_NAME = "delivery_status_name";

        public const String DELIV_STAT_COL_STAT_NAME_TYPE = Connections.STRING_TYPE;

        public const String DELIV_STAT_DELIVERED = "Delivered";
        public const String DELIV_STAT_UNDELIVERED = "Undelivered";


        public String getDeliveryStatName()
        {
            return deliveryStatName;
        }
        public void setDeliveryStatName(String dStat)
        {
            deliveryStatName = dStat;
        }
        /// <summary>
        /// returns all delivery status from database
        /// each member of this arraylist is an object of type 'DeliveryStat'
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllDeliveryStatDB()
        {
            Connections cn = new Connections();
            String query = "select " + DeliveryStat.DELIV_STAT_COL_STAT_NAME +
                     " from " + DeliveryStat.DELIV_STAT_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DeliveryStat temp = new DeliveryStat();
                temp.setDeliveryStatName(dr[0].ToString());
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;
      
        }
        /// <summary>
        /// if the passed delivery status name is found in the database it returns a 'true', else it returns 'false'
        /// </summary>
        /// <param name="stName"></param>
        /// <returns></returns>
        public static Boolean isDeliveryStatValidDB(String stName)
        {
            Connections cn = new Connections();
            String query = "select " + DeliveryStat.DELIV_STAT_COL_STAT_NAME +
                     " from " + DeliveryStat.DELIV_STAT_TABLE +
                     " where " + DeliveryStat.DELIV_STAT_COL_STAT_NAME + "=" + "'" + stName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;
      
        }
        /// <summary>
        /// inserts all the delivery status objects passed through the arraylist in database
        /// </summary>
        /// <param name="stList"></param>
        /// <returns></returns>
        public static int insertDeliveryStatDB(ArrayList stList)
        {
            if (stList.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to DeliveryStat.insertDeliveryStatDB"));

            ArrayList statList = stList;
            int counter = 0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + DeliveryStat.DELIV_STAT_TABLE
                + " ("
                + DeliveryStat.DELIV_STAT_COL_STAT_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < stList.Count)
            {
                DeliveryStat obj = (DeliveryStat)stList[counter];
                insertCmd = insertCmd + " '" + obj.getDeliveryStatName() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the 'Delivery_Status' database table
        /// the first paramter contains column name - taget value pair
        ///  the second parameter contains column name - target value as where clause - note that this where clause must contain the 'delivery_status_name'
        ///  the third parameter contains the type of operation
        ///  a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateDeliveryStatDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(DeliveryStat.DELIV_STAT_COL_STAT_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - DeliveryStat.updateDeliveryStatDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to DeliveryStat.updateDeliveryStatDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to DeliveryStat.updateDeliveryStatDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + DeliveryStat.DELIV_STAT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + DeliveryStat.DELIV_STAT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(DeliveryStat.DELIV_STAT_COL_STAT_NAME, DeliveryStat.DELIV_STAT_COL_STAT_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DeliveryStat.updateDeliveryStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DeliveryStat.updateDeliveryStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
       
        }
    }
    /// <summary>
    /// this class is representative of the database object 'Payment_Status'
    /// </summary>
    public class PaymentStat
    {
        private String paymentStatName;

        public String getPaymentStatName()
        {
            return paymentStatName;
        }
        public void setPaymentStatName(String pStat)
        {
            paymentStatName = pStat;
        }

        private static String sessionUser = "";

        public const String PAYMENT_STAT_TABLE = "Payment_Status";

        public const String PAYMENT_STAT_COL_STAT_NAME = "payment_status_name";

        public const String PAYMENT_STAT_COL_STAT_NAME_TYPE = Connections.STRING_TYPE;

        public const String PAYMENT_STAT_INCOMPLETE = "Incomplete";
        public const String PATMENT_STAT_COMPLETE = "Complete";

        /// <summary>
        /// returns all the 'PaymentStat' objects from database
        /// each member of the returned arraylist is an object of 'PaymentStat'
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllPaymentStatDB()
        {
            Connections cn = new Connections();
            String query = "select " + PaymentStat.PAYMENT_STAT_COL_STAT_NAME +
                     " from " + PaymentStat.PAYMENT_STAT_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                PaymentStat temp = new PaymentStat();
                temp.setPaymentStatName(dr[0].ToString());
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;
      
        }
        /// <summary>
        /// verifies if the passed payment status is a valid status
        /// returns true if this is available in database , else returns false
        /// </summary>
        /// <param name="stName"></param>
        /// <returns></returns>
        public static Boolean isPaymentStatValidDB(String stName)
        {
            Connections cn = new Connections();
            String query = "select " + PaymentStat.PAYMENT_STAT_COL_STAT_NAME +
                     " from " + PaymentStat.PAYMENT_STAT_TABLE +
                     " where " + PaymentStat.PAYMENT_STAT_COL_STAT_NAME + "=" + "'" + stName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;

        }
        /// <summary>
        /// inserts all the PaymentStat objects from the ArrayList into database
        /// </summary>
        /// <param name="stList"></param>
        /// <returns></returns>
        public static int insertPaymentStatDB(ArrayList stList)
        {
            if (stList.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to PaymentStat.insertPaymentStatDB"));

            ArrayList statList = stList;
            int counter = 0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + PaymentStat.PAYMENT_STAT_TABLE
                + " ("
                + PaymentStat.PAYMENT_STAT_COL_STAT_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < stList.Count)
            {
                PaymentStat obj = (PaymentStat)stList[counter];
                insertCmd = insertCmd + " '" + obj.getPaymentStatName() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the 'Payment_Status' database table
        /// the first paramter contains column name - taget value pair
        ///  the second parameter contains column name - target value as where clause - note that this where clause must contain the 'payment_status_name'
        ///  the third parameter contains the type of operation
        ///  a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updatePaymentStatDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(PaymentStat.PAYMENT_STAT_COL_STAT_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - PaymentStat.updatePaymentStatDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to PaymentStat.updatePaymentStatDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to PaymentStat.updatePaymentStatDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + PaymentStat.PAYMENT_STAT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + PaymentStat.PAYMENT_STAT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(PaymentStat.PAYMENT_STAT_COL_STAT_NAME, PaymentStat.PAYMENT_STAT_COL_STAT_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PaymentStat.updatePaymentStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PaymentStat.updatePaymentStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }

    }
    /// <summary>
    /// this class is representative of the database object 'Payment_Type'
    /// </summary>
    public class PaymentType
    {
        private String paymentType;

        public String getPaymentType()
        {
            return paymentType;
        }
        public void setPaymentType(String pType)
        {
            paymentType = pType;
        }

        private static String sessionUser = "";

        public const String PAYMENT_TYPE_TABLE = "Payment_Type";

        public const String PAYMENT_TYPE_COL_TYPE_NAME = "payment_type_name";

        public const String PAYMENT_TYPE_COL_TYPE_NAME_TYPE = Connections.STRING_TYPE;

        public const String PAYMENT_TYPE_CHEQUE = "Cheque";
        public const String PAYMENT_TYPE_CASH = "Cash";
        public const String PAYMENT_TYPE_CREDIT_CARD = "Credit Card";
        public const String PAYMENT_TYPE_DEBIT_CARD = "Debit Card";
        public const String PAYMENT_TYPE_NET_BANKING = "Net Banking";


        /// <summary>
        /// get all PaymentType objects from the database
        /// each emember of the arraylist is an object of type 'PaymentType'
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllPaymentTypeDB()
        {
            Connections cn = new Connections();
            String query = "select " + PaymentType.PAYMENT_TYPE_COL_TYPE_NAME +
                     " from " + PaymentType.PAYMENT_TYPE_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                PaymentType temp = new PaymentType();
                temp.setPaymentType(dr[0].ToString());
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;

        }
        /// <summary>
        /// verifies if the passed payment type name is available in the database or not
        /// if found, returns 'true' else 'false'
        /// </summary>
        /// <param name="tpName"></param>
        /// <returns></returns>
        public static Boolean isPaymentTypeValidDB(String tpName)
        {
            Connections cn = new Connections();
            String query = "select " + PaymentType.PAYMENT_TYPE_COL_TYPE_NAME +
                     " from " + PaymentType.PAYMENT_TYPE_TABLE +
                     " where " + PaymentType.PAYMENT_TYPE_COL_TYPE_NAME + "=" + "'" + tpName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;

        }
        /// <summary>
        /// inserts all the objects in passed arraylist into database
        /// </summary>
        /// <param name="stList"></param>
        /// <returns></returns>
        public static int insertPaymentTypeDB(ArrayList stList)
        {
            if (stList.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to PaymentType.insertPaymentTypeDB"));

            ArrayList statList = stList;
            int counter = 0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + PaymentType.PAYMENT_TYPE_TABLE
                + " ("
                + PaymentType.PAYMENT_TYPE_COL_TYPE_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < stList.Count)
            {
                PaymentType obj = (PaymentType)stList[counter];
                insertCmd = insertCmd + " '" + obj.getPaymentType() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the 'Payment_Type' database table
        /// the first paramter contains column name - taget value pair
        ///  the second parameter contains column name - target value as where clause - note that this where clause must contain the 'payment_type_name'
        ///  the third parameter contains the type of operation
        ///  a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updatePaymentTypeDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(PaymentType.PAYMENT_TYPE_COL_TYPE_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - PaymentType.updatePaymentTypeDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to PaymentType.updatePaymentTypeDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to PaymentType.updatePaymentTypeDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + PaymentType.PAYMENT_TYPE_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + PaymentType.PAYMENT_TYPE_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(PaymentType.PAYMENT_TYPE_COL_TYPE_NAME, PaymentType.PAYMENT_TYPE_COL_TYPE_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PaymentType.updatePaymentTypeDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PaymentType.updatePaymentTypeDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }

    }
    /// <summary>
    /// this class is representative of the database object 'Invoice_Types'
    /// </summary>
    public class InvoiceType
    {
        private String invoiceTypeName;

        private static String sessionUser = "";

        public const String INVOICE_TYPE_TABLE = "Invoice_Types";

        public const String INVOICE_TYPE_COL_TYPE_NAME = "invoice_type_name";

        public const String INVOICE_TYPE_COL_TYPE_NAME_TYPE = Connections.STRING_TYPE;

        public const String INVOICE_TYPE_TAX_INVOICE = "Tax Invoice";

        public String getInvoiceTypeName()
        {
            return invoiceTypeName;
        }
        public void setInvoiceTypeName(String invType)
        {
            invoiceTypeName = invType;
        }
        /// <summary>
        /// returns all the invoice type objects from database
        /// each member of the arraylist is an object of the class 'InvoiceType'
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllInvoiceTypeDB()
        {
            Connections cn = new Connections();
            String query = "select " + InvoiceType.INVOICE_TYPE_COL_TYPE_NAME +
                     " from " + InvoiceType.INVOICE_TYPE_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                InvoiceType temp = new InvoiceType();
                temp.setInvoiceTypeName(dr[0].ToString());
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;

        }
        /// <summary>
        /// verfies if the passed InvoiceType is present in the database
        /// if found returns 'true',else returns 'false'
        /// </summary>
        /// <param name="tpName"></param>
        /// <returns></returns>
        public static Boolean isInvoiceTypeValidDB(String tpName)
        {
            Connections cn = new Connections();
            String query = "select " + InvoiceType.INVOICE_TYPE_COL_TYPE_NAME +
                     " from " + InvoiceType.INVOICE_TYPE_TABLE +
                     " where " + InvoiceType.INVOICE_TYPE_COL_TYPE_NAME + "=" + "'" + tpName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;

        }
        /// <summary>
        /// inserts all the invoice type objects passed through the parameter into the database
        /// </summary>
        /// <param name="stList"></param>
        /// <returns></returns>
        public static int insertInvoiceTypeDB(ArrayList stList)
        {
            if (stList.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to InvoiceType.insertInvoiceTypeDB"));

            ArrayList statList = stList;
            int counter = 0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + InvoiceType.INVOICE_TYPE_TABLE
                + " ("
                + InvoiceType.INVOICE_TYPE_COL_TYPE_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < stList.Count)
            {
                InvoiceType obj = (InvoiceType)stList[counter];
                insertCmd = insertCmd + " '" + obj.getInvoiceTypeName() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the 'Invoice_Types' database table
        /// the first paramter contains column name - taget value pair
        ///  the second parameter contains column name - target value as where clause - note that this where clause must contain the 'invoice_type_name'
        ///  the third parameter contains the type of operation
        ///  a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateInvoiceTypeDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(InvoiceType.INVOICE_TYPE_COL_TYPE_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - InvoiceType.updateInvoiceTypeDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to InvoiceType.updateInvoiceTypeDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to InvoiceType.updateInvoiceTypeDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + InvoiceType.INVOICE_TYPE_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + InvoiceType.INVOICE_TYPE_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(InvoiceType.INVOICE_TYPE_COL_TYPE_NAME, InvoiceType.INVOICE_TYPE_COL_TYPE_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to InvoiceType.updateInvoiceTypeDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to InvoiceType.updateInvoiceTypeDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }
    }
    /// <summary>
    /// this class is representative of the database object 'Defect_Resolution_Status_Codes'
    /// </summary>
    public class DefectResolStatCodes
    {
        private String resolStat;

        private static String sessionUser = "";

        public const String DEFECT_RESOL_STAT_TABLE = "Defect_Resolution_Status_Codes";

        public const String DEFECT_RESOL_STAT_COL_STAT_NAME = "Defect_Resolution_Status";

        public const String DEFECT_RESOL_STAT_COL_STAT_NAME_TYPE = Connections.STRING_TYPE;

        public static String DEFECT_RESOL_STAT_CODE_RESOLVED = "Resolved";
        public static String DEFECT_RESOL_STAT_CODE_OPEN = "Open";
        public static String DEFECT_RESOL_STAT_CODE_WORKING_ON = "Working On";

        public String getResolStat()
        {
            return resolStat;
        }
        public void setResolStat(String rStat)
        {
            resolStat = rStat;
        }
        /// <summary>
        /// returns all the defect resolution status codes from database
        /// each member of the returned arraylist is an object of 'DefectResolStatCodes'
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllDefectResolStatDB()
        {
            Connections cn = new Connections();
            String query = "select " + DefectResolStatCodes.DEFECT_RESOL_STAT_COL_STAT_NAME +
                     " from " + DefectResolStatCodes.DEFECT_RESOL_STAT_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DefectResolStatCodes temp = new DefectResolStatCodes();
                temp.setResolStat(dr[0].ToString());
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;
        }
        /// <summary>
        /// verifies if the defecet resolution status is a valid one- if valid then returns true else false
        /// </summary>
        /// <param name="stName"></param>
        /// <returns></returns>
        public static Boolean isDefectResolStatValidDB(String stName)
        {
            Connections cn = new Connections();
            String query = "select " + DefectResolStatCodes.DEFECT_RESOL_STAT_COL_STAT_NAME +
                     " from " + DefectResolStatCodes.DEFECT_RESOL_STAT_TABLE +
                     " where " + DefectResolStatCodes.DEFECT_RESOL_STAT_COL_STAT_NAME + "=" + "'" + stName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;

        }
        /// <summary>
        /// inserts all defect resolution status objects passed through the parameter into the database
        /// </summary>
        /// <returns></returns>
        public static int insertDefectResolStatDB(ArrayList reStat)
        {
            if (reStat.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to DefectResolStatCodes.insertDefectResolStatDB"));

            ArrayList statList = reStat;
            int counter = 0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + DefectResolStatCodes.DEFECT_RESOL_STAT_TABLE
                + " ("
                + DefectResolStatCodes.DEFECT_RESOL_STAT_COL_STAT_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < reStat.Count)
            {
                DefectResolStatCodes obj = (DefectResolStatCodes)reStat[counter];
                insertCmd = insertCmd + " '" + obj.getResolStat() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;
        }
        /// <summary>
        /// update or delete values in the 'Defect_Resolution_Status_Codes' database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the 'Defect_Resolution_Status'
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <returns></returns>
        public static int updateDefectResolStatDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(DefectResolStatCodes.DEFECT_RESOL_STAT_COL_STAT_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - DefectResolStatCodes.updateDefectResolStatDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to DefectResolStatCodes.updateDefectResolStatDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to DefectResolStatCodes.updateDefectResolStatDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + DefectResolStatCodes.DEFECT_RESOL_STAT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + DefectResolStatCodes.DEFECT_RESOL_STAT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(DefectResolStatCodes.DEFECT_RESOL_STAT_COL_STAT_NAME, DefectResolStatCodes.DEFECT_RESOL_STAT_COL_STAT_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DefectResolStatCodes.updateDefectResolStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DefectResolStatCodes.updateDefectResolStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }
    }
    /// <summary>
    /// this class is representative of the database object 'Defect_Status_Codes'
    /// </summary>
    public class DefectStatCodes
    {
        private String defectStat;

        private static String sessionUser = "";

        public const String DEFECT_STAT_TABLE = "Defect_Status_Codes";

        public const String DEFECT_STAT_COL_STAT_NAME = "Defect_Status";

        public const String DEFECT_STAT_COL_STAT_NAME_TYPE = Connections.STRING_TYPE;


        public String getDefectStat()
        {
            return defectStat;
        }
        public void setDefectStat(String dfStat)
        {
            defectStat = dfStat;
        }

        /// <summary>
        /// returns all the defect stat codes from database
        /// each element of the arraylist is an object of type 'DefectStatCodes'
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllDefectStatCodesDB()
        {
            Connections cn = new Connections();
            String query = "select " + DefectStatCodes.DEFECT_STAT_COL_STAT_NAME +
                     " from " + DefectStatCodes.DEFECT_STAT_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                DefectStatCodes temp = new DefectStatCodes();
                temp.setDefectStat(dr[0].ToString());
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;

        }
        /// <summary>
        /// verifies if the passed parameter is a valid defect status in the database table or not
        /// returns true if valid else returns false
        /// </summary>
        /// <param name="stName"></param>
        /// <returns></returns>
        public static Boolean isDefectStatValidDB(String stName)
        {
            Connections cn = new Connections();
            String query = "select " + DefectStatCodes.DEFECT_STAT_COL_STAT_NAME +
                     " from " + DefectStatCodes.DEFECT_STAT_TABLE +
                     " where " + DefectStatCodes.DEFECT_STAT_COL_STAT_NAME + "=" + "'" + stName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;

        }
        /// <summary>
        /// each element of the passed arraylist is an object of the class 'DefectStatCodes'
        /// each of these object is inserted into database
        /// </summary>
        /// <param name="dfStat"></param>
        /// <returns></returns>
        public static int insertDefectStatDB(ArrayList dfStat)
        {
            if (dfStat.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to DefectStatCodes.insertDefectStatDB"));

            ArrayList statList = dfStat;
            int counter = 0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + DefectStatCodes.DEFECT_STAT_TABLE
                + " ("
                + DefectStatCodes.DEFECT_STAT_COL_STAT_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < dfStat.Count)
            {
                DefectStatCodes obj = (DefectStatCodes)dfStat[counter];
                insertCmd = insertCmd + " '" + obj.getDefectStat() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;
            
        }
        /// <summary>
        /// update or delete values in the 'Defect_Status_Codes' database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the 'Defect_Status'
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateDefectStatDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(DefectStatCodes.DEFECT_STAT_COL_STAT_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - DefectStatCodes.updateDefectStatDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to DefectStatCodes.updateDefectStatDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to DefectStatCodes.updateDefectStatDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + DefectStatCodes.DEFECT_STAT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + DefectStatCodes.DEFECT_STAT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(DefectStatCodes.DEFECT_STAT_COL_STAT_NAME, DefectStatCodes.DEFECT_STAT_COL_STAT_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DefectStatCodes.updateDefectStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to DefectStatCodes.updateDefectStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }

    }
    /// <summary>
    /// THIS CLASS IS BEING DEPRECATED...AS THE CLASS 'UnitOfMsrmnt' WILL BE SUFFICIENT
    /// this class represents the quote units object in database
    /// each object of this class is a record of the database object 'Quote_Units'
    /// </summary>
    public class QuoteUnits
    {
        private Dictionary<String, float> unitAndDivisor;

        public Dictionary<String, float> getUnitAndDivisor()
        {
            return unitAndDivisor;
        }
        public void setUnitAndDivisor(Dictionary<String,float> unD)
        {
            unitAndDivisor = unD;
        }

        private static String sessionUser = "";

        public const String QUOTE_UNITS_TABLE = "Quote_Units";

        public const String QUOTE_UNITS_COL_UNIT_NAME = "unit_name";
        public const String QUOTE_UNITS_COL_DIVISOR = "Divisor";

        public const String QUOTE_UNITS_COL_UNIT_NAME_TYPE = Connections.STRING_TYPE;
        public const String QUOTE_UNITS_COL_DIVISOR_TYPE = Connections.NUMBER_TYPE;

        /// <summary>
        /// returns all the quote units objects from database.Each element of the returned entity has the property 'unitAndDivisor' which is a Dictionary<String,float>
        /// use the 'getUnitAndDivisor'/'setUnitAndDivisor' as getter/setter for the property.
        /// The 'key' of the Dictionary<String,float> is 'unit name' and the 'value' is the respective divisor of the quote unit.
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllQuoteUnitsDB()
        {
            Connections cn = new Connections();
            String query = "select " + QuoteUnits.QUOTE_UNITS_COL_UNIT_NAME +
                      ","+QuoteUnits.QUOTE_UNITS_COL_DIVISOR+
                     " from " + QuoteUnits.QUOTE_UNITS_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                QuoteUnits temp = new QuoteUnits();
                Dictionary<String,float> tempDict=new Dictionary<string,float>();
                tempDict.Add(dr[0].ToString(),float.Parse(dr[1].ToString()));
                temp.setUnitAndDivisor(tempDict);
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;

        }
        /// <summary>
        /// for a given quote unit name returns the respective database object
        /// </summary>
        /// <param name="untName"></param>
        /// <returns></returns>
        public static QuoteUnits getQuoteUnitbyNameDB(String unitName)
        {
            Connections cn = new Connections();
            String query = "select " + QuoteUnits.QUOTE_UNITS_COL_UNIT_NAME +
                         "," + QuoteUnits.QUOTE_UNITS_COL_DIVISOR +
                     " from " + QuoteUnits.QUOTE_UNITS_TABLE +
                     " where " + QuoteUnits.QUOTE_UNITS_COL_UNIT_NAME + "=" + "'" + unitName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            
            QuoteUnits qU = new QuoteUnits();

            foreach (DataRow dr in dt.Rows)
            {
                Dictionary<String,float> temp=new Dictionary<String,float>();
                temp.Add(dr[0].ToString(),float.Parse(dr[1].ToString()));
                qU.setUnitAndDivisor(temp);
            }
            cn.disconnect();
            return qU;

        }
        /// <summary>
        /// verifies if a quote unit name is present in the database; if found then retturns true else returns false
        /// </summary>
        /// <param name="unitName"></param>
        /// <returns></returns>
        public static Boolean isQuoteUnitValidDB(String unitName)
        {
            Connections cn = new Connections();
            String query = "select " + QuoteUnits.QUOTE_UNITS_COL_UNIT_NAME +
                         "," + QuoteUnits.QUOTE_UNITS_COL_DIVISOR +
                     " from " + QuoteUnits.QUOTE_UNITS_TABLE +
                     " where " + QuoteUnits.QUOTE_UNITS_COL_UNIT_NAME + "=" + "'" + unitName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;

        }
        /// <summary>
        /// inserts all the passed quote unit objects into the database
        /// </summary>
        /// <param name="quObj"></param>
        /// <returns></returns>
        public static int insertQuoteUnitsDB(ArrayList quObj)
        {
            if (quObj.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to QuoteUnits.insertQuoteUnitsDB"));

            ArrayList statList = quObj;
            int counter = 0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + QuoteUnits.QUOTE_UNITS_TABLE
                + " ("
                + QuoteUnits.QUOTE_UNITS_COL_UNIT_NAME  
                + QuoteUnits.QUOTE_UNITS_COL_DIVISOR + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < quObj.Count)
            {
                QuoteUnits obj = (QuoteUnits) quObj[counter];
                insertCmd = insertCmd + " '" + obj.getUnitAndDivisor().Keys.First()  + "',"+ float.Parse(obj.getUnitAndDivisor().Values.First().ToString());
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the 'Quote_Units' database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the 'unit_name'
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateQuoteUnitsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {

            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(QuoteUnits.QUOTE_UNITS_COL_UNIT_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - QuoteUnits.updateQuoteUnitsDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to QuoteUnits.updateQuoteUnitsDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to QuoteUnits.updateQuoteUnitsDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + QuoteUnits.QUOTE_UNITS_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + QuoteUnits.QUOTE_UNITS_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(QuoteUnits.QUOTE_UNITS_COL_UNIT_NAME, QuoteUnits.QUOTE_UNITS_COL_UNIT_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to QuoteUnits.updateQuoteUnitsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to QuoteUnits.updateQuoteUnitsDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
            
        }

    }
    /// <summary>
    /// this class represents the database object 'Unit_of_measurement'
    /// </summary>
    public class UnitOfMsrmnt
    {
        private String unitName;

        private static String sessionUser = "";

        public const String MSRMNT_UNIT_TABLE = "Unit_of_Measurement";

        public const String MSRMNT_UNIT_COL_UNIT_NAME = "msrmnt_unit";

        public const String MSRMNT_UNIT_COL_UNIT_NAME_TYPE = Connections.STRING_TYPE;

        public String getUnitName()
        {
            return unitName;
        }
        public void setUnitName(String uName)
        {
            unitName = uName;
        }

        /// <summary>
        /// retrieves all the measurement units from database
        /// each element of the returned ArrayList is an object of type 'UnitOfMsrmnt'
        /// </summary>
        /// <returns></returns>
        public static ArrayList  getAllMsrmntUnitsDB()
        {
            Connections cn = new Connections();
            String query = "select " + UnitOfMsrmnt.MSRMNT_UNIT_COL_UNIT_NAME +
                     " from " + UnitOfMsrmnt.MSRMNT_UNIT_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                UnitOfMsrmnt temp = new UnitOfMsrmnt();
                temp.setUnitName(dr[0].ToString());
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;

        }
        /// <summary>
        /// verifies from database whether or not the passed measurement unit name is valid
        /// if valid, returns true else returns false
        /// </summary>
        /// <param name="uName"></param>
        /// <returns></returns>
        public static Boolean isMsrmntUnitValidDB(String uName)
        {
            Connections cn = new Connections();
            String query = "select " + UnitOfMsrmnt.MSRMNT_UNIT_COL_UNIT_NAME +
                     " from " + UnitOfMsrmnt.MSRMNT_UNIT_TABLE +
                     " where " + UnitOfMsrmnt.MSRMNT_UNIT_COL_UNIT_NAME + "=" + "'" + uName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;
            
        }
        /// <summary>
        /// inserts all the passed objects into database
        /// each element of the passed arraylist should be an object of type 'UnitOfMsrmnt'
        /// </summary>
        /// <param name="unList"></param>
        /// <returns></returns>
        public static int insertMsrmntUnitDB(ArrayList unList)
        {
            if (unList.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to UnitOfMsrmnt.insertMsrmntUnitDB"));

            ArrayList statList = unList;
            int counter = 0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + UnitOfMsrmnt.MSRMNT_UNIT_TABLE
                + " ("
                + UnitOfMsrmnt.MSRMNT_UNIT_COL_UNIT_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < unList.Count)
            {
                UnitOfMsrmnt obj = (UnitOfMsrmnt)unList[counter];
                insertCmd = insertCmd + " '" + obj.getUnitName() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;
        }
        /// <summary>
        /// update or delete values in the 'UnitOfMsrmnt' database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the 'msrmnt_unit'
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateMsrmntUnitDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(UnitOfMsrmnt.MSRMNT_UNIT_COL_UNIT_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - UnitOfMsrmnt.updateMsrmntUnitDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to UnitOfMsrmnt.updateMsrmntUnitDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to UnitOfMsrmnt.updateMsrmntUnitDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + UnitOfMsrmnt.MSRMNT_UNIT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + UnitOfMsrmnt.MSRMNT_UNIT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(UnitOfMsrmnt.MSRMNT_UNIT_COL_UNIT_NAME, UnitOfMsrmnt.MSRMNT_UNIT_COL_UNIT_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to UnitOfMsrmnt.updateMsrmntUnitDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to UnitOfMsrmnt.updateMsrmntUnitDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }
    }
    /// <summary>
    /// this class is representative of the database object 'Potential_Status'
    /// </summary>
    public class PotentialStatus
    {
        private String statusName;

        private static String sessionUser = "";

        public const String POTENTIAL_STAT_PRELIM = "Preliminary Stage";
        public const String POTENTIAL_STAT_MEDIUM = "Medium Stage";
        public const String POTENTIAL_STAT_ADVNCD = "Advanced Stage";

        public const String POTENTIAL_STAT_TABLE = "Potential_Status";

        public const String POTENTIAL_STAT_COL_UNIT_NAME = "status_name";

        public const String POTENTIAL_STAT_COL_UNIT_NAME_TYPE = Connections.STRING_TYPE;
    
        public String getStatusName()
        {
            return statusName;
        }
        /// <summary>
        /// Status name can only be set to any one the values,
        /// defined by POTENTIAL_STAT_ variables in this class
        /// </summary>
        /// <param name="stName"></param>
        public void setStatusName(String stName)
        {
            if (!stName.Equals(PotentialStatus.POTENTIAL_STAT_PRELIM) &&
                !stName.Equals(PotentialStatus.POTENTIAL_STAT_MEDIUM) && !stName.Equals(PotentialStatus.POTENTIAL_STAT_ADVNCD))
                throw (new CustomExceptions.businessRuleViolationException("Tried to set invalid value to Potential status - method PotentialStatus.setStatusName()"));

            statusName = stName;
        }
        /// <summary>
        /// gets all the status name from database
        /// each element of the retunred arraylist is an object of type 'PotentialStatus'
        /// </summary>
        /// <returns></returns>
        public static ArrayList getAllStatusNameDB()
        {
            Connections cn = new Connections();
            String query = "select " + PotentialStatus.POTENTIAL_STAT_COL_UNIT_NAME +
                     " from " + PotentialStatus.POTENTIAL_STAT_TABLE;


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            ArrayList tempStat = new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                PotentialStatus temp = new PotentialStatus();
                temp.setStatusName(dr[0].ToString());
                tempStat.Add(temp);

            }
            cn.disconnect();
            return tempStat;
        }
        /// <summary>
        /// verifies if the passed value is a valid potential status in the database table or not
        /// if valid returns true else returns false
        /// </summary>
        /// <param name="stName"></param>
        /// <returns></returns>
        public static Boolean isPotentialStatValidDB(String stName)
        {
            Connections cn = new Connections();
            String query = "select " + PotentialStatus.POTENTIAL_STAT_COL_UNIT_NAME +
                     " from " + PotentialStatus.POTENTIAL_STAT_TABLE +
                     " where " + PotentialStatus.POTENTIAL_STAT_COL_UNIT_NAME + "=" + "'" + stName.Trim() + "'";


            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;

            foreach (DataRow dr in dt.Rows)
            {
                found = true;
            }
            cn.disconnect();
            return found;
        }
        /// <summary>
        /// each element of the passed parameter is an object of type 'PotentialStatus'
        /// all passed objects are inserted into database
        /// </summary>
        /// <param name="unList"></param>
        /// <returns></returns>
        public static int insertPotentialStatDB(ArrayList unList)
        {
            if (unList.Count == 0)
                throw (new CustomExceptions.invalidParamException("Empty List sent to PotentialStatus.insertPotentialStatDB"));

            ArrayList statList = unList;
            int counter = 0;

            int rowsAffected = 0;
            String insertCmd = "insert into " + PotentialStatus.POTENTIAL_STAT_TABLE
                + " ("
                + PotentialStatus.POTENTIAL_STAT_COL_UNIT_NAME + ")"
                + "values (";

            Connections cn = new Connections();


            while (counter < unList.Count)
            {
                PotentialStatus obj = (PotentialStatus)unList[counter];
                insertCmd = insertCmd + " '" + obj.getStatusName() + "'";
                insertCmd += ")";
                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);
            }

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// update or delete values in the 'Potential_Status' database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain the 'status_name'
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updatePotentialStatDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(PotentialStatus.POTENTIAL_STAT_COL_UNIT_NAME, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - PotentialStatus.updatePotentialStatDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to PotentialStatus.updatePotentialStatDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to PotentialStatus.updatePotentialStatDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + PotentialStatus.POTENTIAL_STAT_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + PotentialStatus.POTENTIAL_STAT_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(PotentialStatus.POTENTIAL_STAT_COL_UNIT_NAME, PotentialStatus.POTENTIAL_STAT_COL_UNIT_NAME_TYPE);


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PotentialStatus.updatePotentialStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PotentialStatus.updatePotentialStatDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;

        }
    }
    /// <summary>
    /// This class is representative of the backend object 'Id_Table'.
    /// This class has methods to generate unique ids of different types
    /// </summary>
    public class Id
    {
        private String idType;
        private String lastCreatedVal;
        private String descr;

        private static String sessionUser = "";

        public const String ID_TABLE = "Id_Table";

        public const String ID_TABLE_COL_ID_TYPE="Id_Type";
        public const String ID_TABLE_COL_LAST_CREATED_VAL = "Last_Created_Val";
        public const String ID_TABLE_COL_DESC = "Description";

        public const String ID_TABLE_COL_LAST_CREATED_VAL_TYPE = Connections.STRING_TYPE;
        public const String ID_TABLE_COL_DESC_TYPE = Connections.STRING_TYPE;
         public const String ID_TABLE_COL_ID_TYPE_TYPE=Connections.STRING_TYPE;

        /// <summary>
        /// this is the product category id string
        /// </summary>
         public const String ID_TYPE_PROD_CAT_STRING = "pc";
        /// <summary>
        /// this is the user or shop id string
        /// </summary>
         public const String ID_TYPE_CMP_USR_STRING = "cmp";
        /// <summary>
        /// this is the feature id string
        /// </summary>
         public const String ID_TYPE_FEAT_STRING = "ft";
        /// <summary>
        /// this is the specification id string
        /// </summary>
         public const String ID_TYPE_SPEC_SRING = "sp";
        /// <summary>
        /// this is the currency id string
        /// </summary>
         public const String ID_TYPE_CURR_STRING = "cr";
        /// <summary>
        /// this is the country id string
        /// </summary>
         public const String ID_TYPE_COUNTRY_STRING = "cn";
        /// <summary>
        /// this is the state id string
        /// </summary>
         public const String ID_TYPE_STATE_STRING = "st";
        /// <summary>
        /// this is the city id string
        /// </summary>
         public const String ID_TYPE_CITY_STRING = "ct";
        /// <summary>
        /// this is the locality id string
        /// </summary>
         public const String ID_TYPE_LOCAL_STRING = "lc";
        /// <summary>
        /// this is the sub business /chain id string
        /// </summary>
         public const String ID_TYPE_SUB_BUS_STRING = "ch";
        /// <summary>
        /// this is the user/business description id string
        /// </summary>
         public const String ID_TYPE_USR_SHOP_DESC_STRING = "ud";
        /// <summary>
        /// This is the department id
        /// </summary>
         public const String ID_TYPE_DEPT_ID_STRING = "dept";
        /// <summary>
        /// this is the requiremnet id string
        /// </summary>
         public const String ID_TYPE_REQR_STRING = "r";
        /// <summary>
        /// this is the RFQ id string
        /// </summary>
         public const String ID_TYPE_RFQ_STRING = "ra";
        /// <summary>
        /// this is the communication id string
        /// </summary>
         public const String ID_TYPE_COMM_STRING = "rap";
        /// <summary>
        /// this is the defect id string
        /// </summary>
         public const String ID_TYPE_DEFECT_STRING = "df";
        /// <summary>
        /// this is the image id string 
        /// </summary>
         public const String ID_TYPE_IMAGE_ID_STRING = "img";
        /// <summary>
        /// This is the potential id string
        /// </summary>
         public const String ID_TYPE_POTENTIAL_ID_STRING = "ptn";
        /// <summary>
        /// This is the docformat id string
        /// </summary>
         public const String ID_TYPE_DOCFORMAT_ID_STRING = "dcf";
        /// <summary>
        /// This is the purchase order id string 
        /// </summary>
         public const String ID_TYPE_PO_ID_STRING = "po";
        /// <summary>
        /// This is the invoice id string
        /// </summary>
         public const String ID_TYPE_INV_ID_STRING = "inv";
        /// <summary>
        /// This is the payment id string
        /// </summary>
         public const String ID_TYPE_PMNT_ID_STRING = "pmnt";

        public String getLastCreatedVal()
        {
            return this.lastCreatedVal;
        }

        public void setLastCreatedVal(String lcv)
        {
            this.lastCreatedVal = lcv;
        }

        public String getDescription()
        {
            return this.descr;
        }

        public void setDesc(String dsc)
        {
            this.descr = dsc;
        }

        public String getIdType()
        {
            return this.idType;
         }

        public void setIdType(String it)
        {
            this.idType = it;
        }

        /// <summary>
        /// for a given type of id, this method will return the next available id to the caller module.
        /// if the id type is not available in the database it will throw an exception
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public String getNewId(String type)
        {
            Connections cn = new Connections();
  
            String query = "select " + Id.ID_TABLE_COL_ID_TYPE +
                "," + Id.ID_TABLE_COL_LAST_CREATED_VAL +
                " from " + Id.ID_TABLE +
                " where " +Id.ID_TABLE_COL_ID_TYPE + "='" + type.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Boolean found = false;
                
        
            ArrayList tempStat = new ArrayList();
            String newId="";
            foreach (DataRow dr in dt.Rows)
            {
                String tempId = dr[1].ToString();
                double idInt=Convert.ToDouble(tempId.Substring(tempId.IndexOf("_")+1));
                idInt++;
                newId = type + "_" + idInt;
                found = true;
             }

            if (found == false)
                throw (new CustomExceptions.invalidParamException("Id type supplied not found in database"));
            
            String insertCmd = "update " + Id.ID_TABLE
                + " set "
                + Id.ID_TABLE_COL_LAST_CREATED_VAL
                + "=" + "'" + newId + "'" 
                +" where " + Id.ID_TABLE_COL_ID_TYPE
                + "=" + "'" + type + "'";
            cn.execInsertUpdate(insertCmd,sessionUser);
            cn.disconnect();
            return newId;
        }
    }
    /// <summary>
    /// An object of this class represent a record of the database object 'All_Contacts'.
    /// </summary>
    public class Contacts
    {
        private String entityId;
        private String contactEntityId;
        private String fromSite;
        private String contactShortName;
        private String contactName;
        private String mobNo;
        private String emailId;
        private String localityId;
        private String streetName;
        private String prodList;

        private static String sessionUser = "";

        public const String CONTACT_TABLE = "All_Contacts ";

        public const String CONTACT_TABLE_COL_ENTITY_ID = "Cmp_Usr_Shop_id ";
        public const String CONTACT_TABLE_COL_CONTACT_ENTITY_ID="Contact_Cmp_Usr_Shop_id";
        public const String CONTACT_TABLE_COL_FROMSITE="fromSite";
        public const String CONTACT_TABLE_COL_CONTACT_SHORT_NAME="Contact_Shortname";
        public const String CONTACT_TABLE_COL_CONTACT_NAME="Contact_Name";
        public const String CONTACT_TABLE_COL_MOB_NO="Mob";
        public const String CONTACT_TABLE_COL_EMAIL_ID="Email";
        public const String CONTACT_TABLE_COL_LOCALITY_ID="Locality_Id";
        public const String CONTACT_TABLE_COL_STREET_NAME="Street_Name";
        public const String CONTACT_TABLE_COL_PROD_LIST = "ProdList";

        public const String CONTACT_TABLE_COL_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String CONTACT_TABLE_COL_CONTACT_ENTITY_ID_TYPE = Connections.STRING_TYPE;
        public const String CONTACT_TABLE_COL_FROMSITE_TYPE = Connections.STRING_TYPE;
        public const String CONTACT_TABLE_COL_CONTACT_SHORT_NAME_TYPE = Connections.STRING_TYPE;
        public const String CONTACT_TABLE_COL_CONTACT_NAME_TYPE = Connections.STRING_TYPE;
        public const String CONTACT_TABLE_COL_MOB_NO_TYPE = Connections.STRING_TYPE;
        public const String CONTACT_TABLE_COL_EMAIL_ID_TYPE = Connections.STRING_TYPE;
        public const String CONTACT_TABLE_COL_LOCALITY_ID_TYPE = Connections.STRING_TYPE;
        public const String CONTACT_TABLE_COL_STREET_NAME_TYPE = Connections.STRING_TYPE;
        public const String CONTACT_TABLE_COL_PROD_LIST_TYPE = Connections.STRING_TYPE;


        public String getEntityId()
        {
            return this.entityId;
        }
        public void setEntityId(String entId)
        {
            this.entityId = entId;
        }
        /// <summary>
        /// For contacts which are not from this site, this entity id is stored only in this table 'All_Contacts' and not in the global tables 
        /// to store entity details.
        /// As this contact will remain private only this entity and not visible to other users of this site.
        /// </summary>
        public String getContactEntityId()
        {
            return this.contactEntityId;
        }
        /// <summary>
        /// For contacts which are not from this site, this entity id is stored only in the  table 'All_Contacts' and not in the global tables 
        /// to store entity details.
        /// As this contact will remain private only this entity and not visible to other users of this site.
        /// </summary>
        /// <param name="cEntId"></param>
        public void setContactEntityId(String cEntId)
        {
            this.contactEntityId = cEntId;
        }
        /// <summary>
        /// This field tell whether or not this object is from this site or only a contact manually created by some user.
        /// </summary>
        /// <returns></returns>
        public String getFromSite()
        {
            return this.fromSite;
        }
        public void setFromSite(String fSite)
        {
            this.fromSite = fSite;
        }
        public String getContactShortName()
        {
            return this.contactShortName;
        }
        public void setContactShortName(String sName)
        {
            this.contactShortName = sName;
        }
        public String getContactName()
        {
            return this.contactName;
        }
        public void setContactName(String cName)
        {
            this.contactName = cName;
        }
        public String getMobNo()
        {
            return this.mobNo;
        }
        public void setMobNo(String mobN)
        {
            this.mobNo = mobN;
        }
        public String getEmailId()
        {
            return this.emailId;
        }
        public void setEmailID(String emId)
        {
            this.emailId = emId;
        }
        public String getLocalityId()
        {
            return this.localityId;
        }
        public void setLocalityId(String lclId)
        {
            this.localityId = lclId;
        }
        public String getStreetName()
        {
            return this.streetName;
        }
        public void setStreetName(String sName)
        {
            this.streetName = sName;
        }

        public String getProdList()
        {
            return this.prodList;
        }

        public void setProdList(String prd)
        {
            this.prodList = prd;
        }
        /// <summary>
        /// Inserts the parameter Contacts object into the database
        /// </summary>
        /// <param name="cntObj"></param>
        /// <returns></returns>
        public static int insertContactDetailsDB(Contacts cntObj)
        {
            if (cntObj.getContactEntityId() == null || cntObj.getContactEntityId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty contact entity id value sent to Contacts.insertContactDetailsDB"));

            if (cntObj.getEntityId() == null || cntObj.getEntityId().Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity id value sent to Contacts.insertContactDetailsDB"));

            int rowsAffected = 0;
            String insertCmd = "insert into " + Contacts.CONTACT_TABLE
                + " ("
                + Contacts.CONTACT_TABLE_COL_CONTACT_ENTITY_ID + ","
                + Contacts.CONTACT_TABLE_COL_CONTACT_NAME + ","
                + Contacts.CONTACT_TABLE_COL_CONTACT_SHORT_NAME + ","
                + Contacts.CONTACT_TABLE_COL_EMAIL_ID + ","
                + Contacts.CONTACT_TABLE_COL_ENTITY_ID + ","
                + Contacts.CONTACT_TABLE_COL_FROMSITE + ","
                + Contacts.CONTACT_TABLE_COL_LOCALITY_ID + ","
                + Contacts.CONTACT_TABLE_COL_MOB_NO + ","
                + Contacts.CONTACT_TABLE_COL_STREET_NAME + ","
                + Contacts.CONTACT_TABLE_COL_PROD_LIST + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " '" + cntObj.getContactEntityId() + "'," + "'" +
            cntObj.getContactName() + "'," + "'" +
            cntObj.getContactShortName() + "'," + "'" +
            cntObj.getEmailId() + "'," + "'" +
            cntObj.getEntityId() + "'," + "'" +
            cntObj.getFromSite() + "'," + "'" +
            cntObj.getLocalityId() + "'," + "'" +
            cntObj.getMobNo() + "'," + "'" +
            cntObj.getStreetName() + "'," + "'" +
            cntObj.getProdList() +"'";

            insertCmd += ")";

            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            return rowsAffected;

        }
        /// <summary>
        /// For a given entity id this method returns a list of 'Contacts' object from the database.
        /// </summary>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static ArrayList getAllContactsbyEntityIdDB(String entId)
        {
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity Id sent to Contacts.getAllContactsbyEntityIdDB"));

            ArrayList allContactList = new ArrayList();

            Connections cn = new Connections();
            String query = "select " + Contacts.CONTACT_TABLE_COL_CONTACT_ENTITY_ID +
                "," + Contacts.CONTACT_TABLE_COL_CONTACT_NAME +
                "," + Contacts.CONTACT_TABLE_COL_CONTACT_SHORT_NAME +
                "," + Contacts.CONTACT_TABLE_COL_EMAIL_ID +
                "," + Contacts.CONTACT_TABLE_COL_ENTITY_ID +
                "," + Contacts.CONTACT_TABLE_COL_FROMSITE +
                "," + Contacts.CONTACT_TABLE_COL_LOCALITY_ID +
                "," + Contacts.CONTACT_TABLE_COL_MOB_NO +
                "," + Contacts.CONTACT_TABLE_COL_PROD_LIST +
                "," + Contacts.CONTACT_TABLE_COL_STREET_NAME +
                " from " + Contacts.CONTACT_TABLE +
                " where " + Contacts.CONTACT_TABLE_COL_ENTITY_ID + "='" + entId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            foreach (DataRow dr in dt.Rows)
            {
                Contacts temp = new Contacts();

                temp.setContactEntityId(dr[0].ToString());
                temp.setContactName(dr[1].ToString());
                temp.setContactShortName(dr[2].ToString());
                temp.setEmailID(dr[3].ToString());
                temp.setEntityId(dr[4].ToString());
                temp.setFromSite(dr[5].ToString());
                temp.setLocalityId(dr[6].ToString());
                temp.setMobNo(dr[7].ToString());
                temp.setProdList(dr[8].ToString());
                temp.setStreetName(dr[9].ToString());

                allContactList.Add(temp);
            }

            cn.disconnect();
            return allContactList;
        }
        /// <summary>
        /// For a given entity id and a contact id, this method returns the respective 'Contacts' object from database.
        /// </summary>
        /// <param name="entId"></param>
        /// <param name="contactEntId"></param>
        /// <returns></returns>
        public static Contacts getContactDetailsforContactEntityDB(String entId, String contactEntId)
        {
            if (entId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty entity Id sent to Contacts.getContactDetailsforContactEntityDB"));
            if (contactEntId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty contact entity Id sent to Contacts.getContactDetailsforContactEntityDB"));

            Connections cn = new Connections();
            String query = "select " + Contacts.CONTACT_TABLE_COL_CONTACT_ENTITY_ID +
                "," + Contacts.CONTACT_TABLE_COL_CONTACT_NAME +
                "," + Contacts.CONTACT_TABLE_COL_CONTACT_SHORT_NAME +
                "," + Contacts.CONTACT_TABLE_COL_EMAIL_ID +
                "," + Contacts.CONTACT_TABLE_COL_ENTITY_ID +
                "," + Contacts.CONTACT_TABLE_COL_FROMSITE +
                "," + Contacts.CONTACT_TABLE_COL_LOCALITY_ID +
                "," + Contacts.CONTACT_TABLE_COL_MOB_NO +
                "," + Contacts.CONTACT_TABLE_COL_PROD_LIST +
                "," + Contacts.CONTACT_TABLE_COL_STREET_NAME +
                " from " + Contacts.CONTACT_TABLE +
                " where " + Contacts.CONTACT_TABLE_COL_ENTITY_ID + "='" + entId.Trim() + "'"+
                " and " + Contacts.CONTACT_TABLE_COL_CONTACT_ENTITY_ID + "='" + contactEntId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            Contacts temp = new Contacts();

            foreach (DataRow dr in dt.Rows)
            {
                temp.setContactEntityId(dr[0].ToString());
                temp.setContactName(dr[1].ToString());
                temp.setContactShortName(dr[2].ToString());
                temp.setEmailID(dr[3].ToString());
                temp.setEntityId(dr[4].ToString());
                temp.setFromSite(dr[5].ToString());
                temp.setLocalityId(dr[6].ToString());
                temp.setMobNo(dr[7].ToString());
                temp.setProdList(dr[8].ToString());
                temp.setStreetName(dr[9].ToString());

            }

            cn.disconnect();
            return temp;
        }
        /// <summary>
        /// update or delete values in the 'All_Contacts' database table
        /// the first paramter contains column name - taget value pair
        /// the second parameter contains column name - target value as where clause - note that this where clause must contain 'entity id' and 'contact entity id'.
        /// the third parameter contains the type of operation
        /// a delete operation will  have no  cascading effect on any table
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updateContactDetailsDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(Contacts.CONTACT_TABLE_COL_CONTACT_ENTITY_ID, out whereClauseCheck) ||
                !whereClause.TryGetValue(Contacts.CONTACT_TABLE_COL_ENTITY_ID, out whereClauseCheck))
            { return 0; }
            else
            {
                //throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - Contacts.updateContactDetailsDB"));

                int rowsAffected = 0;
                String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

                if (operation.Equals(""))
                    throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to Contacts.updateContactDetailsDB is " + op));
                if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                    throw (new CustomExceptions.invalidParamException(" target value prameter Passed to Contacts.updateContactDetailsDB is " + op));

                /*In case of Update -> 'update <table_name> set '
                 * In case of delete -> 'delete from <table_name> '
                 */
                String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + Contacts.CONTACT_TABLE +
                    " set " : Connections.OPERATION_DELETE + " from " + Contacts.CONTACT_TABLE) + " ";

                string quote = "";

                //Need to know the datatypes of field while creating the update statement
                Dictionary<String, String> chkDataType = new Dictionary<string, string>();
                chkDataType.Add(Contacts.CONTACT_TABLE_COL_CONTACT_ENTITY_ID, Contacts.CONTACT_TABLE_COL_CONTACT_ENTITY_ID_TYPE);
                chkDataType.Add(Contacts.CONTACT_TABLE_COL_CONTACT_NAME, Contacts.CONTACT_TABLE_COL_CONTACT_NAME_TYPE);
                chkDataType.Add(Contacts.CONTACT_TABLE_COL_CONTACT_SHORT_NAME, Contacts.CONTACT_TABLE_COL_CONTACT_SHORT_NAME_TYPE);
                chkDataType.Add(Contacts.CONTACT_TABLE_COL_EMAIL_ID, Contacts.CONTACT_TABLE_COL_EMAIL_ID_TYPE);
                chkDataType.Add(Contacts.CONTACT_TABLE_COL_ENTITY_ID, Contacts.CONTACT_TABLE_COL_ENTITY_ID_TYPE);
                chkDataType.Add(Contacts.CONTACT_TABLE_COL_FROMSITE, Contacts.CONTACT_TABLE_COL_FROMSITE_TYPE);
                chkDataType.Add(Contacts.CONTACT_TABLE_COL_LOCALITY_ID, Contacts.CONTACT_TABLE_COL_LOCALITY_ID_TYPE);
                chkDataType.Add(Contacts.CONTACT_TABLE_COL_MOB_NO, Contacts.CONTACT_TABLE_COL_MOB_NO_TYPE);
                chkDataType.Add(Contacts.CONTACT_TABLE_COL_STREET_NAME, Contacts.CONTACT_TABLE_COL_STREET_NAME_TYPE);
                chkDataType.Add(Contacts.CONTACT_TABLE_COL_PROD_LIST, Contacts.CONTACT_TABLE_COL_PROD_LIST_TYPE);

                String outValue = "";

                if (operation.Equals(Connections.OPERATION_UPDATE))
                {
                    int counter = 1;
                    foreach (KeyValuePair<String, String> kvp in targetValue)
                    {
                        if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                            throw (new CustomExceptions.invalidParamException("Invalid field name passed to Contacts.updateContactDetailsDB" + kvp.Key));
                        else
                            quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                        cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                    }
                }

                if (whereClause.Count > 0)
                {
                    cmd += " where ";
                    int counter = 1;
                    foreach (KeyValuePair<String, String> kvp in whereClause)
                    {
                        if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                            throw (new CustomExceptions.invalidParamException("Invalid field name passed to Contacts.updateContactDetailsDB" + kvp.Key));
                        else
                            quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                        cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                    }
                }


                Connections cn = new Connections();
                rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
                cn.disconnect();

                return rowsAffected;
            }
        }
    }

    /// <summary>
    /// This class is representative of the backend object 'purchase_order'
    /// </summary>
    public class PurchaseOrder
    {
        private String po_id;
        private String rfq_id;
        private String date_created;
        private String po_tnc;
        private String po_ship_via;
        private String total_tax_rate;
        private String respEntId;
        private String currency;
        private float amount;

        private static String sessionUser = "";

        public const String PURCHASE_ORDER_TABLE = "purchase_order";

        public const String PURCHASE_ORDER_COL_PO_ID = "po_id";
        public const String PURCHASE_ORDER_COL_RFQ_ID = "rfq_id";
        public const String PURCHASE_ORDER_COL_DATE_CREATED = "date_created";
        public const String PURCHASE_ORDER_COL_PO_TNC = "po_tnc";
        public const String PURCHASE_ORDER_COL_PO_SHIP_VIA = "po_ship_via";
        public const String PURCHASE_ORDER_COL_TOTAL_TAX_RATE = "total_tax_rate";
        public const String PURCHASE_ORDER_COL_RESP_ENT_ID = "Response_Cmp_id";
        public const String PURCHASE_ORDER_COL_CURRENCY = "Currency_Id";
        public const String PURCHASE_ORDER_COL_AMOUNT = "Total_Amount";


        public const String PURCHASE_ORDER_COL_PO_ID_TYPE = Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_COL_RFQ_ID_TYPE = Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_COL_DATE_CREATED_TYPE = Connections.DATE_TIME_TYPE;
        public const String PURCHASE_ORDER_COL_PO_TNC_TYPE = Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_COL_PO_SHIP_VIA_TYPE = Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_COL_TOTAL_TAX_RATE_TYPE = Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_COL_RESP_ENT_ID_TYPE = Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_COL_CURRENCY_TYPE = Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_COL_AMOUNT_TYPE = Connections.NUMBER_TYPE;

        public float getAmount()
        {
            return this.amount;
        }
        public void setAmount(float amnt)
        {
            this.amount = amnt;
        }
        public String getCurrency()
        {
            return currency;
        }
        public void setCurrency(String currency)
        {
            this.currency = currency;
        }
        public String getRespEntId()
        {
            return this.respEntId;
        }
        public void setRespEntId(String respEnt)
        {
            this.respEntId = respEnt;
        }
        public String getPo_id()
        {
            return po_id;
        }
        public void setPo_id(String po_id)
        {
            this.po_id = po_id;
        }
        public String getRfq_id()
        {
            return rfq_id;
        }
        public void setRfq_id(String rfq_id)
        {
            this.rfq_id = rfq_id;
        }
        public String getDate_created()
        {
            return date_created;
        }
        public void setDate_created(String date_created)
        {
            this.date_created = date_created;
        }
        public String getPo_tnc()
        {
            return po_tnc;
        }
        public void setPo_tnc(String po_tnc)
        {
            this.po_tnc = po_tnc;
        }
        public String getPo_ship_via()
        {
            return po_ship_via;
        }
        public void setPo_ship_via(String po_ship_via)
        {
            this.po_ship_via = po_ship_via;
        }
        public String getTotal_tax_rate()
        {
            return total_tax_rate;
        }
        public void setTotal_tax_rate(String total_tax_rate)
        {
            this.total_tax_rate = total_tax_rate;
        }

        public static int insertPurchaseOrderDB(PurchaseOrder poObj)
        {
            int rowsAffected = 0;
            String insertCmd = "insert into " + PurchaseOrder.PURCHASE_ORDER_TABLE
                + " ("
                + PurchaseOrder.PURCHASE_ORDER_COL_PO_ID + ","
                + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID + ","
                + PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED + ","
                + PurchaseOrder.PURCHASE_ORDER_COL_PO_TNC + ","
                + PurchaseOrder.PURCHASE_ORDER_COL_PO_SHIP_VIA + ","
                + PurchaseOrder.PURCHASE_ORDER_COL_RESP_ENT_ID + ","
                + PurchaseOrder.PURCHASE_ORDER_COL_CURRENCY + ","
                + PurchaseOrder.PURCHASE_ORDER_COL_AMOUNT + ","
                + PurchaseOrder.PURCHASE_ORDER_COL_TOTAL_TAX_RATE + ")"
                + "values (";

            Connections cn = new Connections();


            insertCmd = insertCmd + " '" + poObj.getPo_id() + "'," + "'" +
            poObj.getRfq_id() + "'," + "'" +
            poObj.getDate_created() + "'," + "'" +
            poObj.getPo_tnc() + "'," + "'" +
            poObj.getPo_ship_via() + "'," + "'" +
            poObj.getRespEntId() + "'," + "'" +
            poObj.getCurrency() + "'," + 
            poObj.getAmount() + "," + "'" +
            poObj.getTotal_tax_rate() + "'";

            insertCmd += ")";

            rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            cn.disconnect();
            return rowsAffected;
        }
        /// <summary>
        /// Where clause must contain the purchase order id
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updatePurchaseOrderDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(PurchaseOrder.PURCHASE_ORDER_COL_PO_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - PurchaseOrder.updatePurchaseOrderDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to PurchaseOrder.updatePurchaseOrderDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to PurchaseOrder.updatePurchaseOrderDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + PurchaseOrder.PURCHASE_ORDER_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + PurchaseOrder.PURCHASE_ORDER_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
            chkDataType.Add(PurchaseOrder.PURCHASE_ORDER_COL_PO_ID, PurchaseOrder.PURCHASE_ORDER_COL_PO_ID_TYPE);
            chkDataType.Add(PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID, PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID_TYPE);
            chkDataType.Add(PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED, PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED_TYPE);
            chkDataType.Add(PurchaseOrder.PURCHASE_ORDER_COL_PO_TNC, PurchaseOrder.PURCHASE_ORDER_COL_PO_TNC_TYPE);
            chkDataType.Add(PurchaseOrder.PURCHASE_ORDER_COL_PO_SHIP_VIA, PurchaseOrder.PURCHASE_ORDER_COL_PO_SHIP_VIA_TYPE);
            chkDataType.Add(PurchaseOrder.PURCHASE_ORDER_COL_TOTAL_TAX_RATE, PurchaseOrder.PURCHASE_ORDER_COL_TOTAL_TAX_RATE_TYPE);
            chkDataType.Add(PurchaseOrder.PURCHASE_ORDER_COL_RESP_ENT_ID, PurchaseOrder.PURCHASE_ORDER_COL_RESP_ENT_ID_TYPE);
            chkDataType.Add(PurchaseOrder.PURCHASE_ORDER_COL_CURRENCY, PurchaseOrder.PURCHASE_ORDER_COL_CURRENCY_TYPE);
            chkDataType.Add(PurchaseOrder.PURCHASE_ORDER_COL_AMOUNT, PurchaseOrder.PURCHASE_ORDER_COL_AMOUNT_TYPE);

            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PurchaseOrder.updatePurchaseOrderDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PurchaseOrder.updatePurchaseOrderDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }
        /// <summary>
        /// for a given purchase order id this method returns the PurchaseOrder object from DB
        /// </summary>
        /// <param name="poId"></param>
        /// <returns></returns>
        public static PurchaseOrder getPurchaseOrderforPoIdDB(String poId)
        {
            if (poId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty purchase order Id sent to PurchaseOrder.getPurchaseOrderforPoIdDB"));

            Connections cn = new Connections();
            String query = "select " +
                          PurchaseOrder.PURCHASE_ORDER_COL_PO_ID +
                  "," + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID +
                  "," + PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_PO_TNC +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_PO_SHIP_VIA +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_TOTAL_TAX_RATE +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_RESP_ENT_ID +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_CURRENCY +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_AMOUNT +
                   " from " + PurchaseOrder.PURCHASE_ORDER_TABLE +

                " where " + PurchaseOrder.PURCHASE_ORDER_COL_PO_ID + "='" + poId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            PurchaseOrder temp = new PurchaseOrder();

            foreach (DataRow dr in dt.Rows)
            {

                temp.setPo_id(dr[0].ToString());
                temp.setRfq_id(dr[1].ToString());
                temp.setDate_created(dr[2].ToString());
                temp.setPo_tnc(dr[3].ToString());
                temp.setPo_ship_via(dr[4].ToString());
                temp.setTotal_tax_rate(dr[5].ToString());
                temp.setRespEntId(dr[6].ToString());
                temp.setCurrency(dr[7].ToString());
                temp.setAmount(float.Parse(dr[8].ToString()));
            }

            cn.disconnect();
            return temp;
        }
        /// <summary>
        /// For a given list of rfq ids this method returns the dictionary of 'rfq-id','po-id' where rfq id is the key
        /// </summary>
        /// <param name="rfqList"></param>
        /// <returns></returns>
        public static Dictionary<String, String> getPurchaseOrdersforRFQIdListDB(ArrayList rfqList)
        {
            Dictionary<String, String> returnDict = new Dictionary<string, string>();
            String rfqArray = "";

            for (int i = 0; i < rfqList.Count; i++)
            {
                returnDict.Add(rfqList[i].ToString(), "");
                rfqArray += rfqArray.Equals("") ? "'" + rfqList[i].ToString() + "'" : ",'" + rfqList[i].ToString() + "'";
            }


            String query = " SELECT PO." + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID + "," +
                "PO." + PurchaseOrder.PURCHASE_ORDER_COL_PO_ID + " from " +
                 PurchaseOrder.PURCHASE_ORDER_TABLE + " PO INNER JOIN " +
            "(" +
            " SELECT " + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID + "," +
            " MIN(" + PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED + ") m" + " from " + PurchaseOrder.PURCHASE_ORDER_TABLE + " t " +
            " where " + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID + " IN (" + rfqArray + ")" +
            " GROUP BY " + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID +
            ") t ON PO." + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID + "=t." + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID +
            " AND PO." + PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED + "=t.m";

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            //PurchaseOrder temp = new PurchaseOrder();

            foreach (DataRow dr in dt.Rows)
            {
                if (returnDict.ContainsKey(dr[0].ToString()))
                    returnDict[dr[0].ToString()] = dr[1].ToString();
            }

            cn.disconnect();
            return returnDict;

        }

        /// <summary>
        /// For a given list of po ids this method returns the dictionary of 'rfq-id','po-id' where rfq id is the key
        /// </summary>
        /// <param name="poList"></param>
        /// <returns></returns>
        public static Dictionary<String, PurchaseOrder> getPurchaseOrdersforPOIdListDB(ArrayList poList)
        {
            Dictionary<String, PurchaseOrder> returnDict = new Dictionary<string, PurchaseOrder>();
            String poArray = "";

            for (int i = 0; i < poList.Count; i++)
            {
                //returnDict.Add(poList[i].ToString(), "");
                poArray += poArray.Equals("") ? "'" + poList[i].ToString() + "'" : ",'" + poList[i].ToString() + "'";
            }


            String query = "select " +
                          PurchaseOrder.PURCHASE_ORDER_COL_PO_ID +
                  "," + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID +
                  "," + PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_PO_TNC +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_PO_SHIP_VIA +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_TOTAL_TAX_RATE +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_RESP_ENT_ID +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_CURRENCY +
                    "," + PurchaseOrder.PURCHASE_ORDER_COL_AMOUNT +
                   " from " + PurchaseOrder.PURCHASE_ORDER_TABLE +

                " where " + PurchaseOrder.PURCHASE_ORDER_COL_PO_ID + " in (" + poArray + ")";

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            //PurchaseOrder temp = new PurchaseOrder();

            foreach (DataRow dr in dt.Rows)
            {
                PurchaseOrder temp=new PurchaseOrder();

                                temp.setPo_id(dr[0].ToString());
                temp.setRfq_id(dr[1].ToString());
                temp.setDate_created(dr[2].ToString());
                temp.setPo_tnc(dr[3].ToString());
                temp.setPo_ship_via(dr[4].ToString());
                temp.setTotal_tax_rate(dr[5].ToString());
                temp.setRespEntId(dr[6].ToString());
                temp.setCurrency(dr[7].ToString());
                temp.setAmount(float.Parse(dr[8].ToString()));

                if (!returnDict.ContainsKey(dr[0].ToString()))
                    returnDict.Add(dr[0].ToString(),temp);
            }

            cn.disconnect();
            return returnDict;

        }
        /// <summary>
        /// For a given RFQ id this method returns the purchase order object from database
        /// with the oldest date created value (the original PO)
        /// </summary>
        /// <param name="rfId"></param>
        /// <returns></returns>
        public static PurchaseOrder getPurchaseOrderforRFQIdDB(String rfId)
        {
            if (rfId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty RFQ Id sent to PurchaseOrder.getPurchaseOrderforRFQIdDB"));

            Connections cn = new Connections();
            String query = "select TOP 1" +
                             PurchaseOrder.PURCHASE_ORDER_COL_PO_ID +
                  "," + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID +
                  "," + PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_PO_TNC +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_PO_SHIP_VIA +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_TOTAL_TAX_RATE +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_RESP_ENT_ID +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_CURRENCY +
                   "," + PurchaseOrder.PURCHASE_ORDER_COL_AMOUNT +
                    " from " + PurchaseOrder.PURCHASE_ORDER_TABLE +

                " where " + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID + "='" + rfId.Trim() + "'" +
                " order by " + PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED;

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
            PurchaseOrder temp = new PurchaseOrder();

            foreach (DataRow dr in dt.Rows)
            {

                temp.setPo_id(dr[0].ToString());
                temp.setRfq_id(dr[1].ToString());
                temp.setDate_created(dr[2].ToString());
                temp.setPo_tnc(dr[3].ToString());
                temp.setPo_ship_via(dr[4].ToString());
                temp.setTotal_tax_rate(dr[5].ToString());
                temp.setRespEntId(dr[6].ToString());
                temp.setCurrency(dr[7].ToString());
                temp.setAmount(float.Parse(dr[8].ToString()));
            }

            cn.disconnect();
            return temp;
        }
        /// <summary>
        /// For a given product name and response entity id this method returns all respective purchase order quote details
        /// The key is 'po_id-rfq_id'
        /// </summary>
        /// <param name="prodName"></param>
        /// <param name="respEntId"></param>
        /// <returns></returns>
        public static Dictionary<String, PurchaseOrderQuote> getPurchaseOrdersForProdNameAndRespEntDB(String prodName, String respEntId)
        {
            String query = " select " +
                " PQ." + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID +
                " ,PQ." + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PROD_SRV_CATEGORY +
                " ,PQ." + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PRODUCT_NAME +
                " ,PQ." + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_QUOTE +
                " ,PQ." + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_UNITS +
            " ,PO." + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID +
            " from " + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_TABLE + " PQ INNER JOIN " +
            " (" +
            " SELECT PO.* from " + PurchaseOrder.PURCHASE_ORDER_TABLE + " PO INNER JOIN " +
            "(" +
            " SELECT " + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID + "," +
            " MIN(" + PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED + ") m" + " from " + PurchaseOrder.PURCHASE_ORDER_TABLE + " t " +
            " where " + PurchaseOrder.PURCHASE_ORDER_COL_RESP_ENT_ID + "='" + respEntId + "'" +
            " GROUP BY " + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID +
            ") t ON PO." + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID + "=t." + PurchaseOrder.PURCHASE_ORDER_COL_RFQ_ID +
            " AND PO." + PurchaseOrder.PURCHASE_ORDER_COL_DATE_CREATED + "=t.m" +
            ") PO ON PO." + PurchaseOrder.PURCHASE_ORDER_COL_PO_ID + "=PQ." + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID +
            " AND PQ." + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PRODUCT_NAME + "='" + prodName + "'";

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, PurchaseOrderQuote> poQuoteDict = new Dictionary<string, PurchaseOrderQuote>();

            foreach (DataRow dr in dt.Rows)
            {
                PurchaseOrderQuote quoteObj = new PurchaseOrderQuote();

                quoteObj.setPo_id(dr[0].ToString());
                quoteObj.setProd_srv_category(dr[1].ToString());
                quoteObj.setProduct_name(dr[2].ToString());
                quoteObj.setQuote(float.Parse(dr[3].ToString()));
                quoteObj.setUnits(float.Parse(dr[4].ToString()));

                if (!poQuoteDict.ContainsKey(dr[0].ToString() + "-" + dr[5].ToString()))
                    poQuoteDict.Add(dr[0].ToString() + "-" + dr[5].ToString(), quoteObj);
            }

            cn.disconnect();
            return poQuoteDict;
        }
        /// <summary>
        /// For a given set of RFQ id and product name this method returns a dictionary of rfq id and total delivered quantity 
        /// the key of the dictionary is the RFQ id
        /// </summary>
        /// <param name="rfqList"></param>
        /// <param name="prodName"></param>
        /// <returns></returns>
        public static Dictionary<String, float> getTotalDeliveredQntyByRFQIdAndProductName(ArrayList rfqList, String prodName)
        {
            String rfqArray = "";
            for (int i = 0; i < rfqList.Count; i++)
            {
                rfqArray += rfqArray.Equals("") ? "'" + rfqList[i].ToString() + "'" : ",'" + rfqList[i].ToString() + "'";
            }

            String query = " select INV." + Invoice.INVOICE_COL_RFQ_ID + ", SUM(PQ1." + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_UNITS + ")" +
                " from " + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_TABLE + " PQ1, " + Invoice.INVOICE_TABLE + " INV " +
                " where " + "INV." + Invoice.INVOICE_COL_RFQ_ID + " IN (" + rfqArray + ")" +
                " and " + "INV." + Invoice.INVOICE_COL_DELIVERY_STAT + "='" + DeliveryStat.DELIV_STAT_DELIVERED + "'" +
                " and " + "INV." + Invoice.INVOICE_COL_RELATED_PO + "=" + "PQ1." + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID +
                " and " + "PQ1." + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PRODUCT_NAME + "='" + prodName + "'" +
                " GROUP BY INV." + Invoice.INVOICE_COL_RFQ_ID;

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, float> returnDict = new Dictionary<string, float>();

            foreach (DataRow dr in dt.Rows)
            {
                returnDict.Add(dr[0].ToString(), float.Parse(dr[1].ToString()));

            }

            cn.disconnect();
            return returnDict;
        }
    }
    /// <summary>
    /// This class is representative of the backend object 'purchase_order_quote_details'
    /// </summary>
    public class PurchaseOrderQuote
    {
        private String po_id;
        private String prod_srv_category;
        private String product_name;
        private float quote;
        private float units;

        private static String sessionUser = "";

        public const String  PURCHASE_ORDER_QUOTE_TABLE="purchase_order_quote_details";

        public const String PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID="po_id";
        public const String PURCHASE_ORDER_QUOTE_DETAILS_COL_PROD_SRV_CATEGORY="prod_srv_category";
        public const String PURCHASE_ORDER_QUOTE_DETAILS_COL_PRODUCT_NAME ="product_name";
        public const String PURCHASE_ORDER_QUOTE_DETAILS_COL_QUOTE="quote";
        public const String PURCHASE_ORDER_QUOTE_DETAILS_COL_UNITS="units";

        public const String PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID_TYPE=Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_QUOTE_DETAILS_COL_PROD_SRV_CATEGORY_TYPE=Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_QUOTE_DETAILS_COL_PRODUCT_NAME_TYPE=Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_QUOTE_DETAILS_COL_QUOTE_TYPE=Connections.NUMBER_TYPE;
        public const String  PURCHASE_ORDER_QUOTE_DETAILS_COL_UNITS_TYPE=Connections.NUMBER_TYPE;



        public String getPo_id()
        {
            return po_id;
        }
        public void setPo_id(String po_id)
        {
            this.po_id = po_id;
        }
        public String getProd_srv_category()
        {
            return prod_srv_category;
        }
        public void setProd_srv_category(String prod_srv_category)
        {
            this.prod_srv_category = prod_srv_category;
        }
        public String getProduct_name()
        {
            return product_name;
        }
        public void setProduct_name(String product_name)
        {
            this.product_name = product_name;
        }
        public float getQuote()
        {
            return quote;
        }
        public void setQuote(float quote)
        {
            this.quote = quote;
        }
        public float getUnits()
        {
            return units;
        }
        public void setUnits(float units)
        {
            this.units = units;
        }

        /// <summary>
        /// This method inserts an ArrayList of PurchaseOrderQuote objects into DB.
        /// </summary>
        /// <param name="pqList"></param>
        /// <returns></returns>
        public static int insertPurchaseOrderQuoteListDB(ArrayList pqList)
        {
            int rowsAffected = 0;
            String insertCmdInit = "insert into " + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_TABLE
                + " ("
                + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID + ","
                + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PROD_SRV_CATEGORY + ","
                + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PRODUCT_NAME + ","
                + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_QUOTE + ","
                + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_UNITS + ")"
                + "values (";
            String insertCmd = "";

            Connections cn = new Connections();

            for (int i = 0; i < pqList.Count;i++ )
            {
                PurchaseOrderQuote poObj = (PurchaseOrderQuote)pqList[i];

                insertCmd = insertCmdInit + " '" + poObj.getPo_id() + "'," + "'" +
                poObj.getProd_srv_category() + "'," + "'" +
                poObj.getProduct_name() + "'," + "'" +
                poObj.getQuote() + "'," + "'" +
                poObj.getUnits() + "'";

                insertCmd += ")";

                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            }

                        
            cn.disconnect();
            return rowsAffected;
        }

        /// <summary>
        /// Where clause must contain the purchase order id
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updatePurchaseOrderQuoteDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - PurchaseOrderQuote.updatePurchaseOrderQuoteDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to PurchaseOrderQuote.updatePurchaseOrderQuoteDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to PurchaseOrderQuote.updatePurchaseOrderQuoteDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();
 chkDataType.Add(PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID,PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID_TYPE);
 chkDataType.Add(PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PROD_SRV_CATEGORY,PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PROD_SRV_CATEGORY_TYPE);
 chkDataType.Add(PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PRODUCT_NAME ,PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PRODUCT_NAME_TYPE);
 chkDataType.Add(PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_QUOTE,PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_QUOTE_TYPE);
 chkDataType.Add(PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_UNITS,PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_UNITS_TYPE);




            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PurchaseOrderQuote.updatePurchaseOrderQuoteDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PurchaseOrderQuote.updatePurchaseOrderQuoteDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }
        /// <summary>
        /// For a given purchase order id, this method returns an ArrayList of 'PurchaseOrderQuote' objects
        /// </summary>
        /// <param name="poId"></param>
        /// <returns></returns>
        public static ArrayList getPurcahseOrderQuoteListbyPOIdDB(String poId)
        {
            if (poId.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty purchase order Id sent to PurchaseOrderQuote.getPurcahseOrderQuoteListbyPOIdDB"));

            Connections cn = new Connections();
            String query = "select " +
                         PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID+
                  ","+  PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PROD_SRV_CATEGORY+
                 ","+   PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PRODUCT_NAME +
                 ","+   PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_QUOTE+
                 ","+   PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_UNITS+
                  " from " + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_TABLE +
                " where " + PurchaseOrderQuote.PURCHASE_ORDER_QUOTE_DETAILS_COL_PO_ID + "='" + poId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
           
            ArrayList returnList=new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                 PurchaseOrderQuote temp = new PurchaseOrderQuote();

                temp.setPo_id(dr[0].ToString());
                temp.setProd_srv_category(dr[1].ToString());
                temp.setProduct_name(dr[2].ToString());
                temp.setQuote(float.Parse(dr[3].ToString()));
                temp.setUnits(float.Parse(dr[4].ToString()));

                returnList.Add(temp);
            }

            cn.disconnect();
            return returnList;
        }
    }
    /// <summary>
    /// This class is representative of the backend object 'purchase_order_spec_details'
    /// </summary>
    public class PurchaseOrderSpec
    {
        private String po_id;
        private String prod_srv_category;
        private String spec_id;
        private String spec_text;
        private String featId;

        private static String sessionUser = "";

        public const String PURCHASE_ORDER_SPEC_TABLE = "purchase_order_spec_details";

        public const String PURCHASE_ORDER_SPEC_DETAILS_COL_PO_ID="po_id";
        public const String PURCHASE_ORDER_SPEC_DETAILS_COL_PROD_SRV_CATEGORY="prod_srv_category";
        public const String PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_ID="spec_id";
        public const String PURCHASE_ORDER_SPEC_DETAILS_COL_FEAT_ID = "Feature_id";
        public const String PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_TEXT="spec_text";

        public const String PURCHASE_ORDER_SPEC_DETAILS_COL_PO_ID_TYPE=Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_SPEC_DETAILS_COL_PROD_SRV_CATEGORY_TYPE=Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_ID_TYPE=Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_SPEC_DETAILS_COL_FEAT_ID_TYPE = Connections.STRING_TYPE;
        public const String PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_TEXT_TYPE = Connections.STRING_TYPE;


        public String getPo_id()
        {
            return po_id;
        }
        public void setPo_id(String po_id)
        {
            this.po_id = po_id;
        }
        public String getProd_srv_category()
        {
            return prod_srv_category;
        }
        public void setProd_srv_category(String prod_srv_category)
        {
            this.prod_srv_category = prod_srv_category;
        }
        public String getSpec_id()
        {
            return spec_id;
        }
        public void setSpec_id(String spec_id)
        {
            this.spec_id = spec_id;
        }
        public String getFeatId()
        {
            return this.featId;
        }

        public void setFeatId(String fId)
        {
            this.featId = fId;
        }
        public String getSpec_text()
        {
            return spec_text;
        }
        public void setSpec_text(String spec_text)
        {
            this.spec_text = spec_text;
        }

        /// <summary>
        /// This method inserts an ArrayList of 'PurchaseOrderSpec' objects
        /// </summary>
        /// <param name="pqList"></param>
        /// <returns></returns>
        public static int insertPurchaseOrderQuoteListDB(ArrayList pqList)
        {
            int rowsAffected = 0;
            String insertCmd = "insert into " + PurchaseOrderSpec.PURCHASE_ORDER_SPEC_TABLE
                + " ("
                + PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_PO_ID + ","
                + PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_PROD_SRV_CATEGORY + ","
                + PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_ID + ","
                + PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_FEAT_ID + ","
                + PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_TEXT +  ")"
                + "values (";

            Connections cn = new Connections();

            for (int i = 0; i < pqList.Count; i++)
            {
                PurchaseOrderSpec poObj = (PurchaseOrderSpec)pqList[i];

                insertCmd = insertCmd + " '" + poObj.getPo_id() + "'," + "'" +
                poObj.getProd_srv_category() + "'," + "'" +
                poObj.getSpec_id() + "'," + "'" +
                poObj.getFeatId() + "'," + "'" +
                poObj.getSpec_text() + "'" ;

                insertCmd += ")";

                rowsAffected += cn.execInsertUpdate(insertCmd, sessionUser);

            }


            cn.disconnect();
            return rowsAffected;
        }

        /// <summary>
        /// Where clause must contain the purchase order id
        /// </summary>
        /// <param name="targetValue"></param>
        /// <param name="whereClause"></param>
        /// <param name="op"></param>
        /// <returns></returns>
        public static int updatePurchaseOrderSpecDB(Dictionary<String, String> targetValue, Dictionary<String, String> whereClause, String op)
        {
            String whereClauseCheck = "";

            if (!whereClause.TryGetValue(PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_PO_ID, out whereClauseCheck))
                throw (new CustomExceptions.invalidParamException("where clause does not contain mandatory parameter - PurchaseOrderSpec.updatePurchaseOrderSpecDB"));

            int rowsAffected = 0;
            String operation = ((op.Equals(Connections.OPERATION_DELETE) || op.Equals(Connections.OPERATION_UPDATE)) ? op.Trim() : "");

            if (operation.Equals(""))
                throw (new CustomExceptions.invalidParamException(" Operation Parameter Passed to PurchaseOrderSpec.updatePurchaseOrderSpecDB is " + op));
            if (operation.Equals(Connections.OPERATION_UPDATE) && targetValue.Count == 0)
                throw (new CustomExceptions.invalidParamException(" target value prameter Passed to PurchaseOrderSpec.updatePurchaseOrderSpecDB is " + op));

            /*In case of Update -> 'update <table_name> set '
             * In case of delete -> 'delete from <table_name> '
             */
            String cmd = (operation.Equals(Connections.OPERATION_UPDATE) ? Connections.OPERATION_UPDATE + " " + PurchaseOrderSpec.PURCHASE_ORDER_SPEC_TABLE +
                " set " : Connections.OPERATION_DELETE + " from " + PurchaseOrderSpec.PURCHASE_ORDER_SPEC_TABLE) + " ";

            string quote = "";

            //Need to know the datatypes of field while creating the update statement
            Dictionary<String, String> chkDataType = new Dictionary<string, string>();

 chkDataType.Add(PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_PO_ID,PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_PO_ID_TYPE);
 chkDataType.Add(PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_PROD_SRV_CATEGORY,PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_PROD_SRV_CATEGORY_TYPE);
 chkDataType.Add(PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_ID,PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_ID_TYPE);
 chkDataType.Add(PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_FEAT_ID, PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_FEAT_ID_TYPE);
 chkDataType.Add(PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_TEXT, PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_TEXT_TYPE);
     


            String outValue = "";

            if (operation.Equals(Connections.OPERATION_UPDATE))
            {
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in targetValue)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PurchaseOrderSpec.updatePurchaseOrderSpecDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < targetValue.Count ? "," : ""); counter++;
                }
            }

            if (whereClause.Count > 0)
            {
                cmd += " where ";
                int counter = 1;
                foreach (KeyValuePair<String, String> kvp in whereClause)
                {
                    if (!chkDataType.TryGetValue(kvp.Key, out outValue))
                        throw (new CustomExceptions.invalidParamException("Invalid field name passed to PurchaseOrderSpec.updatePurchaseOrderSpecDB" + kvp.Key));
                    else
                        quote = outValue.Equals(Connections.STRING_TYPE) || outValue.Equals(Connections.DATE_TIME_TYPE) ? "'" : "";

                    cmd += kvp.Key + "=" + quote + kvp.Value + quote + (counter < whereClause.Count ? " and " : ""); counter++;
                }
            }


            Connections cn = new Connections();
            rowsAffected = cn.execInsertUpdate(cmd, sessionUser);
            cn.disconnect();

            return rowsAffected;
        }
        /// <summary>
        /// For a given purcahse order if this method returns an ArryList of 'PurchaseOrderSpec' objects.
        /// </summary>
        /// <param name="poId"></param>
        /// <returns></returns>
        public static ArrayList getPurchaseOrderSpecListbyPOIdDB(String poId)
        {
                        if (poId.Equals(""))
                            throw (new CustomExceptions.invalidParamException("Empty purchase order Id sent to PurchaseOrderSpec.getPurchaseOrderSpecListbyPOIdDB"));

            Connections cn = new Connections();
            String query = "select " +
                 ","+PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_PO_ID+
                  ","+ PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_PROD_SRV_CATEGORY+
                  ","+ PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_ID+
                  "," + PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_FEAT_ID +
                   ","+  PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_SPEC_TEXT+

                " where " + PurchaseOrderSpec.PURCHASE_ORDER_SPEC_DETAILS_COL_PO_ID + "='" + poId.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];
           
            ArrayList returnList=new ArrayList();

            foreach (DataRow dr in dt.Rows)
            {
                 PurchaseOrderSpec temp = new PurchaseOrderSpec();

                 temp.setPo_id(dr[0].ToString());
                 temp.setProd_srv_category(dr[1].ToString());
                 temp.setSpec_id(dr[2].ToString());
                 temp.setFeatId(dr[3].ToString());
                 temp.setSpec_text(dr[4].ToString());

                returnList.Add(temp);
            }

            cn.disconnect();
            return returnList;
        }
    }

    public class AuditData
    {

        private String context_id1;
        private String context_id2;
        private String context_id3;
        private String context_field_name1;
        private String context_field_name2;
        private String context_field_name3;
        private String table_name;
        private String field_name;
        private String field_value;
        private String change_date_time;
        private String chnaged_by_user;
        private String changed_by_cmp;

        private static String sessionUser = "";

        public const String AUDIT_CONTEXT_MAPPING_COL_TABLE_NAME = "table_name";
        public const String AUDIT_CONTEXT_MAPPING_COL_CONTEXT_FIELD1 = "context_field1";
        public const String AUDIT_CONTEXT_MAPPING_COL_CONTEXT_FIELD2 = "context_field2";
        public const String AUDIT_CONTEXT_MAPPING_COL_CONTEXT_FIELD3 = "context_field3";

        public const String AUDIT_CONTEXT_MAPPING_TABLE = "Audit_Table_Context_Field_Mapping";

        public const String AUDIT_DATA_COL_CONTEXT_ID1 = "context_id1";
        public const String AUDIT_DATA_COL_CONTEXT_ID2 = "context_id2";
        public const String AUDIT_DATA_COL_CONTEXT_ID3 = "context_id3";
        public const String AUDIT_DATA_COL_CONTEXT_FIELD_NAME1 = "context_field_name1";
        public const String AUDIT_DATA_COL_CONTEXT_FIELD_NAME2 = "context_field_name2";
        public const String AUDIT_DATA_COL_CONTEXT_FIELD_NAME3 = "context_field_name3";
        public const String AUDIT_DATA_COL_TABLE_NAME = "table_name";
        public const String AUDIT_DATA_COL_FIELD_NAME = "field_name";
        public const String AUDIT_DATA_COL_FIELD_VALUE = "field_value";
        public const String AUDIT_DATA_COL_CHANGE_DATE_TIME = "change_date_time";
        public const String AUDIT_DATA_COL_CHNAGED_BY_USER = "changed_by_user";
        public const String AUDIT_DATA_COL_CHANGED_BY_CMP = "changed_by_cmp";

        public const String AUDIT_DATA_TABLE = "Audit_Data";

        public const String AUDIT_DATA_COL_CONTEXT_ID1_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_CONTEXT_ID2_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_CONTEXT_ID3_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_CONTEXT_FIELD_NAME1_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_CONTEXT_FIELD_NAME2_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_CONTEXT_FIELD_NAME3_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_TABLE_NAME_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_FIELD_NAME_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_FIELD_VALUE_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_CHANGE_DATE_TIME_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_CHNAGED_BY_USER_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_DATA_COL_CHANGED_BY_CMP_TYPE = Connections.STRING_TYPE;

        /// <summary>
        /// Returns all the three context ids associated with this object
        /// </summary>
        /// <returns></returns>
        public Dictionary<String, String> getAllContextIds()
        {
            Dictionary<String, String> returnDict = new Dictionary<String, String>();
            returnDict.Add("1", this.getContext_id1());
            returnDict.Add("2", this.getContext_id2());
            returnDict.Add("3", this.getContext_id3());

            return returnDict;
        }
        public Dictionary<String, String> getAllContextFieldNames()
        {
            Dictionary<String, String> returnDict = new Dictionary<String, String>();
            returnDict.Add("1", this.getContext_field_name1());
            returnDict.Add("2", this.getContext_field_name2());
            returnDict.Add("3", this.getContext_field_name3());

            return returnDict;
        }
        public String getContext_id1()
        {
            return context_id1;
        }
        public void setContext_id1(String context_id1)
        {
            this.context_id1 = context_id1;
        }
        public String getContext_id2()
        {
            return context_id2;
        }
        public void setContext_id2(String context_id2)
        {
            this.context_id2 = context_id2;
        }
        public String getContext_id3()
        {
            return context_id3;
        }
        public void setContext_id3(String context_id3)
        {
            this.context_id3 = context_id3;
        }
        public String getContext_field_name1()
        {
            return context_field_name1;
        }
        public void setContext_field_name1(String context_field_name1)
        {
            this.context_field_name1 = context_field_name1;
        }
        public String getContext_field_name2()
        {
            return context_field_name2;
        }
        public void setContext_field_name2(String context_field_name2)
        {
            this.context_field_name2 = context_field_name2;
        }
        public String getContext_field_name3()
        {
            return context_field_name3;
        }
        public void setContext_field_name3(String context_field_name3)
        {
            this.context_field_name3 = context_field_name3;
        }
        public String getTable_name()
        {
            return table_name;
        }
        public void setTable_name(String table_name)
        {
            this.table_name = table_name;
        }
        public String getField_name()
        {
            return field_name;
        }
        public void setField_name(String field_name)
        {
            this.field_name = field_name;
        }
        public String getField_value()
        {
            return field_value;
        }
        public void setField_value(String field_value)
        {
            this.field_value = field_value;
        }
        public String getChange_date_time()
        {
            return change_date_time;
        }
        public void setChange_date_time(String change_date_time)
        {
            this.change_date_time = change_date_time;
        }
        public String getChnaged_by_user()
        {
            return chnaged_by_user;
        }
        public void setChnaged_by_user(String chnaged_by_user)
        {
            this.chnaged_by_user = chnaged_by_user;
        }
        public String getChanged_by_cmp()
        {
            return changed_by_cmp;
        }
        public void setChanged_by_cmp(String changed_by_cmp)
        {
            this.changed_by_cmp = changed_by_cmp;
        }

        /// <summary>
        /// Inserts the passed AuditData object into database
        /// </summary>
        /// <param name="auditObj"></param>
        /// <returns></returns>
        public static int insertContextObject(AuditData auditObj)
        {
            int rowsAffected = 0;
            String insertCmd = "insert into " + AuditData.AUDIT_DATA_TABLE
    + " ("
    + AuditData.AUDIT_DATA_COL_CHANGE_DATE_TIME + ","
    + AuditData.AUDIT_DATA_COL_CHANGED_BY_CMP + ","
    + AuditData.AUDIT_DATA_COL_CHNAGED_BY_USER + ","
    + AuditData.AUDIT_DATA_COL_CONTEXT_ID1 + ","
    + AuditData.AUDIT_DATA_COL_CONTEXT_ID2 + ","
    + AuditData.AUDIT_DATA_COL_CONTEXT_ID3 + ","
    + AuditData.AUDIT_DATA_COL_CONTEXT_FIELD_NAME1 + ","
    + AuditData.AUDIT_DATA_COL_CONTEXT_FIELD_NAME2 + ","
    + AuditData.AUDIT_DATA_COL_CONTEXT_FIELD_NAME3 + ","
    + AuditData.AUDIT_DATA_COL_FIELD_NAME + ","
    + AuditData.AUDIT_DATA_COL_FIELD_VALUE + ","
    + AuditData.AUDIT_DATA_COL_TABLE_NAME + ")"
    + "values (";

            Connections cn = new Connections();

            insertCmd = insertCmd + " '" + auditObj.getChange_date_time() + "'," + "'" +
                auditObj.getChanged_by_cmp() + "'," + "'" +
                auditObj.getChnaged_by_user() + "'," + "'" +
                auditObj.getContext_id1() + "'," + "'" +
                auditObj.getContext_id2() + "'," + "'" +
                auditObj.getContext_id3() + "'," + "'" +
                auditObj.getContext_field_name1() + "'," + "'" +
                auditObj.getContext_field_name2() + "'," + "'" +
                auditObj.getContext_field_name3() + "'," + "'" +
                auditObj.getField_name() + "'," + "'" +
                auditObj.getField_value() + "'," + "'" +
                auditObj.getTable_name() + "'";

            insertCmd += ")";

            rowsAffected += cn.execInsertUpdateWithoutAuditEntry(insertCmd);

            cn.disconnect();
            return rowsAffected;
        }
        /// <summary>
        /// returns all context field names in the dictionary for the mentioned table
        /// </summary>
        /// <param name="tabName"></param>
        /// <returns></returns>
        public static Dictionary<String, String> getContextFieldNamesforTable(String tabName)
        {
            Dictionary<String, String> contextFieldsNameList = new Dictionary<string, string>();
            Connections cn = new Connections();

            String selectCmd = " select " + AuditData.AUDIT_CONTEXT_MAPPING_COL_TABLE_NAME +
                                "," + AuditData.AUDIT_CONTEXT_MAPPING_COL_CONTEXT_FIELD1 +
                                "," + AuditData.AUDIT_CONTEXT_MAPPING_COL_CONTEXT_FIELD2 +
                                "," + AuditData.AUDIT_CONTEXT_MAPPING_COL_CONTEXT_FIELD3 +
                                " from " + AuditData.AUDIT_CONTEXT_MAPPING_TABLE +
                                " where " + AuditData.AUDIT_CONTEXT_MAPPING_COL_TABLE_NAME + "='" + tabName.Trim() + "'";

            DataSet ds = cn.execQuery(selectCmd, sessionUser);
            DataTable dt = ds.Tables[0];

            foreach (DataRow dr in dt.Rows)
            {
                if (!dr[1].ToString().Equals(""))
                    contextFieldsNameList.Add(dr[1].ToString(), dr[1].ToString());
                if (!dr[2].ToString().Equals(""))
                    contextFieldsNameList.Add(dr[2].ToString(), dr[2].ToString());
                if (!dr[3].ToString().Equals(""))
                    contextFieldsNameList.Add(dr[3].ToString(), dr[3].ToString());
            }
            cn.disconnect();

            return contextFieldsNameList;
        }
        /// <summary>
        /// This method works in multiple steps -
        /// 1. Invoke getAuditRecord to generate a dictionary of field names and values as passed in the command
        /// 2. Invoke getContextFieldValues to get the dictionary of context fields and their respective values
        /// 3. No audit entry will be created for that command where there is not context field value
        /// 4. one entry of a field and its value along with the respective (upto 3) context field/s will be made into audit data table
        /// </summary>
        /// <param name="cmd"></param>
        /// <param name="user"></param>
        /// <param name="cmpId"></param>
        /// <returns></returns>
        public static int createAuditRecordForCommand(String cmd, String user, String cmpId)
        {
            Dictionary<String, String> fieldValueDict = getAuditRecord(cmd);
            String tableName = "";

            foreach (KeyValuePair<String, String> kvp in fieldValueDict)
            {
                tableName = kvp.Key.Substring(kvp.Key.IndexOf("-") + 1).Trim();
                break;
            }
            String[] tableNameComps = tableName.Split('.');
            if (tableNameComps != null && tableNameComps.Length > 1)
                tableName = tableNameComps[tableNameComps.Length - 1].Replace("[", "").Replace("]", "").Trim();

            Dictionary<String, String> contextFieldsNameList = getContextFieldNamesforTable(tableName);
            Dictionary<String, String> contextFieldsValues = getContextFieldValues(contextFieldsNameList, cmd);

            int rowsAffected = 0;

            //No need to make audit entry if there is no context field values
            if (contextFieldsValues != null && contextFieldsValues.Count > 0)
                foreach (KeyValuePair<String, String> kvp in fieldValueDict)
                {
                    AuditData auditObj = new AuditData();

                    auditObj.setField_value(kvp.Value);
                    auditObj.setField_name(kvp.Key.Substring(0, kvp.Key.IndexOf("-")));
                    //Insert the context field values and names for each of the audit entries
                    int counter = 1;
                    foreach (KeyValuePair<String, String> kvpVals in contextFieldsValues)
                    {
                        if (counter == 1)
                        {
                            auditObj.setContext_id1(kvpVals.Value);
                            auditObj.setContext_field_name1(kvpVals.Key);
                        }
                        if (counter == 2)
                        {
                            auditObj.setContext_id2(kvpVals.Value);
                            auditObj.setContext_field_name2(kvpVals.Key);
                        }
                        if (counter == 3)
                        {
                            auditObj.setContext_id3(kvpVals.Value);
                            auditObj.setContext_field_name3(kvpVals.Key);
                        }
                        counter++;
                    }

                    auditObj.setChnaged_by_user(user);
                    auditObj.setChanged_by_cmp(cmpId);
                    auditObj.setChange_date_time(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                    auditObj.setTable_name(tableName);

                    rowsAffected += insertContextObject(auditObj);

                }

            return rowsAffected;
        }
        public static Dictionary<String, String> getContextFieldValues(Dictionary<String, String> contextFieldNamesCaseSensitive, String cmd)
        {
            Dictionary<String, String> returnDict = new Dictionary<String, String>();
            Dictionary<String, String> contextFieldNames = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            foreach (KeyValuePair<String, String> kvp in contextFieldNamesCaseSensitive)
                contextFieldNames.Add(kvp.Key, kvp.Value);


            cmd = cmd.ToLower();
            bool commandInsert = (cmd.IndexOf("insert") >= 0 ? true : false);

            if (commandInsert)
            {
                //Get the field values list
                String[] fieldsArray = cmd.Substring(cmd.IndexOf("(") + 1, cmd.IndexOf(")") - cmd.IndexOf("(") - 1).Replace("[", "").Replace("]", "").Split(',');
                //Remove all single quotes from the query
                String valuesSubstring = cmd.Substring(cmd.IndexOf("values"));
                String[] fieldsValueArray = valuesSubstring.Substring(valuesSubstring.IndexOf("(") + 1, valuesSubstring.IndexOf(")") - valuesSubstring.IndexOf("(") - 1).Replace("'", "").Split(',');

                for (int i = 0; i < fieldsArray.Length; i++)
                {
                    if (fieldsArray[i].IndexOf(".") > 0)// remove the aliases
                        fieldsArray[i] = fieldsArray[i].Substring(fieldsArray[i].IndexOf(".") + 1).Trim();

                    if (contextFieldNames != null && contextFieldNames.ContainsKey(fieldsArray[i].Trim()))
                        returnDict.Add(fieldsArray[i].Trim(), fieldsValueArray[i].Trim());

                }
            }
            else
            {
                String[] fieldAndValueArray = cmd.Substring(cmd.IndexOf("set") + "set".Length, cmd.IndexOf("where") - cmd.IndexOf("set") - "set".Length - 1).Replace("(", "").
                    Replace(")", "").Replace("[", "").Replace("]", "").Replace("'", "").Split(',');

                for (int i = 0; i < fieldAndValueArray.Length; i++)
                {
                    String fieldName = fieldAndValueArray[i].Substring(0, fieldAndValueArray[i].IndexOf("=")).Trim();
                    String fieldValue = fieldAndValueArray[i].Substring(fieldAndValueArray[i].IndexOf("=") + 1).Trim();
                    if (fieldName.IndexOf(".") > 0)
                        fieldName = fieldName.Substring(fieldName.IndexOf(".") + 1);

                    if (contextFieldNames != null && contextFieldNames.ContainsKey(fieldName))
                        returnDict.Add(fieldName, fieldValue);

                }
            }

            //Now check the where clause for context field and if the field value was already addedd in the dictionary then ignore it
            //The new value gets precedence
            if (cmd.IndexOf("where") >= 0)
            {
                String[] fieldAndValueArrayWhere = cmd.Substring(cmd.IndexOf("where") + "where".Length).Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "").Replace("'", "").Split(new String[] { "and" }, StringSplitOptions.RemoveEmptyEntries);

                for (int i = 0; i < fieldAndValueArrayWhere.Length; i++)
                {
                    String fieldName = fieldAndValueArrayWhere[i].Substring(0, fieldAndValueArrayWhere[i].IndexOf("=")).Trim();
                    String fieldValue = fieldAndValueArrayWhere[i].Substring(fieldAndValueArrayWhere[i].IndexOf("=") + 1).Trim();
                    if (fieldName.IndexOf(".") > 0)
                        fieldName = fieldName.Substring(fieldName.IndexOf(".") + 1);

                    if (contextFieldNames != null && contextFieldNames.ContainsKey(fieldName) && !returnDict.ContainsKey(fieldName))
                        returnDict.Add(fieldName, fieldValue);

                }
            }
            return returnDict;
        }
        /// <summary>
        /// This method parses the query string and returns the field name and value in a dictionary.
        /// All the values are returned as a string without enclosing quotes (if any).
        /// </summary>
        /// <param name="cmd"></param>
        /// <returns></returns>
        public static Dictionary<String, String> getAuditRecord(String cmd)
        {
            Dictionary<String, String> returnDict = new Dictionary<String, String>();
            cmd = cmd.ToLower();
            bool commandInsert = (cmd.IndexOf("insert") >= 0 ? true : false);

            if (commandInsert)
            {
                //Get the field values list
                String[] fieldsArray = cmd.Substring(cmd.IndexOf("(") + 1, cmd.IndexOf(")") - cmd.IndexOf("(") - 1).Replace("[", "").Replace("]", "").Split(',');
                //Remove all single quotes from the query
                String valuesSubstring = cmd.Substring(cmd.IndexOf("values"));
                String[] fieldsValueArray = valuesSubstring.Substring(valuesSubstring.IndexOf("(") + 1, valuesSubstring.IndexOf(")") - valuesSubstring.IndexOf("(") - 1).Replace("'", "").Split(',');

                String tableName = cmd.Substring(cmd.IndexOf("insert into") + "insert into".Length, cmd.IndexOf("(") - cmd.IndexOf("insert into") - "insert into".Length).Replace("[", "").Replace("]", "");

                for (int i = 0; i < fieldsArray.Length; i++)
                {
                    if (fieldsArray[i].IndexOf(".") > 0)// remove the aliases
                        fieldsArray[i] = fieldsArray[i].Substring(fieldsArray[i].IndexOf(".") + 1).Trim();
                    returnDict.Add(fieldsArray[i] + "-" + tableName, fieldsValueArray[i].Trim());
                }
            }
            else
            {
                String[] fieldAndValueArray = cmd.Substring(cmd.IndexOf("set") + "set".Length, cmd.IndexOf("where") - cmd.IndexOf("set") - "set".Length - 1).Replace("(", "").
                    Replace(")", "").Replace("[", "").Replace("]", "").Replace("'", "").Split(',');
                String tableName = cmd.Substring(cmd.IndexOf("update") + "update".Length, cmd.IndexOf("set") - cmd.IndexOf("update") - "update".Length).Replace("[", "").
                    Replace("]", "");
                for (int i = 0; i < fieldAndValueArray.Length; i++)
                {
                    String fieldName = fieldAndValueArray[i].Substring(0, fieldAndValueArray[i].IndexOf("=")).Trim();
                    String fieldValue = fieldAndValueArray[i].Substring(fieldAndValueArray[i].IndexOf("=") + 1).Trim();
                    if (fieldName.IndexOf(".") > 0)
                        fieldName = fieldName.Substring(fieldName.IndexOf(".") + 1);

                    returnDict.Add(fieldName + "-" + tableName, fieldValue);
                }
            }

            return returnDict;
        }
        /// <summary>
        /// Returns an arraylist of AuditData objects sorted in descending order by change time stamp
        /// The 0 th indexed element of the arraylist contains the object with latest change time stamp and goes descedning thereafter.
        /// The second parameter is optional - should be used in situations where only the context ids might not be sufficient to point out the audit entries
        /// </summary>
        /// <param name="contextFieldValues"></param>
        /// <returns></returns>
        public static ArrayList getAuditRecordsForContextIdsDB(ArrayList contextFieldValues, String contextTable)
        {
            ArrayList returnList = new ArrayList();

            String selectCmd = " select " + AuditData.AUDIT_DATA_COL_CHANGE_DATE_TIME +
                                "," + AuditData.AUDIT_DATA_COL_CHANGED_BY_CMP +
                                "," + AuditData.AUDIT_DATA_COL_CHNAGED_BY_USER +
                                "," + AuditData.AUDIT_DATA_COL_FIELD_NAME +
                                "," + AuditData.AUDIT_DATA_COL_FIELD_VALUE +
                                "," + AuditData.AUDIT_DATA_COL_CONTEXT_ID1 +
                                "," + AuditData.AUDIT_DATA_COL_CONTEXT_ID2 +
                                "," + AuditData.AUDIT_DATA_COL_CONTEXT_ID3 +
                                "," + AuditData.AUDIT_DATA_COL_CONTEXT_FIELD_NAME1 +
                                "," + AuditData.AUDIT_DATA_COL_CONTEXT_FIELD_NAME2 +
                                "," + AuditData.AUDIT_DATA_COL_CONTEXT_FIELD_NAME3 +
                                "," + AuditData.AUDIT_DATA_COL_TABLE_NAME +
                                " from " + AuditData.AUDIT_DATA_TABLE + " where ";

            for (int i = 0; i < contextFieldValues.Count; i++)
            {
                selectCmd += "(" + "'" + contextFieldValues[i] + "'" + "=" + AuditData.AUDIT_DATA_COL_CONTEXT_ID1 + " or " +
                    "'" + contextFieldValues[i] + "'" + "=" + AuditData.AUDIT_DATA_COL_CONTEXT_ID2 + " or " +
                    "'" + contextFieldValues[i] + "'" + "=" + AuditData.AUDIT_DATA_COL_CONTEXT_ID3 + ")";
                if (i < contextFieldValues.Count - 1)
                    selectCmd += " and ";
            }

            if (contextTable != null && !contextTable.Equals(""))
                selectCmd += " and " + AuditData.AUDIT_DATA_COL_TABLE_NAME + "=" + "'" + contextTable + "'";

            selectCmd += "order by change_date_time DESC";

            Connections cn = new Connections();
            DataSet ds = cn.execQuery(selectCmd, sessionUser);
            DataTable dt = ds.Tables[0];
            int counter = 0;

            foreach (DataRow dr in dt.Rows)
            {
                AuditData auditDataObj = new AuditData();
                auditDataObj.setChange_date_time(dr[0].ToString());
                auditDataObj.setChanged_by_cmp(dr[1].ToString());
                auditDataObj.setChnaged_by_user(dr[2].ToString());
                auditDataObj.setField_name(dr[3].ToString());
                auditDataObj.setField_value(dr[4].ToString());
                auditDataObj.setContext_id1(dr[5].ToString());
                auditDataObj.setContext_id2(dr[6].ToString());
                auditDataObj.setContext_id3(dr[7].ToString());
                auditDataObj.setContext_field_name1(dr[8].ToString());
                auditDataObj.setContext_field_name2(dr[9].ToString());
                auditDataObj.setContext_field_name3(dr[10].ToString());
                auditDataObj.setTable_name(dr[11].ToString());

                returnList.Insert(counter, auditDataObj);
                counter++;
            }
            cn.disconnect();

            return returnList;
        }

    }

    public class Workflow_Action
    {
        private String contextId;
        private String contextName;
        private String actionTaken;
        private String entId;
        private String userId;
        private String comment;
        private String actionDateTime;

        private static String sessionUser = "";

        public const String WORKFLOW_ACTION_CONTEXT_NAME_RFQ = "rfq";
        public const String WORKFLOW_ACTION_CONTEXT_NAME_INV = "inv";
        public const String WORKFLOW_ACTION_ACTION_TAKEN_RFQ_APPROVED = BackEndObjects.RFQDetails.RFQ_APPROVAL_STAT_APPROVED;
        public const String WORKFLOW_ACTION_ACTION_TAKEN_INV_APPROVED = BackEndObjects.Invoice.INVOICE_APPROVAL_STAT_APPROVED;
        public const String WORKFLOW_ACTION_ACTION_TAKEN_REJECTED = "Rejected";
        public const String WORKFLOW_ACTION_ACTION_TAKEN_RESUBMITTED = "Resubmitted";
        public const String WORKFLOW_ACTION_ACTION_TAKEN_SUBMITTED = "Submitted";

        public const String WORKFLOW_ACTION_COL_CONTEXT_ID = "Context_Id";
        public const String WORKFLOW_ACTION_COL_CONTEXT_NAME = "Context_Name";
        public const String WORKFLOW_ACTION_COL_ACTION_TAKEN = "Action_Taken";
        public const String WORKFLOW_ACTION_COL_ENT_ID = "Cmp_Usr_Shop_id";
        public const String WORKFLOW_ACTION_COL_USR_ID = "Usr_id";
        public const String WORKFLOW_ACTION_COL_COMMENT = "Comment";
        public const String WORKFLOW_ACTION_COL_ACTION_DATETIME = "action_DateTime";

        public const String WORKFLOW_ACTION_TABLE = "Workflow_Actions";

        public const String WORKFLOW_ACTION_COL_CONTEXT_ID_TYPE = Connections.STRING_TYPE;
        public const String WORKFLOW_ACTION_COL_CONTEXT_NAME_TYPE = Connections.STRING_TYPE;
        public const String WORKFLOW_ACTION_COL_ACTION_TAKEN_TYPE = Connections.STRING_TYPE;
        public const String WORKFLOW_ACTION_COL_ENT_ID_TYPE = Connections.STRING_TYPE;
        public const String WORKFLOW_ACTION_COL_USR_ID_TYPE = Connections.STRING_TYPE;
        public const String WORKFLOW_ACTION_COL_COMMENT_TYPE = Connections.STRING_TYPE;
        public const String WORKFLOW_ACTION_COL_ACTION_DATETIME_TYPE = Connections.DATE_TIME_TYPE;


        public String getContextId()
        {
            return contextId;
        }
        public void setContextId(String contextId)
        {
            this.contextId = contextId;
        }
        public String getContextName()
        {
            return contextName;
        }
        public void setContextName(String contextName)
        {
            this.contextName = contextName;
        }
        public String getActionTaken()
        {
            return actionTaken;
        }
        public void setActionTaken(String actionTaken)
        {
            this.actionTaken = actionTaken;
        }
        public String getEntId()
        {
            return entId;
        }
        public void setEntId(String entId)
        {
            this.entId = entId;
        }
        public String getUserId()
        {
            return userId;
        }
        public void setUserId(String userId)
        {
            this.userId = userId;
        }
        public String getComment()
        {
            return comment;
        }
        public void setComment(String comment)
        {
            this.comment = comment;
        }
        public String getActionDateTime()
        {
            return actionDateTime;
        }
        public void setActionDateTime(String actionDateTime)
        {
            this.actionDateTime = actionDateTime;
        }

        /// <summary>
        /// inserts the passed workflow_action object into DB
        /// </summary>
        /// <param name="actionObj"></param>
        /// <returns></returns>
        public static int insertWorkflowActionObject(Workflow_Action actionObj)
        {
            int rowsAffected = 0;
            String insertCmd = "insert into " + Workflow_Action.WORKFLOW_ACTION_TABLE
        + " ("
        + Workflow_Action.WORKFLOW_ACTION_COL_CONTEXT_ID + ","
        + Workflow_Action.WORKFLOW_ACTION_COL_CONTEXT_NAME + ","
        + Workflow_Action.WORKFLOW_ACTION_COL_ENT_ID + ","
        + Workflow_Action.WORKFLOW_ACTION_COL_USR_ID + ","
        + Workflow_Action.WORKFLOW_ACTION_COL_COMMENT + ","
        + Workflow_Action.WORKFLOW_ACTION_COL_ACTION_TAKEN + ","
        + Workflow_Action.WORKFLOW_ACTION_COL_ACTION_DATETIME + ")"
        + "values (";

            Connections cn = new Connections();

            insertCmd = insertCmd + " '" + actionObj.getContextId() + "'," + "'" +
                actionObj.getContextName() + "'," + "'" +
                actionObj.getEntId() + "'," + "'" +
                actionObj.getUserId() + "'," + "'" +
                actionObj.getComment() + "'," + "'" +
                actionObj.getActionTaken() + "'," + "'" +
                actionObj.getActionDateTime() +  "'" ;

            insertCmd += ")";

            rowsAffected += cn.execInsertUpdateWithoutAuditEntry(insertCmd);

            cn.disconnect();
            return rowsAffected;
        }
        /// <summary>
        /// For a given context id, context name and entity id this method returns an arraylist of Workflow_action objects in descending order of action time
        /// </summary>
        /// <param name="contextId"></param>
        /// <param name="entId"></param>
        /// <returns></returns>
        public static ArrayList getWorkflowActionHistoryForContextIdandEntId(String contextId, String contextName,String entId)
        {
            ArrayList returnList = new ArrayList();
    
            String selectCmd = " select " + Workflow_Action.WORKFLOW_ACTION_COL_CONTEXT_ID +
                                "," + Workflow_Action.WORKFLOW_ACTION_COL_CONTEXT_NAME +
                                "," + Workflow_Action.WORKFLOW_ACTION_COL_ENT_ID +
                                "," + Workflow_Action.WORKFLOW_ACTION_COL_USR_ID +
                                "," + Workflow_Action.WORKFLOW_ACTION_COL_ACTION_TAKEN +
                                "," + Workflow_Action.WORKFLOW_ACTION_COL_ACTION_DATETIME +
                                "," + Workflow_Action.WORKFLOW_ACTION_COL_COMMENT +
                                " from " + Workflow_Action.WORKFLOW_ACTION_TABLE +
                                " where " + Workflow_Action.WORKFLOW_ACTION_COL_CONTEXT_ID + "='" + contextId.Trim() + "'"+ " and "+
                                Workflow_Action.WORKFLOW_ACTION_COL_CONTEXT_NAME+ "='" + contextName.Trim() + "'"+ " and "+
                                Workflow_Action.WORKFLOW_ACTION_COL_ENT_ID+ "='" + entId.Trim() + "'"+ 
                                " order by "+Workflow_Action.WORKFLOW_ACTION_COL_ACTION_DATETIME+" DESC";

  
            Connections cn = new Connections();
            DataSet ds = cn.execQuery(selectCmd, sessionUser);
            DataTable dt = ds.Tables[0];
            int counter = 0;

            foreach (DataRow dr in dt.Rows)
            {
                Workflow_Action actionObj = new Workflow_Action();

                actionObj.setContextId(dr[0].ToString());
                actionObj.setContextName(dr[1].ToString());
                actionObj.setEntId(dr[2].ToString());
                actionObj.setUserId(dr[3].ToString());
                actionObj.setActionTaken(dr[4].ToString());
                actionObj.setActionDateTime(dr[5].ToString());
                actionObj.setComment(dr[6].ToString());

                returnList.Insert(counter,actionObj);
                counter++;
            }
            cn.disconnect();

            return returnList;
        }
    }

    public class AuditFieldMapping
    {

        private String table_name;
        private String field_name;
        private String field_display_name;
        private String field_visible;

        private static String sessionUser = "";

        public const String AUDIT_FIELD_MAPPING_COL_TABLE_NAME = "table_name";
        public const String AUDIT_FIELD_MAPPING_COL_FIELD_NAME = "field_name";
        public const String AUDIT_FIELD_MAPPING_COL_FIELD_DISPLAY_NAME = "field_display_name";
        public const String AUDIT_FIELD_MAPPING_COL_FIELD_VISIBLE = "field_visible";

        public const String AUDIT_FIELD_MAPPING_TABLE = "Audit_Field_Mapping";


        public const String AUDIT_FIELD_MAPPING_COL_TABLE_NAME_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_FIELD_MAPPING_COL_FIELD_NAME_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_FIELD_MAPPING_COL_FIELD_DISPLAY_NAME_TYPE = Connections.STRING_TYPE;
        public const String AUDIT_FIELD_MAPPING_COL_FIELD_VISIBLE_TYPE = Connections.STRING_TYPE;

        public String getTable_name()
        {
            return table_name;
        }
        public void setTable_name(String table_name)
        {
            this.table_name = table_name;
        }
        public String getField_name()
        {
            return field_name;
        }
        public void setField_name(String field_name)
        {
            this.field_name = field_name;
        }
        public String getField_display_name()
        {
            return field_display_name;
        }
        public void setField_display_name(String field_display_name)
        {
            this.field_display_name = field_display_name;
        }
        public String getField_visible()
        {
            return field_visible;
        }
        public void setField_visible(String field_visible)
        {
            this.field_visible = field_visible;
        }

        /// <summary>
        /// The key in the returned dictionary is the table field name and the value if the object of type 'AuditFieldMapping' representing the records from the DB
        /// </summary>
        /// <param name="tName"></param>
        /// <returns></returns>
        public static Dictionary<String, AuditFieldMapping> getAllFieldMappingDetailsForTableName(String tName)
        {
            if (tName.Equals(""))
                throw (new CustomExceptions.invalidParamException("Empty table name sent to AuditFieldMapping.getAllFieldMappingDetailsForTableName"));

            Connections cn = new Connections();
            String query = "select " +
                         AuditFieldMapping.AUDIT_FIELD_MAPPING_COL_FIELD_DISPLAY_NAME +
                  "," + AuditFieldMapping.AUDIT_FIELD_MAPPING_COL_FIELD_NAME +
                 "," + AuditFieldMapping.AUDIT_FIELD_MAPPING_COL_FIELD_VISIBLE +
                 "," + AuditFieldMapping.AUDIT_FIELD_MAPPING_COL_TABLE_NAME +
                  " from " + AuditFieldMapping.AUDIT_FIELD_MAPPING_TABLE +
                " where " + AuditFieldMapping.AUDIT_FIELD_MAPPING_COL_TABLE_NAME + "='" + tName.Trim() + "'";

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, AuditFieldMapping> returnDict = new Dictionary<string, AuditFieldMapping>(StringComparer.InvariantCultureIgnoreCase);

            foreach (DataRow dr in dt.Rows)
            {
                AuditFieldMapping temp = new AuditFieldMapping();

                temp.setField_display_name(dr[0].ToString());
                temp.setField_name(dr[1].ToString());
                temp.setField_visible(dr[2].ToString());
                temp.setTable_name(dr[3].ToString());


                returnDict.Add(temp.getField_name(), temp);
            }

            cn.disconnect();
            return returnDict;
        }

        /// <summary>
        /// This method returns all audit field mapping details from DB in a dictionary of dictionary 
        /// The key of the return dictionary is the table name.
        /// The inner dictionary contains field names as Key and AuditFieldMapping object as the value
        /// </summary>
        /// <returns></returns>
        public static Dictionary<string, Dictionary<string, AuditFieldMapping>> getAllFieldMappingDetails()
        {
            Connections cn = new Connections();
            String query = "select " +
                         AuditFieldMapping.AUDIT_FIELD_MAPPING_COL_FIELD_DISPLAY_NAME +
                  "," + AuditFieldMapping.AUDIT_FIELD_MAPPING_COL_FIELD_NAME +
                 "," + AuditFieldMapping.AUDIT_FIELD_MAPPING_COL_FIELD_VISIBLE +
                 "," + AuditFieldMapping.AUDIT_FIELD_MAPPING_COL_TABLE_NAME +
                  " from " + AuditFieldMapping.AUDIT_FIELD_MAPPING_TABLE;              

            DataSet ds = cn.execQuery(query, sessionUser);
            DataTable dt = ds.Tables[0];

            Dictionary<String, Dictionary<String, AuditFieldMapping>> returnDict = new Dictionary<string, Dictionary<string, AuditFieldMapping>>(StringComparer.InvariantCultureIgnoreCase);

            foreach (DataRow dr in dt.Rows)
            {
                AuditFieldMapping temp = new AuditFieldMapping();

                temp.setField_display_name(dr[0].ToString());
                temp.setField_name(dr[1].ToString());
                temp.setField_visible(dr[2].ToString());
                temp.setTable_name(dr[3].ToString());

                if (!returnDict.ContainsKey(temp.getTable_name()))
                {
                    Dictionary<String, AuditFieldMapping> tempDict = new Dictionary<string, AuditFieldMapping>(StringComparer.InvariantCultureIgnoreCase);
                    tempDict.Add(temp.getField_name(), temp);
                    returnDict.Add(temp.getTable_name(), tempDict);
                }
                else
                      returnDict[temp.getTable_name()].Add(temp.getField_name(), temp);
            }

            cn.disconnect();
            return returnDict;
        }
    }

    
}
